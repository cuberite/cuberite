# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build
on:
  push:
    tags-ignore:
      - release-*
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  build:
    timeout-minutes: 60
    permissions: {}
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.

      # The excluded ones are needed so some configs don't run.
      # The included ones are needed because the cpp_compiler field is not set otherwise, leading CMake to fail.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
   
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DBUILD_TOOLS=Yes
        -DSELF_TEST=Yes
        -S ${{ github.workspace }}
        
    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - if: runner.os == 'Windows'
      name: Create Zip Windows
      run:  powershell Compress-Archive build/Server Cuberite-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}.zip
      
    - if: runner.os != 'Windows'
      name: Create Zip Linux
      run: zip -r Cuberite-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}.zip build/Server
      
    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - if: runner.os != 'Windows'
      name: Docs
      run: |
           cd build/Server
           touch apiCheckFailed.flag
           ./Cuberite <<- EOF
           load APIDump
           api
           apicheck
           restart
           stop
           EOF
           if [ -f ./NewlyUndocumented.lua ]; then
                echo "ERROR: Newly undocumented API symbols found:"
                cat ./NewlyUndocumented.lua
                exit 1
           fi
           if [ -f ./DuplicateDocs.txt ]; then
                echo "ERROR: API documentation has duplicate symbol warnings:"
                cat ./DuplicateDocs.txt
                exit 1
           fi
           if [ -f ./apiCheckFailed.flag ]; then
                echo "ERROR: API check has failed with an unknown error"
                exit 1
           fi
    - name: Extract branch name
      shell: bash
      run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      id: extract_branch

    - if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/experimental'
      name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: 'error'
        name: Cuberite-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}
        path: Cuberite-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}.zip
  upload_release:
    # Disable the job until a proper release process is made
    if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/experimental') && false
    permissions:
      contents: write
    needs: build
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: release-${{ steps.extract_branch.outputs.branch }}
          name: Release ${{ steps.extract_branch.outputs.branch }}
          body: Automatically uploaded release by GitHub actions
          fail_on_unmatched_files: true
          files: |
                  ${{ github.workspace }}/Cuberite-ubuntu-latest-clang-Release.zip
                  ${{ github.workspace }}/Cuberite-ubuntu-latest-gcc-Release.zip
                  ${{ github.workspace }}/Cuberite-windows-latest-cl-Release.zip
          prerelease: true
      # Taken from here https://stackoverflow.com/questions/68895194/github-actions-create-or-update-a-git-tag
      - if: ${{ success() }}
        name: Fix tag
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/release-${{ steps.extract_branch.outputs.branch }}',
              sha: context.sha
            }).catch(err => {
              if (err.status !== 422) throw err;
              github.rest.git.updateRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/release-${{ steps.extract_branch.outputs.branch }}',
                sha: context.sha
              });
            })

