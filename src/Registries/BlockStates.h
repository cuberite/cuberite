#pragma once

#include "Globals.h"
#include "BlockState.h"
#include "Defines.h"

namespace Block
{
	namespace AcaciaButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState AcaciaButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9492;
					else return 9493;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9494;
					else return 9495;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9496;
					else return 9497;
				else
					if (Powered) return 9498;
					else return 9499;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9500;
					else return 9501;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9502;
					else return 9503;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9504;
					else return 9505;
				else
					if (Powered) return 9506;
					else return 9507;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9508;
					else return 9509;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9510;
					else return 9511;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9512;
					else return 9513;
				else
					if (Powered) return 9514;
					else return 9515;
		}
		BlockState AcaciaButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace AcaciaDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState AcaciaDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12973;
							else return 12974;
						else
							if (Powered) return 12975;
							else return 12976;
					else
						if (Open)
							if (Powered) return 12977;
							else return 12978;
						else
							if (Powered) return 12979;
							else return 12980;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12981;
							else return 12982;
						else
							if (Powered) return 12983;
							else return 12984;
					else
						if (Open)
							if (Powered) return 12985;
							else return 12986;
						else
							if (Powered) return 12987;
							else return 12988;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12989;
							else return 12990;
						else
							if (Powered) return 12991;
							else return 12992;
					else
						if (Open)
							if (Powered) return 12993;
							else return 12994;
						else
							if (Powered) return 12995;
							else return 12996;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12997;
							else return 12998;
						else
							if (Powered) return 12999;
							else return 13000;
					else
						if (Open)
							if (Powered) return 13001;
							else return 13002;
						else
							if (Powered) return 13003;
							else return 13004;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13005;
							else return 13006;
						else
							if (Powered) return 13007;
							else return 13008;
					else
						if (Open)
							if (Powered) return 13009;
							else return 13010;
						else
							if (Powered) return 13011;
							else return 13012;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13013;
							else return 13014;
						else
							if (Powered) return 13015;
							else return 13016;
					else
						if (Open)
							if (Powered) return 13017;
							else return 13018;
						else
							if (Powered) return 13019;
							else return 13020;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13021;
							else return 13022;
						else
							if (Powered) return 13023;
							else return 13024;
					else
						if (Open)
							if (Powered) return 13025;
							else return 13026;
						else
							if (Powered) return 13027;
							else return 13028;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13029;
							else return 13030;
						else
							if (Powered) return 13031;
							else return 13032;
					else
						if (Open)
							if (Powered) return 13033;
							else return 13034;
						else
							if (Powered) return 13035;
							else return 13036;
		}
		BlockState AcaciaDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace AcaciaFence
	{
		constexpr BlockState AcaciaFence(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 12589;
							else return 12590;
						else
							if (West) return 12591;
							else return 12592;
					else
						if (Waterlogged)
							if (West) return 12593;
							else return 12594;
						else
							if (West) return 12595;
							else return 12596;
				else
					if (South)
						if (Waterlogged)
							if (West) return 12597;
							else return 12598;
						else
							if (West) return 12599;
							else return 12600;
					else
						if (Waterlogged)
							if (West) return 12601;
							else return 12602;
						else
							if (West) return 12603;
							else return 12604;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 12605;
							else return 12606;
						else
							if (West) return 12607;
							else return 12608;
					else
						if (Waterlogged)
							if (West) return 12609;
							else return 12610;
						else
							if (West) return 12611;
							else return 12612;
				else
					if (South)
						if (Waterlogged)
							if (West) return 12613;
							else return 12614;
						else
							if (West) return 12615;
							else return 12616;
					else
						if (Waterlogged)
							if (West) return 12617;
							else return 12618;
						else
							if (West) return 12619;
							else return 12620;
		}
		BlockState AcaciaFence();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace AcaciaFenceGate
	{
		constexpr BlockState AcaciaFenceGate(const eBlockFace Facing, const bool InWall, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (InWall)
					if (Open)
						if (Powered) return 12301;
						else return 12302;
					else
						if (Powered) return 12303;
						else return 12304;
				else
					if (Open)
						if (Powered) return 12305;
						else return 12306;
					else
						if (Powered) return 12307;
						else return 12308;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (InWall)
					if (Open)
						if (Powered) return 12309;
						else return 12310;
					else
						if (Powered) return 12311;
						else return 12312;
				else
					if (Open)
						if (Powered) return 12313;
						else return 12314;
					else
						if (Powered) return 12315;
						else return 12316;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (InWall)
					if (Open)
						if (Powered) return 12317;
						else return 12318;
					else
						if (Powered) return 12319;
						else return 12320;
				else
					if (Open)
						if (Powered) return 12321;
						else return 12322;
					else
						if (Powered) return 12323;
						else return 12324;
			else
				if (InWall)
					if (Open)
						if (Powered) return 12325;
						else return 12326;
					else
						if (Powered) return 12327;
						else return 12328;
				else
					if (Open)
						if (Powered) return 12329;
						else return 12330;
					else
						if (Powered) return 12331;
						else return 12332;
		}
		BlockState AcaciaFenceGate();
		eBlockFace Facing(BlockState Block);
		bool InWall(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace AcaciaHangingSign
	{
		constexpr BlockState AcaciaHangingSign(const bool Attached, const unsigned char Rotation, const bool Waterlogged)
		{
			if (Attached)
				if (Rotation == 0)
					if (Waterlogged) return 5130;
					else return 5131;
				else if (Rotation == 1)
					if (Waterlogged) return 5132;
					else return 5133;
				else if (Rotation == 2)
					if (Waterlogged) return 5134;
					else return 5135;
				else if (Rotation == 3)
					if (Waterlogged) return 5136;
					else return 5137;
				else if (Rotation == 4)
					if (Waterlogged) return 5138;
					else return 5139;
				else if (Rotation == 5)
					if (Waterlogged) return 5140;
					else return 5141;
				else if (Rotation == 6)
					if (Waterlogged) return 5142;
					else return 5143;
				else if (Rotation == 7)
					if (Waterlogged) return 5144;
					else return 5145;
				else if (Rotation == 8)
					if (Waterlogged) return 5146;
					else return 5147;
				else if (Rotation == 9)
					if (Waterlogged) return 5148;
					else return 5149;
				else if (Rotation == 10)
					if (Waterlogged) return 5150;
					else return 5151;
				else if (Rotation == 11)
					if (Waterlogged) return 5152;
					else return 5153;
				else if (Rotation == 12)
					if (Waterlogged) return 5154;
					else return 5155;
				else if (Rotation == 13)
					if (Waterlogged) return 5156;
					else return 5157;
				else if (Rotation == 14)
					if (Waterlogged) return 5158;
					else return 5159;
				else
					if (Waterlogged) return 5160;
					else return 5161;
			else
				if (Rotation == 0)
					if (Waterlogged) return 5162;
					else return 5163;
				else if (Rotation == 1)
					if (Waterlogged) return 5164;
					else return 5165;
				else if (Rotation == 2)
					if (Waterlogged) return 5166;
					else return 5167;
				else if (Rotation == 3)
					if (Waterlogged) return 5168;
					else return 5169;
				else if (Rotation == 4)
					if (Waterlogged) return 5170;
					else return 5171;
				else if (Rotation == 5)
					if (Waterlogged) return 5172;
					else return 5173;
				else if (Rotation == 6)
					if (Waterlogged) return 5174;
					else return 5175;
				else if (Rotation == 7)
					if (Waterlogged) return 5176;
					else return 5177;
				else if (Rotation == 8)
					if (Waterlogged) return 5178;
					else return 5179;
				else if (Rotation == 9)
					if (Waterlogged) return 5180;
					else return 5181;
				else if (Rotation == 10)
					if (Waterlogged) return 5182;
					else return 5183;
				else if (Rotation == 11)
					if (Waterlogged) return 5184;
					else return 5185;
				else if (Rotation == 12)
					if (Waterlogged) return 5186;
					else return 5187;
				else if (Rotation == 13)
					if (Waterlogged) return 5188;
					else return 5189;
				else if (Rotation == 14)
					if (Waterlogged) return 5190;
					else return 5191;
				else
					if (Waterlogged) return 5192;
					else return 5193;
		}
		BlockState AcaciaHangingSign();
		bool Attached(BlockState Block);
		unsigned char Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace AcaciaLeaves
	{
		constexpr BlockState AcaciaLeaves(const unsigned char Distance, const bool Persistent, const bool Waterlogged)
		{
			if (Distance == 1)
				if (Persistent)
					if (Waterlogged) return 364;
					else return 365;
				else
					if (Waterlogged) return 366;
					else return 367;
			else if (Distance == 2)
				if (Persistent)
					if (Waterlogged) return 368;
					else return 369;
				else
					if (Waterlogged) return 370;
					else return 371;
			else if (Distance == 3)
				if (Persistent)
					if (Waterlogged) return 372;
					else return 373;
				else
					if (Waterlogged) return 374;
					else return 375;
			else if (Distance == 4)
				if (Persistent)
					if (Waterlogged) return 376;
					else return 377;
				else
					if (Waterlogged) return 378;
					else return 379;
			else if (Distance == 5)
				if (Persistent)
					if (Waterlogged) return 380;
					else return 381;
				else
					if (Waterlogged) return 382;
					else return 383;
			else if (Distance == 6)
				if (Persistent)
					if (Waterlogged) return 384;
					else return 385;
				else
					if (Waterlogged) return 386;
					else return 387;
			else
				if (Persistent)
					if (Waterlogged) return 388;
					else return 389;
				else
					if (Waterlogged) return 390;
					else return 391;
		}
		BlockState AcaciaLeaves();
		unsigned char Distance(BlockState Block);
		bool Persistent(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace AcaciaLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState AcaciaLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 148;
			else if (Axis == Axis::Y) return 149;
			else return 150;
		}
		BlockState AcaciaLog();
		enum Axis Axis(BlockState Block);
	}
	namespace AcaciaPlanks
	{
		constexpr BlockState AcaciaPlanks()
		{
			return 19;
		}
	}
	namespace AcaciaPressurePlate
	{
		constexpr BlockState AcaciaPressurePlate(const bool Powered)
		{
			if (Powered) return 5900;
			else return 5901;
		}
		BlockState AcaciaPressurePlate();
		bool Powered(BlockState Block);
	}
	namespace AcaciaSapling
	{
		constexpr BlockState AcaciaSapling(const unsigned char Stage)
		{
			if (Stage == 0) return 37;
			else return 38;
		}
		BlockState AcaciaSapling();
		unsigned char Stage(BlockState Block);
	}
	namespace AcaciaSign
	{
		constexpr BlockState AcaciaSign(const unsigned char Rotation, const bool Waterlogged)
		{
			if (Rotation == 0)
				if (Waterlogged) return 4462;
				else return 4463;
			else if (Rotation == 1)
				if (Waterlogged) return 4464;
				else return 4465;
			else if (Rotation == 2)
				if (Waterlogged) return 4466;
				else return 4467;
			else if (Rotation == 3)
				if (Waterlogged) return 4468;
				else return 4469;
			else if (Rotation == 4)
				if (Waterlogged) return 4470;
				else return 4471;
			else if (Rotation == 5)
				if (Waterlogged) return 4472;
				else return 4473;
			else if (Rotation == 6)
				if (Waterlogged) return 4474;
				else return 4475;
			else if (Rotation == 7)
				if (Waterlogged) return 4476;
				else return 4477;
			else if (Rotation == 8)
				if (Waterlogged) return 4478;
				else return 4479;
			else if (Rotation == 9)
				if (Waterlogged) return 4480;
				else return 4481;
			else if (Rotation == 10)
				if (Waterlogged) return 4482;
				else return 4483;
			else if (Rotation == 11)
				if (Waterlogged) return 4484;
				else return 4485;
			else if (Rotation == 12)
				if (Waterlogged) return 4486;
				else return 4487;
			else if (Rotation == 13)
				if (Waterlogged) return 4488;
				else return 4489;
			else if (Rotation == 14)
				if (Waterlogged) return 4490;
				else return 4491;
			else
				if (Waterlogged) return 4492;
				else return 4493;
		}
		BlockState AcaciaSign();
		unsigned char Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace AcaciaSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState AcaciaSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 12075;
				else return 12076;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 12077;
				else return 12078;
			else
				if (Waterlogged) return 12079;
				else return 12080;
		}
		BlockState AcaciaSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace AcaciaStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState AcaciaStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10693;
						else return 10694;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10695;
						else return 10696;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10697;
						else return 10698;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10699;
						else return 10700;
					else
						if (Waterlogged) return 10701;
						else return 10702;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10703;
						else return 10704;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10705;
						else return 10706;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10707;
						else return 10708;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10709;
						else return 10710;
					else
						if (Waterlogged) return 10711;
						else return 10712;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10713;
						else return 10714;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10715;
						else return 10716;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10717;
						else return 10718;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10719;
						else return 10720;
					else
						if (Waterlogged) return 10721;
						else return 10722;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10723;
						else return 10724;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10725;
						else return 10726;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10727;
						else return 10728;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10729;
						else return 10730;
					else
						if (Waterlogged) return 10731;
						else return 10732;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10733;
						else return 10734;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10735;
						else return 10736;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10737;
						else return 10738;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10739;
						else return 10740;
					else
						if (Waterlogged) return 10741;
						else return 10742;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10743;
						else return 10744;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10745;
						else return 10746;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10747;
						else return 10748;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10749;
						else return 10750;
					else
						if (Waterlogged) return 10751;
						else return 10752;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10753;
						else return 10754;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10755;
						else return 10756;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10757;
						else return 10758;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10759;
						else return 10760;
					else
						if (Waterlogged) return 10761;
						else return 10762;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10763;
						else return 10764;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10765;
						else return 10766;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10767;
						else return 10768;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10769;
						else return 10770;
					else
						if (Waterlogged) return 10771;
						else return 10772;
		}
		BlockState AcaciaStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace AcaciaTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState AcaciaTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6396;
							else return 6397;
						else
							if (Waterlogged) return 6398;
							else return 6399;
					else
						if (Powered)
							if (Waterlogged) return 6400;
							else return 6401;
						else
							if (Waterlogged) return 6402;
							else return 6403;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6404;
							else return 6405;
						else
							if (Waterlogged) return 6406;
							else return 6407;
					else
						if (Powered)
							if (Waterlogged) return 6408;
							else return 6409;
						else
							if (Waterlogged) return 6410;
							else return 6411;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6412;
							else return 6413;
						else
							if (Waterlogged) return 6414;
							else return 6415;
					else
						if (Powered)
							if (Waterlogged) return 6416;
							else return 6417;
						else
							if (Waterlogged) return 6418;
							else return 6419;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6420;
							else return 6421;
						else
							if (Waterlogged) return 6422;
							else return 6423;
					else
						if (Powered)
							if (Waterlogged) return 6424;
							else return 6425;
						else
							if (Waterlogged) return 6426;
							else return 6427;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6428;
							else return 6429;
						else
							if (Waterlogged) return 6430;
							else return 6431;
					else
						if (Powered)
							if (Waterlogged) return 6432;
							else return 6433;
						else
							if (Waterlogged) return 6434;
							else return 6435;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6436;
							else return 6437;
						else
							if (Waterlogged) return 6438;
							else return 6439;
					else
						if (Powered)
							if (Waterlogged) return 6440;
							else return 6441;
						else
							if (Waterlogged) return 6442;
							else return 6443;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6444;
							else return 6445;
						else
							if (Waterlogged) return 6446;
							else return 6447;
					else
						if (Powered)
							if (Waterlogged) return 6448;
							else return 6449;
						else
							if (Waterlogged) return 6450;
							else return 6451;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6452;
							else return 6453;
						else
							if (Waterlogged) return 6454;
							else return 6455;
					else
						if (Powered)
							if (Waterlogged) return 6456;
							else return 6457;
						else
							if (Waterlogged) return 6458;
							else return 6459;
		}
		BlockState AcaciaTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace AcaciaWallHangingSign
	{
		constexpr BlockState AcaciaWallHangingSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 5730;
				else return 5731;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 5732;
				else return 5733;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 5734;
				else return 5735;
			else
				if (Waterlogged) return 5736;
				else return 5737;
		}
		BlockState AcaciaWallHangingSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace AcaciaWallSign
	{
		constexpr BlockState AcaciaWallSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 4882;
				else return 4883;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 4884;
				else return 4885;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 4886;
				else return 4887;
			else
				if (Waterlogged) return 4888;
				else return 4889;
		}
		BlockState AcaciaWallSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace AcaciaWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState AcaciaWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 213;
			else if (Axis == Axis::Y) return 214;
			else return 215;
		}
		BlockState AcaciaWood();
		enum Axis Axis(BlockState Block);
	}
	namespace ActivatorRail
	{
		enum class Shape
		{
			NorthSouth,
			EastWest,
			AscendingEast,
			AscendingWest,
			AscendingNorth,
			AscendingSouth,
		};
		constexpr BlockState ActivatorRail(const bool Powered, const enum Shape Shape, const bool Waterlogged)
		{
			if (Powered)
				if (Shape == Shape::NorthSouth)
					if (Waterlogged) return 10129;
					else return 10130;
				else if (Shape == Shape::EastWest)
					if (Waterlogged) return 10131;
					else return 10132;
				else if (Shape == Shape::AscendingEast)
					if (Waterlogged) return 10133;
					else return 10134;
				else if (Shape == Shape::AscendingWest)
					if (Waterlogged) return 10135;
					else return 10136;
				else if (Shape == Shape::AscendingNorth)
					if (Waterlogged) return 10137;
					else return 10138;
				else
					if (Waterlogged) return 10139;
					else return 10140;
			else
				if (Shape == Shape::NorthSouth)
					if (Waterlogged) return 10141;
					else return 10142;
				else if (Shape == Shape::EastWest)
					if (Waterlogged) return 10143;
					else return 10144;
				else if (Shape == Shape::AscendingEast)
					if (Waterlogged) return 10145;
					else return 10146;
				else if (Shape == Shape::AscendingWest)
					if (Waterlogged) return 10147;
					else return 10148;
				else if (Shape == Shape::AscendingNorth)
					if (Waterlogged) return 10149;
					else return 10150;
				else
					if (Waterlogged) return 10151;
					else return 10152;
		}
		BlockState ActivatorRail();
		bool Powered(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Air
	{
		constexpr BlockState Air()
		{
			return 0;
		}
	}
	namespace Allium
	{
		constexpr BlockState Allium()
		{
			return 2125;
		}
	}
	namespace AmethystBlock
	{
		constexpr BlockState AmethystBlock()
		{
			return 22091;
		}
	}
	namespace AmethystCluster
	{
		constexpr BlockState AmethystCluster(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 22093;
				else return 22094;
			else if (Facing == eBlockFace::BLOCK_FACE_XP)
				if (Waterlogged) return 22095;
				else return 22096;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 22097;
				else return 22098;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 22099;
				else return 22100;
			else if (Facing == eBlockFace::BLOCK_FACE_YP)
				if (Waterlogged) return 22101;
				else return 22102;
			else
				if (Waterlogged) return 22103;
				else return 22104;
		}
		BlockState AmethystCluster();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace AncientDebris
	{
		constexpr BlockState AncientDebris()
		{
			return 20508;
		}
	}
	namespace Andesite
	{
		constexpr BlockState Andesite()
		{
			return 6;
		}
	}
	namespace AndesiteSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState AndesiteSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 15191;
				else return 15192;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 15193;
				else return 15194;
			else
				if (Waterlogged) return 15195;
				else return 15196;
		}
		BlockState AndesiteSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace AndesiteStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState AndesiteStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14817;
						else return 14818;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14819;
						else return 14820;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14821;
						else return 14822;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14823;
						else return 14824;
					else
						if (Waterlogged) return 14825;
						else return 14826;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14827;
						else return 14828;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14829;
						else return 14830;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14831;
						else return 14832;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14833;
						else return 14834;
					else
						if (Waterlogged) return 14835;
						else return 14836;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14837;
						else return 14838;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14839;
						else return 14840;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14841;
						else return 14842;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14843;
						else return 14844;
					else
						if (Waterlogged) return 14845;
						else return 14846;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14847;
						else return 14848;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14849;
						else return 14850;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14851;
						else return 14852;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14853;
						else return 14854;
					else
						if (Waterlogged) return 14855;
						else return 14856;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14857;
						else return 14858;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14859;
						else return 14860;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14861;
						else return 14862;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14863;
						else return 14864;
					else
						if (Waterlogged) return 14865;
						else return 14866;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14867;
						else return 14868;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14869;
						else return 14870;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14871;
						else return 14872;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14873;
						else return 14874;
					else
						if (Waterlogged) return 14875;
						else return 14876;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14877;
						else return 14878;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14879;
						else return 14880;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14881;
						else return 14882;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14883;
						else return 14884;
					else
						if (Waterlogged) return 14885;
						else return 14886;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14887;
						else return 14888;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14889;
						else return 14890;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14891;
						else return 14892;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14893;
						else return 14894;
					else
						if (Waterlogged) return 14895;
						else return 14896;
		}
		BlockState AndesiteStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace AndesiteWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState AndesiteWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17807;
								else if (West == West::Low) return 17808;
								else return 17809;
							else
								if (West == West::None) return 17810;
								else if (West == West::Low) return 17811;
								else return 17812;
						else
							if (Waterlogged)
								if (West == West::None) return 17813;
								else if (West == West::Low) return 17814;
								else return 17815;
							else
								if (West == West::None) return 17816;
								else if (West == West::Low) return 17817;
								else return 17818;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17819;
								else if (West == West::Low) return 17820;
								else return 17821;
							else
								if (West == West::None) return 17822;
								else if (West == West::Low) return 17823;
								else return 17824;
						else
							if (Waterlogged)
								if (West == West::None) return 17825;
								else if (West == West::Low) return 17826;
								else return 17827;
							else
								if (West == West::None) return 17828;
								else if (West == West::Low) return 17829;
								else return 17830;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17831;
								else if (West == West::Low) return 17832;
								else return 17833;
							else
								if (West == West::None) return 17834;
								else if (West == West::Low) return 17835;
								else return 17836;
						else
							if (Waterlogged)
								if (West == West::None) return 17837;
								else if (West == West::Low) return 17838;
								else return 17839;
							else
								if (West == West::None) return 17840;
								else if (West == West::Low) return 17841;
								else return 17842;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17843;
								else if (West == West::Low) return 17844;
								else return 17845;
							else
								if (West == West::None) return 17846;
								else if (West == West::Low) return 17847;
								else return 17848;
						else
							if (Waterlogged)
								if (West == West::None) return 17849;
								else if (West == West::Low) return 17850;
								else return 17851;
							else
								if (West == West::None) return 17852;
								else if (West == West::Low) return 17853;
								else return 17854;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17855;
								else if (West == West::Low) return 17856;
								else return 17857;
							else
								if (West == West::None) return 17858;
								else if (West == West::Low) return 17859;
								else return 17860;
						else
							if (Waterlogged)
								if (West == West::None) return 17861;
								else if (West == West::Low) return 17862;
								else return 17863;
							else
								if (West == West::None) return 17864;
								else if (West == West::Low) return 17865;
								else return 17866;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17867;
								else if (West == West::Low) return 17868;
								else return 17869;
							else
								if (West == West::None) return 17870;
								else if (West == West::Low) return 17871;
								else return 17872;
						else
							if (Waterlogged)
								if (West == West::None) return 17873;
								else if (West == West::Low) return 17874;
								else return 17875;
							else
								if (West == West::None) return 17876;
								else if (West == West::Low) return 17877;
								else return 17878;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17879;
								else if (West == West::Low) return 17880;
								else return 17881;
							else
								if (West == West::None) return 17882;
								else if (West == West::Low) return 17883;
								else return 17884;
						else
							if (Waterlogged)
								if (West == West::None) return 17885;
								else if (West == West::Low) return 17886;
								else return 17887;
							else
								if (West == West::None) return 17888;
								else if (West == West::Low) return 17889;
								else return 17890;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17891;
								else if (West == West::Low) return 17892;
								else return 17893;
							else
								if (West == West::None) return 17894;
								else if (West == West::Low) return 17895;
								else return 17896;
						else
							if (Waterlogged)
								if (West == West::None) return 17897;
								else if (West == West::Low) return 17898;
								else return 17899;
							else
								if (West == West::None) return 17900;
								else if (West == West::Low) return 17901;
								else return 17902;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17903;
								else if (West == West::Low) return 17904;
								else return 17905;
							else
								if (West == West::None) return 17906;
								else if (West == West::Low) return 17907;
								else return 17908;
						else
							if (Waterlogged)
								if (West == West::None) return 17909;
								else if (West == West::Low) return 17910;
								else return 17911;
							else
								if (West == West::None) return 17912;
								else if (West == West::Low) return 17913;
								else return 17914;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17915;
								else if (West == West::Low) return 17916;
								else return 17917;
							else
								if (West == West::None) return 17918;
								else if (West == West::Low) return 17919;
								else return 17920;
						else
							if (Waterlogged)
								if (West == West::None) return 17921;
								else if (West == West::Low) return 17922;
								else return 17923;
							else
								if (West == West::None) return 17924;
								else if (West == West::Low) return 17925;
								else return 17926;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17927;
								else if (West == West::Low) return 17928;
								else return 17929;
							else
								if (West == West::None) return 17930;
								else if (West == West::Low) return 17931;
								else return 17932;
						else
							if (Waterlogged)
								if (West == West::None) return 17933;
								else if (West == West::Low) return 17934;
								else return 17935;
							else
								if (West == West::None) return 17936;
								else if (West == West::Low) return 17937;
								else return 17938;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17939;
								else if (West == West::Low) return 17940;
								else return 17941;
							else
								if (West == West::None) return 17942;
								else if (West == West::Low) return 17943;
								else return 17944;
						else
							if (Waterlogged)
								if (West == West::None) return 17945;
								else if (West == West::Low) return 17946;
								else return 17947;
							else
								if (West == West::None) return 17948;
								else if (West == West::Low) return 17949;
								else return 17950;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17951;
								else if (West == West::Low) return 17952;
								else return 17953;
							else
								if (West == West::None) return 17954;
								else if (West == West::Low) return 17955;
								else return 17956;
						else
							if (Waterlogged)
								if (West == West::None) return 17957;
								else if (West == West::Low) return 17958;
								else return 17959;
							else
								if (West == West::None) return 17960;
								else if (West == West::Low) return 17961;
								else return 17962;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17963;
								else if (West == West::Low) return 17964;
								else return 17965;
							else
								if (West == West::None) return 17966;
								else if (West == West::Low) return 17967;
								else return 17968;
						else
							if (Waterlogged)
								if (West == West::None) return 17969;
								else if (West == West::Low) return 17970;
								else return 17971;
							else
								if (West == West::None) return 17972;
								else if (West == West::Low) return 17973;
								else return 17974;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17975;
								else if (West == West::Low) return 17976;
								else return 17977;
							else
								if (West == West::None) return 17978;
								else if (West == West::Low) return 17979;
								else return 17980;
						else
							if (Waterlogged)
								if (West == West::None) return 17981;
								else if (West == West::Low) return 17982;
								else return 17983;
							else
								if (West == West::None) return 17984;
								else if (West == West::Low) return 17985;
								else return 17986;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17987;
								else if (West == West::Low) return 17988;
								else return 17989;
							else
								if (West == West::None) return 17990;
								else if (West == West::Low) return 17991;
								else return 17992;
						else
							if (Waterlogged)
								if (West == West::None) return 17993;
								else if (West == West::Low) return 17994;
								else return 17995;
							else
								if (West == West::None) return 17996;
								else if (West == West::Low) return 17997;
								else return 17998;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17999;
								else if (West == West::Low) return 18000;
								else return 18001;
							else
								if (West == West::None) return 18002;
								else if (West == West::Low) return 18003;
								else return 18004;
						else
							if (Waterlogged)
								if (West == West::None) return 18005;
								else if (West == West::Low) return 18006;
								else return 18007;
							else
								if (West == West::None) return 18008;
								else if (West == West::Low) return 18009;
								else return 18010;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18011;
								else if (West == West::Low) return 18012;
								else return 18013;
							else
								if (West == West::None) return 18014;
								else if (West == West::Low) return 18015;
								else return 18016;
						else
							if (Waterlogged)
								if (West == West::None) return 18017;
								else if (West == West::Low) return 18018;
								else return 18019;
							else
								if (West == West::None) return 18020;
								else if (West == West::Low) return 18021;
								else return 18022;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18023;
								else if (West == West::Low) return 18024;
								else return 18025;
							else
								if (West == West::None) return 18026;
								else if (West == West::Low) return 18027;
								else return 18028;
						else
							if (Waterlogged)
								if (West == West::None) return 18029;
								else if (West == West::Low) return 18030;
								else return 18031;
							else
								if (West == West::None) return 18032;
								else if (West == West::Low) return 18033;
								else return 18034;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18035;
								else if (West == West::Low) return 18036;
								else return 18037;
							else
								if (West == West::None) return 18038;
								else if (West == West::Low) return 18039;
								else return 18040;
						else
							if (Waterlogged)
								if (West == West::None) return 18041;
								else if (West == West::Low) return 18042;
								else return 18043;
							else
								if (West == West::None) return 18044;
								else if (West == West::Low) return 18045;
								else return 18046;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18047;
								else if (West == West::Low) return 18048;
								else return 18049;
							else
								if (West == West::None) return 18050;
								else if (West == West::Low) return 18051;
								else return 18052;
						else
							if (Waterlogged)
								if (West == West::None) return 18053;
								else if (West == West::Low) return 18054;
								else return 18055;
							else
								if (West == West::None) return 18056;
								else if (West == West::Low) return 18057;
								else return 18058;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18059;
								else if (West == West::Low) return 18060;
								else return 18061;
							else
								if (West == West::None) return 18062;
								else if (West == West::Low) return 18063;
								else return 18064;
						else
							if (Waterlogged)
								if (West == West::None) return 18065;
								else if (West == West::Low) return 18066;
								else return 18067;
							else
								if (West == West::None) return 18068;
								else if (West == West::Low) return 18069;
								else return 18070;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18071;
								else if (West == West::Low) return 18072;
								else return 18073;
							else
								if (West == West::None) return 18074;
								else if (West == West::Low) return 18075;
								else return 18076;
						else
							if (Waterlogged)
								if (West == West::None) return 18077;
								else if (West == West::Low) return 18078;
								else return 18079;
							else
								if (West == West::None) return 18080;
								else if (West == West::Low) return 18081;
								else return 18082;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18083;
								else if (West == West::Low) return 18084;
								else return 18085;
							else
								if (West == West::None) return 18086;
								else if (West == West::Low) return 18087;
								else return 18088;
						else
							if (Waterlogged)
								if (West == West::None) return 18089;
								else if (West == West::Low) return 18090;
								else return 18091;
							else
								if (West == West::None) return 18092;
								else if (West == West::Low) return 18093;
								else return 18094;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18095;
								else if (West == West::Low) return 18096;
								else return 18097;
							else
								if (West == West::None) return 18098;
								else if (West == West::Low) return 18099;
								else return 18100;
						else
							if (Waterlogged)
								if (West == West::None) return 18101;
								else if (West == West::Low) return 18102;
								else return 18103;
							else
								if (West == West::None) return 18104;
								else if (West == West::Low) return 18105;
								else return 18106;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18107;
								else if (West == West::Low) return 18108;
								else return 18109;
							else
								if (West == West::None) return 18110;
								else if (West == West::Low) return 18111;
								else return 18112;
						else
							if (Waterlogged)
								if (West == West::None) return 18113;
								else if (West == West::Low) return 18114;
								else return 18115;
							else
								if (West == West::None) return 18116;
								else if (West == West::Low) return 18117;
								else return 18118;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18119;
								else if (West == West::Low) return 18120;
								else return 18121;
							else
								if (West == West::None) return 18122;
								else if (West == West::Low) return 18123;
								else return 18124;
						else
							if (Waterlogged)
								if (West == West::None) return 18125;
								else if (West == West::Low) return 18126;
								else return 18127;
							else
								if (West == West::None) return 18128;
								else if (West == West::Low) return 18129;
								else return 18130;
		}
		BlockState AndesiteWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace Anvil
	{
		constexpr BlockState Anvil(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 9916;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 9917;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 9918;
			else return 9919;
		}
		BlockState Anvil();
		eBlockFace Facing(BlockState Block);
	}
	namespace AttachedMelonStem
	{
		constexpr BlockState AttachedMelonStem(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 7060;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 7061;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 7062;
			else return 7063;
		}
		BlockState AttachedMelonStem();
		eBlockFace Facing(BlockState Block);
	}
	namespace AttachedPumpkinStem
	{
		constexpr BlockState AttachedPumpkinStem(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 7056;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 7057;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 7058;
			else return 7059;
		}
		BlockState AttachedPumpkinStem();
		eBlockFace Facing(BlockState Block);
	}
	namespace Azalea
	{
		constexpr BlockState Azalea()
		{
			return 25884;
		}
	}
	namespace AzaleaLeaves
	{
		constexpr BlockState AzaleaLeaves(const unsigned char Distance, const bool Persistent, const bool Waterlogged)
		{
			if (Distance == 1)
				if (Persistent)
					if (Waterlogged) return 504;
					else return 505;
				else
					if (Waterlogged) return 506;
					else return 507;
			else if (Distance == 2)
				if (Persistent)
					if (Waterlogged) return 508;
					else return 509;
				else
					if (Waterlogged) return 510;
					else return 511;
			else if (Distance == 3)
				if (Persistent)
					if (Waterlogged) return 512;
					else return 513;
				else
					if (Waterlogged) return 514;
					else return 515;
			else if (Distance == 4)
				if (Persistent)
					if (Waterlogged) return 516;
					else return 517;
				else
					if (Waterlogged) return 518;
					else return 519;
			else if (Distance == 5)
				if (Persistent)
					if (Waterlogged) return 520;
					else return 521;
				else
					if (Waterlogged) return 522;
					else return 523;
			else if (Distance == 6)
				if (Persistent)
					if (Waterlogged) return 524;
					else return 525;
				else
					if (Waterlogged) return 526;
					else return 527;
			else
				if (Persistent)
					if (Waterlogged) return 528;
					else return 529;
				else
					if (Waterlogged) return 530;
					else return 531;
		}
		BlockState AzaleaLeaves();
		unsigned char Distance(BlockState Block);
		bool Persistent(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace AzureBluet
	{
		constexpr BlockState AzureBluet()
		{
			return 2126;
		}
	}
	namespace Bamboo
	{
		enum class Leaves
		{
			None,
			Small,
			Large,
		};
		constexpr BlockState Bamboo(const unsigned char Age, const enum Leaves Leaves, const unsigned char Stage)
		{
			if (Age == 0)
				if (Leaves == Leaves::None)
					if (Stage == 0) return 14000;
					else return 14001;
				else if (Leaves == Leaves::Small)
					if (Stage == 0) return 14002;
					else return 14003;
				else
					if (Stage == 0) return 14004;
					else return 14005;
			else
				if (Leaves == Leaves::None)
					if (Stage == 0) return 14006;
					else return 14007;
				else if (Leaves == Leaves::Small)
					if (Stage == 0) return 14008;
					else return 14009;
				else
					if (Stage == 0) return 14010;
					else return 14011;
		}
		BlockState Bamboo();
		unsigned char Age(BlockState Block);
		enum Leaves Leaves(BlockState Block);
		unsigned char Stage(BlockState Block);
	}
	namespace BambooBlock
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState BambooBlock(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 168;
			else if (Axis == Axis::Y) return 169;
			else return 170;
		}
		BlockState BambooBlock();
		enum Axis Axis(BlockState Block);
	}
	namespace BambooButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState BambooButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9612;
					else return 9613;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9614;
					else return 9615;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9616;
					else return 9617;
				else
					if (Powered) return 9618;
					else return 9619;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9620;
					else return 9621;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9622;
					else return 9623;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9624;
					else return 9625;
				else
					if (Powered) return 9626;
					else return 9627;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9628;
					else return 9629;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9630;
					else return 9631;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9632;
					else return 9633;
				else
					if (Powered) return 9634;
					else return 9635;
		}
		BlockState BambooButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace BambooDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState BambooDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13293;
							else return 13294;
						else
							if (Powered) return 13295;
							else return 13296;
					else
						if (Open)
							if (Powered) return 13297;
							else return 13298;
						else
							if (Powered) return 13299;
							else return 13300;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13301;
							else return 13302;
						else
							if (Powered) return 13303;
							else return 13304;
					else
						if (Open)
							if (Powered) return 13305;
							else return 13306;
						else
							if (Powered) return 13307;
							else return 13308;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13309;
							else return 13310;
						else
							if (Powered) return 13311;
							else return 13312;
					else
						if (Open)
							if (Powered) return 13313;
							else return 13314;
						else
							if (Powered) return 13315;
							else return 13316;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13317;
							else return 13318;
						else
							if (Powered) return 13319;
							else return 13320;
					else
						if (Open)
							if (Powered) return 13321;
							else return 13322;
						else
							if (Powered) return 13323;
							else return 13324;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13325;
							else return 13326;
						else
							if (Powered) return 13327;
							else return 13328;
					else
						if (Open)
							if (Powered) return 13329;
							else return 13330;
						else
							if (Powered) return 13331;
							else return 13332;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13333;
							else return 13334;
						else
							if (Powered) return 13335;
							else return 13336;
					else
						if (Open)
							if (Powered) return 13337;
							else return 13338;
						else
							if (Powered) return 13339;
							else return 13340;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13341;
							else return 13342;
						else
							if (Powered) return 13343;
							else return 13344;
					else
						if (Open)
							if (Powered) return 13345;
							else return 13346;
						else
							if (Powered) return 13347;
							else return 13348;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13349;
							else return 13350;
						else
							if (Powered) return 13351;
							else return 13352;
					else
						if (Open)
							if (Powered) return 13353;
							else return 13354;
						else
							if (Powered) return 13355;
							else return 13356;
		}
		BlockState BambooDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace BambooFence
	{
		constexpr BlockState BambooFence(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 12749;
							else return 12750;
						else
							if (West) return 12751;
							else return 12752;
					else
						if (Waterlogged)
							if (West) return 12753;
							else return 12754;
						else
							if (West) return 12755;
							else return 12756;
				else
					if (South)
						if (Waterlogged)
							if (West) return 12757;
							else return 12758;
						else
							if (West) return 12759;
							else return 12760;
					else
						if (Waterlogged)
							if (West) return 12761;
							else return 12762;
						else
							if (West) return 12763;
							else return 12764;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 12765;
							else return 12766;
						else
							if (West) return 12767;
							else return 12768;
					else
						if (Waterlogged)
							if (West) return 12769;
							else return 12770;
						else
							if (West) return 12771;
							else return 12772;
				else
					if (South)
						if (Waterlogged)
							if (West) return 12773;
							else return 12774;
						else
							if (West) return 12775;
							else return 12776;
					else
						if (Waterlogged)
							if (West) return 12777;
							else return 12778;
						else
							if (West) return 12779;
							else return 12780;
		}
		BlockState BambooFence();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace BambooFenceGate
	{
		constexpr BlockState BambooFenceGate(const eBlockFace Facing, const bool InWall, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (InWall)
					if (Open)
						if (Powered) return 12461;
						else return 12462;
					else
						if (Powered) return 12463;
						else return 12464;
				else
					if (Open)
						if (Powered) return 12465;
						else return 12466;
					else
						if (Powered) return 12467;
						else return 12468;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (InWall)
					if (Open)
						if (Powered) return 12469;
						else return 12470;
					else
						if (Powered) return 12471;
						else return 12472;
				else
					if (Open)
						if (Powered) return 12473;
						else return 12474;
					else
						if (Powered) return 12475;
						else return 12476;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (InWall)
					if (Open)
						if (Powered) return 12477;
						else return 12478;
					else
						if (Powered) return 12479;
						else return 12480;
				else
					if (Open)
						if (Powered) return 12481;
						else return 12482;
					else
						if (Powered) return 12483;
						else return 12484;
			else
				if (InWall)
					if (Open)
						if (Powered) return 12485;
						else return 12486;
					else
						if (Powered) return 12487;
						else return 12488;
				else
					if (Open)
						if (Powered) return 12489;
						else return 12490;
					else
						if (Powered) return 12491;
						else return 12492;
		}
		BlockState BambooFenceGate();
		eBlockFace Facing(BlockState Block);
		bool InWall(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace BambooHangingSign
	{
		constexpr BlockState BambooHangingSign(const bool Attached, const unsigned char Rotation, const bool Waterlogged)
		{
			if (Attached)
				if (Rotation == 0)
					if (Waterlogged) return 5642;
					else return 5643;
				else if (Rotation == 1)
					if (Waterlogged) return 5644;
					else return 5645;
				else if (Rotation == 2)
					if (Waterlogged) return 5646;
					else return 5647;
				else if (Rotation == 3)
					if (Waterlogged) return 5648;
					else return 5649;
				else if (Rotation == 4)
					if (Waterlogged) return 5650;
					else return 5651;
				else if (Rotation == 5)
					if (Waterlogged) return 5652;
					else return 5653;
				else if (Rotation == 6)
					if (Waterlogged) return 5654;
					else return 5655;
				else if (Rotation == 7)
					if (Waterlogged) return 5656;
					else return 5657;
				else if (Rotation == 8)
					if (Waterlogged) return 5658;
					else return 5659;
				else if (Rotation == 9)
					if (Waterlogged) return 5660;
					else return 5661;
				else if (Rotation == 10)
					if (Waterlogged) return 5662;
					else return 5663;
				else if (Rotation == 11)
					if (Waterlogged) return 5664;
					else return 5665;
				else if (Rotation == 12)
					if (Waterlogged) return 5666;
					else return 5667;
				else if (Rotation == 13)
					if (Waterlogged) return 5668;
					else return 5669;
				else if (Rotation == 14)
					if (Waterlogged) return 5670;
					else return 5671;
				else
					if (Waterlogged) return 5672;
					else return 5673;
			else
				if (Rotation == 0)
					if (Waterlogged) return 5674;
					else return 5675;
				else if (Rotation == 1)
					if (Waterlogged) return 5676;
					else return 5677;
				else if (Rotation == 2)
					if (Waterlogged) return 5678;
					else return 5679;
				else if (Rotation == 3)
					if (Waterlogged) return 5680;
					else return 5681;
				else if (Rotation == 4)
					if (Waterlogged) return 5682;
					else return 5683;
				else if (Rotation == 5)
					if (Waterlogged) return 5684;
					else return 5685;
				else if (Rotation == 6)
					if (Waterlogged) return 5686;
					else return 5687;
				else if (Rotation == 7)
					if (Waterlogged) return 5688;
					else return 5689;
				else if (Rotation == 8)
					if (Waterlogged) return 5690;
					else return 5691;
				else if (Rotation == 9)
					if (Waterlogged) return 5692;
					else return 5693;
				else if (Rotation == 10)
					if (Waterlogged) return 5694;
					else return 5695;
				else if (Rotation == 11)
					if (Waterlogged) return 5696;
					else return 5697;
				else if (Rotation == 12)
					if (Waterlogged) return 5698;
					else return 5699;
				else if (Rotation == 13)
					if (Waterlogged) return 5700;
					else return 5701;
				else if (Rotation == 14)
					if (Waterlogged) return 5702;
					else return 5703;
				else
					if (Waterlogged) return 5704;
					else return 5705;
		}
		BlockState BambooHangingSign();
		bool Attached(BlockState Block);
		unsigned char Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BambooMosaic
	{
		constexpr BlockState BambooMosaic()
		{
			return 28;
		}
	}
	namespace BambooMosaicSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState BambooMosaicSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 12111;
				else return 12112;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 12113;
				else return 12114;
			else
				if (Waterlogged) return 12115;
				else return 12116;
		}
		BlockState BambooMosaicSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BambooMosaicStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState BambooMosaicStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11173;
						else return 11174;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11175;
						else return 11176;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11177;
						else return 11178;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11179;
						else return 11180;
					else
						if (Waterlogged) return 11181;
						else return 11182;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11183;
						else return 11184;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11185;
						else return 11186;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11187;
						else return 11188;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11189;
						else return 11190;
					else
						if (Waterlogged) return 11191;
						else return 11192;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11193;
						else return 11194;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11195;
						else return 11196;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11197;
						else return 11198;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11199;
						else return 11200;
					else
						if (Waterlogged) return 11201;
						else return 11202;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11203;
						else return 11204;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11205;
						else return 11206;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11207;
						else return 11208;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11209;
						else return 11210;
					else
						if (Waterlogged) return 11211;
						else return 11212;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11213;
						else return 11214;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11215;
						else return 11216;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11217;
						else return 11218;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11219;
						else return 11220;
					else
						if (Waterlogged) return 11221;
						else return 11222;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11223;
						else return 11224;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11225;
						else return 11226;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11227;
						else return 11228;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11229;
						else return 11230;
					else
						if (Waterlogged) return 11231;
						else return 11232;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11233;
						else return 11234;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11235;
						else return 11236;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11237;
						else return 11238;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11239;
						else return 11240;
					else
						if (Waterlogged) return 11241;
						else return 11242;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11243;
						else return 11244;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11245;
						else return 11246;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11247;
						else return 11248;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11249;
						else return 11250;
					else
						if (Waterlogged) return 11251;
						else return 11252;
		}
		BlockState BambooMosaicStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BambooPlanks
	{
		constexpr BlockState BambooPlanks()
		{
			return 27;
		}
	}
	namespace BambooPressurePlate
	{
		constexpr BlockState BambooPressurePlate(const bool Powered)
		{
			if (Powered) return 5910;
			else return 5911;
		}
		BlockState BambooPressurePlate();
		bool Powered(BlockState Block);
	}
	namespace BambooSapling
	{
		constexpr BlockState BambooSapling()
		{
			return 13999;
		}
	}
	namespace BambooSign
	{
		constexpr BlockState BambooSign(const unsigned char Rotation, const bool Waterlogged)
		{
			if (Rotation == 0)
				if (Waterlogged) return 4654;
				else return 4655;
			else if (Rotation == 1)
				if (Waterlogged) return 4656;
				else return 4657;
			else if (Rotation == 2)
				if (Waterlogged) return 4658;
				else return 4659;
			else if (Rotation == 3)
				if (Waterlogged) return 4660;
				else return 4661;
			else if (Rotation == 4)
				if (Waterlogged) return 4662;
				else return 4663;
			else if (Rotation == 5)
				if (Waterlogged) return 4664;
				else return 4665;
			else if (Rotation == 6)
				if (Waterlogged) return 4666;
				else return 4667;
			else if (Rotation == 7)
				if (Waterlogged) return 4668;
				else return 4669;
			else if (Rotation == 8)
				if (Waterlogged) return 4670;
				else return 4671;
			else if (Rotation == 9)
				if (Waterlogged) return 4672;
				else return 4673;
			else if (Rotation == 10)
				if (Waterlogged) return 4674;
				else return 4675;
			else if (Rotation == 11)
				if (Waterlogged) return 4676;
				else return 4677;
			else if (Rotation == 12)
				if (Waterlogged) return 4678;
				else return 4679;
			else if (Rotation == 13)
				if (Waterlogged) return 4680;
				else return 4681;
			else if (Rotation == 14)
				if (Waterlogged) return 4682;
				else return 4683;
			else
				if (Waterlogged) return 4684;
				else return 4685;
		}
		BlockState BambooSign();
		unsigned char Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BambooSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState BambooSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 12105;
				else return 12106;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 12107;
				else return 12108;
			else
				if (Waterlogged) return 12109;
				else return 12110;
		}
		BlockState BambooSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BambooStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState BambooStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11093;
						else return 11094;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11095;
						else return 11096;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11097;
						else return 11098;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11099;
						else return 11100;
					else
						if (Waterlogged) return 11101;
						else return 11102;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11103;
						else return 11104;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11105;
						else return 11106;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11107;
						else return 11108;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11109;
						else return 11110;
					else
						if (Waterlogged) return 11111;
						else return 11112;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11113;
						else return 11114;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11115;
						else return 11116;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11117;
						else return 11118;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11119;
						else return 11120;
					else
						if (Waterlogged) return 11121;
						else return 11122;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11123;
						else return 11124;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11125;
						else return 11126;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11127;
						else return 11128;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11129;
						else return 11130;
					else
						if (Waterlogged) return 11131;
						else return 11132;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11133;
						else return 11134;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11135;
						else return 11136;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11137;
						else return 11138;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11139;
						else return 11140;
					else
						if (Waterlogged) return 11141;
						else return 11142;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11143;
						else return 11144;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11145;
						else return 11146;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11147;
						else return 11148;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11149;
						else return 11150;
					else
						if (Waterlogged) return 11151;
						else return 11152;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11153;
						else return 11154;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11155;
						else return 11156;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11157;
						else return 11158;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11159;
						else return 11160;
					else
						if (Waterlogged) return 11161;
						else return 11162;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11163;
						else return 11164;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11165;
						else return 11166;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11167;
						else return 11168;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11169;
						else return 11170;
					else
						if (Waterlogged) return 11171;
						else return 11172;
		}
		BlockState BambooStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BambooTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState BambooTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6716;
							else return 6717;
						else
							if (Waterlogged) return 6718;
							else return 6719;
					else
						if (Powered)
							if (Waterlogged) return 6720;
							else return 6721;
						else
							if (Waterlogged) return 6722;
							else return 6723;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6724;
							else return 6725;
						else
							if (Waterlogged) return 6726;
							else return 6727;
					else
						if (Powered)
							if (Waterlogged) return 6728;
							else return 6729;
						else
							if (Waterlogged) return 6730;
							else return 6731;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6732;
							else return 6733;
						else
							if (Waterlogged) return 6734;
							else return 6735;
					else
						if (Powered)
							if (Waterlogged) return 6736;
							else return 6737;
						else
							if (Waterlogged) return 6738;
							else return 6739;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6740;
							else return 6741;
						else
							if (Waterlogged) return 6742;
							else return 6743;
					else
						if (Powered)
							if (Waterlogged) return 6744;
							else return 6745;
						else
							if (Waterlogged) return 6746;
							else return 6747;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6748;
							else return 6749;
						else
							if (Waterlogged) return 6750;
							else return 6751;
					else
						if (Powered)
							if (Waterlogged) return 6752;
							else return 6753;
						else
							if (Waterlogged) return 6754;
							else return 6755;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6756;
							else return 6757;
						else
							if (Waterlogged) return 6758;
							else return 6759;
					else
						if (Powered)
							if (Waterlogged) return 6760;
							else return 6761;
						else
							if (Waterlogged) return 6762;
							else return 6763;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6764;
							else return 6765;
						else
							if (Waterlogged) return 6766;
							else return 6767;
					else
						if (Powered)
							if (Waterlogged) return 6768;
							else return 6769;
						else
							if (Waterlogged) return 6770;
							else return 6771;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6772;
							else return 6773;
						else
							if (Waterlogged) return 6774;
							else return 6775;
					else
						if (Powered)
							if (Waterlogged) return 6776;
							else return 6777;
						else
							if (Waterlogged) return 6778;
							else return 6779;
		}
		BlockState BambooTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BambooWallHangingSign
	{
		constexpr BlockState BambooWallHangingSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 5794;
				else return 5795;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 5796;
				else return 5797;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 5798;
				else return 5799;
			else
				if (Waterlogged) return 5800;
				else return 5801;
		}
		BlockState BambooWallHangingSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BambooWallSign
	{
		constexpr BlockState BambooWallSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 4930;
				else return 4931;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 4932;
				else return 4933;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 4934;
				else return 4935;
			else
				if (Waterlogged) return 4936;
				else return 4937;
		}
		BlockState BambooWallSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Barrel
	{
		constexpr BlockState Barrel(const eBlockFace Facing, const bool Open)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Open) return 19463;
				else return 19464;
			else if (Facing == eBlockFace::BLOCK_FACE_XP)
				if (Open) return 19465;
				else return 19466;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Open) return 19467;
				else return 19468;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Open) return 19469;
				else return 19470;
			else if (Facing == eBlockFace::BLOCK_FACE_YP)
				if (Open) return 19471;
				else return 19472;
			else
				if (Open) return 19473;
				else return 19474;
		}
		BlockState Barrel();
		eBlockFace Facing(BlockState Block);
		bool Open(BlockState Block);
	}
	namespace Barrier
	{
		constexpr BlockState Barrier(const bool Waterlogged)
		{
			if (Waterlogged) return 11254;
			else return 11255;
		}
		BlockState Barrier();
		bool Waterlogged(BlockState Block);
	}
	namespace Basalt
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState Basalt(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 6031;
			else if (Axis == Axis::Y) return 6032;
			else return 6033;
		}
		BlockState Basalt();
		enum Axis Axis(BlockState Block);
	}
	namespace Beacon
	{
		constexpr BlockState Beacon()
		{
			return 8702;
		}
	}
	namespace Bedrock
	{
		constexpr BlockState Bedrock()
		{
			return 85;
		}
	}
	namespace BeeNest
	{
		constexpr BlockState BeeNest(const eBlockFace Facing, const unsigned char HoneyLevel)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (HoneyLevel == 0) return 20457;
				else if (HoneyLevel == 1) return 20458;
				else if (HoneyLevel == 2) return 20459;
				else if (HoneyLevel == 3) return 20460;
				else if (HoneyLevel == 4) return 20461;
				else return 20462;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (HoneyLevel == 0) return 20463;
				else if (HoneyLevel == 1) return 20464;
				else if (HoneyLevel == 2) return 20465;
				else if (HoneyLevel == 3) return 20466;
				else if (HoneyLevel == 4) return 20467;
				else return 20468;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (HoneyLevel == 0) return 20469;
				else if (HoneyLevel == 1) return 20470;
				else if (HoneyLevel == 2) return 20471;
				else if (HoneyLevel == 3) return 20472;
				else if (HoneyLevel == 4) return 20473;
				else return 20474;
			else
				if (HoneyLevel == 0) return 20475;
				else if (HoneyLevel == 1) return 20476;
				else if (HoneyLevel == 2) return 20477;
				else if (HoneyLevel == 3) return 20478;
				else if (HoneyLevel == 4) return 20479;
				else return 20480;
		}
		BlockState BeeNest();
		eBlockFace Facing(BlockState Block);
		unsigned char HoneyLevel(BlockState Block);
	}
	namespace Beehive
	{
		constexpr BlockState Beehive(const eBlockFace Facing, const unsigned char HoneyLevel)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (HoneyLevel == 0) return 20481;
				else if (HoneyLevel == 1) return 20482;
				else if (HoneyLevel == 2) return 20483;
				else if (HoneyLevel == 3) return 20484;
				else if (HoneyLevel == 4) return 20485;
				else return 20486;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (HoneyLevel == 0) return 20487;
				else if (HoneyLevel == 1) return 20488;
				else if (HoneyLevel == 2) return 20489;
				else if (HoneyLevel == 3) return 20490;
				else if (HoneyLevel == 4) return 20491;
				else return 20492;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (HoneyLevel == 0) return 20493;
				else if (HoneyLevel == 1) return 20494;
				else if (HoneyLevel == 2) return 20495;
				else if (HoneyLevel == 3) return 20496;
				else if (HoneyLevel == 4) return 20497;
				else return 20498;
			else
				if (HoneyLevel == 0) return 20499;
				else if (HoneyLevel == 1) return 20500;
				else if (HoneyLevel == 2) return 20501;
				else if (HoneyLevel == 3) return 20502;
				else if (HoneyLevel == 4) return 20503;
				else return 20504;
		}
		BlockState Beehive();
		eBlockFace Facing(BlockState Block);
		unsigned char HoneyLevel(BlockState Block);
	}
	namespace Beetroots
	{
		constexpr BlockState Beetroots(const unsigned char Age)
		{
			if (Age == 0) return 13532;
			else if (Age == 1) return 13533;
			else if (Age == 2) return 13534;
			else return 13535;
		}
		BlockState Beetroots();
		unsigned char Age(BlockState Block);
	}
	namespace Bell
	{
		enum class Attachment
		{
			Floor,
			Ceiling,
			SingleWall,
			DoubleWall,
		};
		constexpr BlockState Bell(const enum Attachment Attachment, const eBlockFace Facing, const bool Powered)
		{
			if (Attachment == Attachment::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 19526;
					else return 19527;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 19528;
					else return 19529;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 19530;
					else return 19531;
				else
					if (Powered) return 19532;
					else return 19533;
			else if (Attachment == Attachment::Ceiling)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 19534;
					else return 19535;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 19536;
					else return 19537;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 19538;
					else return 19539;
				else
					if (Powered) return 19540;
					else return 19541;
			else if (Attachment == Attachment::SingleWall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 19542;
					else return 19543;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 19544;
					else return 19545;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 19546;
					else return 19547;
				else
					if (Powered) return 19548;
					else return 19549;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 19550;
					else return 19551;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 19552;
					else return 19553;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 19554;
					else return 19555;
				else
					if (Powered) return 19556;
					else return 19557;
		}
		BlockState Bell();
		enum Attachment Attachment(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace BigDripleaf
	{
		enum class Tilt
		{
			None,
			Unstable,
			Partial,
			Full,
		};
		constexpr BlockState BigDripleaf(const eBlockFace Facing, const enum Tilt Tilt, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Tilt == Tilt::None)
					if (Waterlogged) return 25936;
					else return 25937;
				else if (Tilt == Tilt::Unstable)
					if (Waterlogged) return 25938;
					else return 25939;
				else if (Tilt == Tilt::Partial)
					if (Waterlogged) return 25940;
					else return 25941;
				else
					if (Waterlogged) return 25942;
					else return 25943;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Tilt == Tilt::None)
					if (Waterlogged) return 25944;
					else return 25945;
				else if (Tilt == Tilt::Unstable)
					if (Waterlogged) return 25946;
					else return 25947;
				else if (Tilt == Tilt::Partial)
					if (Waterlogged) return 25948;
					else return 25949;
				else
					if (Waterlogged) return 25950;
					else return 25951;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Tilt == Tilt::None)
					if (Waterlogged) return 25952;
					else return 25953;
				else if (Tilt == Tilt::Unstable)
					if (Waterlogged) return 25954;
					else return 25955;
				else if (Tilt == Tilt::Partial)
					if (Waterlogged) return 25956;
					else return 25957;
				else
					if (Waterlogged) return 25958;
					else return 25959;
			else
				if (Tilt == Tilt::None)
					if (Waterlogged) return 25960;
					else return 25961;
				else if (Tilt == Tilt::Unstable)
					if (Waterlogged) return 25962;
					else return 25963;
				else if (Tilt == Tilt::Partial)
					if (Waterlogged) return 25964;
					else return 25965;
				else
					if (Waterlogged) return 25966;
					else return 25967;
		}
		BlockState BigDripleaf();
		eBlockFace Facing(BlockState Block);
		enum Tilt Tilt(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BigDripleafStem
	{
		constexpr BlockState BigDripleafStem(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 25968;
				else return 25969;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 25970;
				else return 25971;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 25972;
				else return 25973;
			else
				if (Waterlogged) return 25974;
				else return 25975;
		}
		BlockState BigDripleafStem();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BirchButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState BirchButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9444;
					else return 9445;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9446;
					else return 9447;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9448;
					else return 9449;
				else
					if (Powered) return 9450;
					else return 9451;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9452;
					else return 9453;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9454;
					else return 9455;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9456;
					else return 9457;
				else
					if (Powered) return 9458;
					else return 9459;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9460;
					else return 9461;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9462;
					else return 9463;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9464;
					else return 9465;
				else
					if (Powered) return 9466;
					else return 9467;
		}
		BlockState BirchButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace BirchDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState BirchDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12845;
							else return 12846;
						else
							if (Powered) return 12847;
							else return 12848;
					else
						if (Open)
							if (Powered) return 12849;
							else return 12850;
						else
							if (Powered) return 12851;
							else return 12852;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12853;
							else return 12854;
						else
							if (Powered) return 12855;
							else return 12856;
					else
						if (Open)
							if (Powered) return 12857;
							else return 12858;
						else
							if (Powered) return 12859;
							else return 12860;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12861;
							else return 12862;
						else
							if (Powered) return 12863;
							else return 12864;
					else
						if (Open)
							if (Powered) return 12865;
							else return 12866;
						else
							if (Powered) return 12867;
							else return 12868;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12869;
							else return 12870;
						else
							if (Powered) return 12871;
							else return 12872;
					else
						if (Open)
							if (Powered) return 12873;
							else return 12874;
						else
							if (Powered) return 12875;
							else return 12876;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12877;
							else return 12878;
						else
							if (Powered) return 12879;
							else return 12880;
					else
						if (Open)
							if (Powered) return 12881;
							else return 12882;
						else
							if (Powered) return 12883;
							else return 12884;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12885;
							else return 12886;
						else
							if (Powered) return 12887;
							else return 12888;
					else
						if (Open)
							if (Powered) return 12889;
							else return 12890;
						else
							if (Powered) return 12891;
							else return 12892;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12893;
							else return 12894;
						else
							if (Powered) return 12895;
							else return 12896;
					else
						if (Open)
							if (Powered) return 12897;
							else return 12898;
						else
							if (Powered) return 12899;
							else return 12900;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12901;
							else return 12902;
						else
							if (Powered) return 12903;
							else return 12904;
					else
						if (Open)
							if (Powered) return 12905;
							else return 12906;
						else
							if (Powered) return 12907;
							else return 12908;
		}
		BlockState BirchDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace BirchFence
	{
		constexpr BlockState BirchFence(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 12525;
							else return 12526;
						else
							if (West) return 12527;
							else return 12528;
					else
						if (Waterlogged)
							if (West) return 12529;
							else return 12530;
						else
							if (West) return 12531;
							else return 12532;
				else
					if (South)
						if (Waterlogged)
							if (West) return 12533;
							else return 12534;
						else
							if (West) return 12535;
							else return 12536;
					else
						if (Waterlogged)
							if (West) return 12537;
							else return 12538;
						else
							if (West) return 12539;
							else return 12540;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 12541;
							else return 12542;
						else
							if (West) return 12543;
							else return 12544;
					else
						if (Waterlogged)
							if (West) return 12545;
							else return 12546;
						else
							if (West) return 12547;
							else return 12548;
				else
					if (South)
						if (Waterlogged)
							if (West) return 12549;
							else return 12550;
						else
							if (West) return 12551;
							else return 12552;
					else
						if (Waterlogged)
							if (West) return 12553;
							else return 12554;
						else
							if (West) return 12555;
							else return 12556;
		}
		BlockState BirchFence();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace BirchFenceGate
	{
		constexpr BlockState BirchFenceGate(const eBlockFace Facing, const bool InWall, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (InWall)
					if (Open)
						if (Powered) return 12237;
						else return 12238;
					else
						if (Powered) return 12239;
						else return 12240;
				else
					if (Open)
						if (Powered) return 12241;
						else return 12242;
					else
						if (Powered) return 12243;
						else return 12244;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (InWall)
					if (Open)
						if (Powered) return 12245;
						else return 12246;
					else
						if (Powered) return 12247;
						else return 12248;
				else
					if (Open)
						if (Powered) return 12249;
						else return 12250;
					else
						if (Powered) return 12251;
						else return 12252;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (InWall)
					if (Open)
						if (Powered) return 12253;
						else return 12254;
					else
						if (Powered) return 12255;
						else return 12256;
				else
					if (Open)
						if (Powered) return 12257;
						else return 12258;
					else
						if (Powered) return 12259;
						else return 12260;
			else
				if (InWall)
					if (Open)
						if (Powered) return 12261;
						else return 12262;
					else
						if (Powered) return 12263;
						else return 12264;
				else
					if (Open)
						if (Powered) return 12265;
						else return 12266;
					else
						if (Powered) return 12267;
						else return 12268;
		}
		BlockState BirchFenceGate();
		eBlockFace Facing(BlockState Block);
		bool InWall(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace BirchHangingSign
	{
		constexpr BlockState BirchHangingSign(const bool Attached, const unsigned char Rotation, const bool Waterlogged)
		{
			if (Attached)
				if (Rotation == 0)
					if (Waterlogged) return 5066;
					else return 5067;
				else if (Rotation == 1)
					if (Waterlogged) return 5068;
					else return 5069;
				else if (Rotation == 2)
					if (Waterlogged) return 5070;
					else return 5071;
				else if (Rotation == 3)
					if (Waterlogged) return 5072;
					else return 5073;
				else if (Rotation == 4)
					if (Waterlogged) return 5074;
					else return 5075;
				else if (Rotation == 5)
					if (Waterlogged) return 5076;
					else return 5077;
				else if (Rotation == 6)
					if (Waterlogged) return 5078;
					else return 5079;
				else if (Rotation == 7)
					if (Waterlogged) return 5080;
					else return 5081;
				else if (Rotation == 8)
					if (Waterlogged) return 5082;
					else return 5083;
				else if (Rotation == 9)
					if (Waterlogged) return 5084;
					else return 5085;
				else if (Rotation == 10)
					if (Waterlogged) return 5086;
					else return 5087;
				else if (Rotation == 11)
					if (Waterlogged) return 5088;
					else return 5089;
				else if (Rotation == 12)
					if (Waterlogged) return 5090;
					else return 5091;
				else if (Rotation == 13)
					if (Waterlogged) return 5092;
					else return 5093;
				else if (Rotation == 14)
					if (Waterlogged) return 5094;
					else return 5095;
				else
					if (Waterlogged) return 5096;
					else return 5097;
			else
				if (Rotation == 0)
					if (Waterlogged) return 5098;
					else return 5099;
				else if (Rotation == 1)
					if (Waterlogged) return 5100;
					else return 5101;
				else if (Rotation == 2)
					if (Waterlogged) return 5102;
					else return 5103;
				else if (Rotation == 3)
					if (Waterlogged) return 5104;
					else return 5105;
				else if (Rotation == 4)
					if (Waterlogged) return 5106;
					else return 5107;
				else if (Rotation == 5)
					if (Waterlogged) return 5108;
					else return 5109;
				else if (Rotation == 6)
					if (Waterlogged) return 5110;
					else return 5111;
				else if (Rotation == 7)
					if (Waterlogged) return 5112;
					else return 5113;
				else if (Rotation == 8)
					if (Waterlogged) return 5114;
					else return 5115;
				else if (Rotation == 9)
					if (Waterlogged) return 5116;
					else return 5117;
				else if (Rotation == 10)
					if (Waterlogged) return 5118;
					else return 5119;
				else if (Rotation == 11)
					if (Waterlogged) return 5120;
					else return 5121;
				else if (Rotation == 12)
					if (Waterlogged) return 5122;
					else return 5123;
				else if (Rotation == 13)
					if (Waterlogged) return 5124;
					else return 5125;
				else if (Rotation == 14)
					if (Waterlogged) return 5126;
					else return 5127;
				else
					if (Waterlogged) return 5128;
					else return 5129;
		}
		BlockState BirchHangingSign();
		bool Attached(BlockState Block);
		unsigned char Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BirchLeaves
	{
		constexpr BlockState BirchLeaves(const unsigned char Distance, const bool Persistent, const bool Waterlogged)
		{
			if (Distance == 1)
				if (Persistent)
					if (Waterlogged) return 308;
					else return 309;
				else
					if (Waterlogged) return 310;
					else return 311;
			else if (Distance == 2)
				if (Persistent)
					if (Waterlogged) return 312;
					else return 313;
				else
					if (Waterlogged) return 314;
					else return 315;
			else if (Distance == 3)
				if (Persistent)
					if (Waterlogged) return 316;
					else return 317;
				else
					if (Waterlogged) return 318;
					else return 319;
			else if (Distance == 4)
				if (Persistent)
					if (Waterlogged) return 320;
					else return 321;
				else
					if (Waterlogged) return 322;
					else return 323;
			else if (Distance == 5)
				if (Persistent)
					if (Waterlogged) return 324;
					else return 325;
				else
					if (Waterlogged) return 326;
					else return 327;
			else if (Distance == 6)
				if (Persistent)
					if (Waterlogged) return 328;
					else return 329;
				else
					if (Waterlogged) return 330;
					else return 331;
			else
				if (Persistent)
					if (Waterlogged) return 332;
					else return 333;
				else
					if (Waterlogged) return 334;
					else return 335;
		}
		BlockState BirchLeaves();
		unsigned char Distance(BlockState Block);
		bool Persistent(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BirchLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState BirchLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 142;
			else if (Axis == Axis::Y) return 143;
			else return 144;
		}
		BlockState BirchLog();
		enum Axis Axis(BlockState Block);
	}
	namespace BirchPlanks
	{
		constexpr BlockState BirchPlanks()
		{
			return 17;
		}
	}
	namespace BirchPressurePlate
	{
		constexpr BlockState BirchPressurePlate(const bool Powered)
		{
			if (Powered) return 5896;
			else return 5897;
		}
		BlockState BirchPressurePlate();
		bool Powered(BlockState Block);
	}
	namespace BirchSapling
	{
		constexpr BlockState BirchSapling(const unsigned char Stage)
		{
			if (Stage == 0) return 33;
			else return 34;
		}
		BlockState BirchSapling();
		unsigned char Stage(BlockState Block);
	}
	namespace BirchSign
	{
		constexpr BlockState BirchSign(const unsigned char Rotation, const bool Waterlogged)
		{
			if (Rotation == 0)
				if (Waterlogged) return 4430;
				else return 4431;
			else if (Rotation == 1)
				if (Waterlogged) return 4432;
				else return 4433;
			else if (Rotation == 2)
				if (Waterlogged) return 4434;
				else return 4435;
			else if (Rotation == 3)
				if (Waterlogged) return 4436;
				else return 4437;
			else if (Rotation == 4)
				if (Waterlogged) return 4438;
				else return 4439;
			else if (Rotation == 5)
				if (Waterlogged) return 4440;
				else return 4441;
			else if (Rotation == 6)
				if (Waterlogged) return 4442;
				else return 4443;
			else if (Rotation == 7)
				if (Waterlogged) return 4444;
				else return 4445;
			else if (Rotation == 8)
				if (Waterlogged) return 4446;
				else return 4447;
			else if (Rotation == 9)
				if (Waterlogged) return 4448;
				else return 4449;
			else if (Rotation == 10)
				if (Waterlogged) return 4450;
				else return 4451;
			else if (Rotation == 11)
				if (Waterlogged) return 4452;
				else return 4453;
			else if (Rotation == 12)
				if (Waterlogged) return 4454;
				else return 4455;
			else if (Rotation == 13)
				if (Waterlogged) return 4456;
				else return 4457;
			else if (Rotation == 14)
				if (Waterlogged) return 4458;
				else return 4459;
			else
				if (Waterlogged) return 4460;
				else return 4461;
		}
		BlockState BirchSign();
		unsigned char Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BirchSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState BirchSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 12063;
				else return 12064;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 12065;
				else return 12066;
			else
				if (Waterlogged) return 12067;
				else return 12068;
		}
		BlockState BirchSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BirchStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState BirchStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8530;
						else return 8531;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8532;
						else return 8533;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8534;
						else return 8535;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8536;
						else return 8537;
					else
						if (Waterlogged) return 8538;
						else return 8539;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8540;
						else return 8541;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8542;
						else return 8543;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8544;
						else return 8545;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8546;
						else return 8547;
					else
						if (Waterlogged) return 8548;
						else return 8549;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8550;
						else return 8551;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8552;
						else return 8553;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8554;
						else return 8555;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8556;
						else return 8557;
					else
						if (Waterlogged) return 8558;
						else return 8559;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8560;
						else return 8561;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8562;
						else return 8563;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8564;
						else return 8565;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8566;
						else return 8567;
					else
						if (Waterlogged) return 8568;
						else return 8569;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8570;
						else return 8571;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8572;
						else return 8573;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8574;
						else return 8575;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8576;
						else return 8577;
					else
						if (Waterlogged) return 8578;
						else return 8579;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8580;
						else return 8581;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8582;
						else return 8583;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8584;
						else return 8585;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8586;
						else return 8587;
					else
						if (Waterlogged) return 8588;
						else return 8589;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8590;
						else return 8591;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8592;
						else return 8593;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8594;
						else return 8595;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8596;
						else return 8597;
					else
						if (Waterlogged) return 8598;
						else return 8599;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8600;
						else return 8601;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8602;
						else return 8603;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8604;
						else return 8605;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8606;
						else return 8607;
					else
						if (Waterlogged) return 8608;
						else return 8609;
		}
		BlockState BirchStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BirchTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState BirchTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6268;
							else return 6269;
						else
							if (Waterlogged) return 6270;
							else return 6271;
					else
						if (Powered)
							if (Waterlogged) return 6272;
							else return 6273;
						else
							if (Waterlogged) return 6274;
							else return 6275;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6276;
							else return 6277;
						else
							if (Waterlogged) return 6278;
							else return 6279;
					else
						if (Powered)
							if (Waterlogged) return 6280;
							else return 6281;
						else
							if (Waterlogged) return 6282;
							else return 6283;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6284;
							else return 6285;
						else
							if (Waterlogged) return 6286;
							else return 6287;
					else
						if (Powered)
							if (Waterlogged) return 6288;
							else return 6289;
						else
							if (Waterlogged) return 6290;
							else return 6291;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6292;
							else return 6293;
						else
							if (Waterlogged) return 6294;
							else return 6295;
					else
						if (Powered)
							if (Waterlogged) return 6296;
							else return 6297;
						else
							if (Waterlogged) return 6298;
							else return 6299;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6300;
							else return 6301;
						else
							if (Waterlogged) return 6302;
							else return 6303;
					else
						if (Powered)
							if (Waterlogged) return 6304;
							else return 6305;
						else
							if (Waterlogged) return 6306;
							else return 6307;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6308;
							else return 6309;
						else
							if (Waterlogged) return 6310;
							else return 6311;
					else
						if (Powered)
							if (Waterlogged) return 6312;
							else return 6313;
						else
							if (Waterlogged) return 6314;
							else return 6315;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6316;
							else return 6317;
						else
							if (Waterlogged) return 6318;
							else return 6319;
					else
						if (Powered)
							if (Waterlogged) return 6320;
							else return 6321;
						else
							if (Waterlogged) return 6322;
							else return 6323;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6324;
							else return 6325;
						else
							if (Waterlogged) return 6326;
							else return 6327;
					else
						if (Powered)
							if (Waterlogged) return 6328;
							else return 6329;
						else
							if (Waterlogged) return 6330;
							else return 6331;
		}
		BlockState BirchTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BirchWallHangingSign
	{
		constexpr BlockState BirchWallHangingSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 5722;
				else return 5723;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 5724;
				else return 5725;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 5726;
				else return 5727;
			else
				if (Waterlogged) return 5728;
				else return 5729;
		}
		BlockState BirchWallHangingSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BirchWallSign
	{
		constexpr BlockState BirchWallSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 4874;
				else return 4875;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 4876;
				else return 4877;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 4878;
				else return 4879;
			else
				if (Waterlogged) return 4880;
				else return 4881;
		}
		BlockState BirchWallSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BirchWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState BirchWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 207;
			else if (Axis == Axis::Y) return 208;
			else return 209;
		}
		BlockState BirchWood();
		enum Axis Axis(BlockState Block);
	}
	namespace BlackBanner
	{
		constexpr BlockState BlackBanner(const unsigned char Rotation)
		{
			if (Rotation == 0) return 11888;
			else if (Rotation == 1) return 11889;
			else if (Rotation == 2) return 11890;
			else if (Rotation == 3) return 11891;
			else if (Rotation == 4) return 11892;
			else if (Rotation == 5) return 11893;
			else if (Rotation == 6) return 11894;
			else if (Rotation == 7) return 11895;
			else if (Rotation == 8) return 11896;
			else if (Rotation == 9) return 11897;
			else if (Rotation == 10) return 11898;
			else if (Rotation == 11) return 11899;
			else if (Rotation == 12) return 11900;
			else if (Rotation == 13) return 11901;
			else if (Rotation == 14) return 11902;
			else return 11903;
		}
		BlockState BlackBanner();
		unsigned char Rotation(BlockState Block);
	}
	namespace BlackBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState BlackBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1971;
					else return 1972;
				else
					if (Part == Part::Head) return 1973;
					else return 1974;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1975;
					else return 1976;
				else
					if (Part == Part::Head) return 1977;
					else return 1978;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1979;
					else return 1980;
				else
					if (Part == Part::Head) return 1981;
					else return 1982;
			else
				if (Occupied)
					if (Part == Part::Head) return 1983;
					else return 1984;
				else
					if (Part == Part::Head) return 1985;
					else return 1986;
		}
		BlockState BlackBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace BlackCandle
	{
		constexpr BlockState BlackCandle(const unsigned char Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 22041;
					else return 22042;
				else
					if (Waterlogged) return 22043;
					else return 22044;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 22045;
					else return 22046;
				else
					if (Waterlogged) return 22047;
					else return 22048;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 22049;
					else return 22050;
				else
					if (Waterlogged) return 22051;
					else return 22052;
			else
				if (Lit)
					if (Waterlogged) return 22053;
					else return 22054;
				else
					if (Waterlogged) return 22055;
					else return 22056;
		}
		BlockState BlackCandle();
		unsigned char Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BlackCandleCake
	{
		constexpr BlockState BlackCandleCake(const bool Lit)
		{
			if (Lit) return 22089;
			else return 22090;
		}
		BlockState BlackCandleCake();
		bool Lit(BlockState Block);
	}
	namespace BlackCarpet
	{
		constexpr BlockState BlackCarpet()
		{
			return 11632;
		}
	}
	namespace BlackConcrete
	{
		constexpr BlockState BlackConcrete()
		{
			return 13766;
		}
	}
	namespace BlackConcretePowder
	{
		constexpr BlockState BlackConcretePowder()
		{
			return 13782;
		}
	}
	namespace BlackGlazedTerracotta
	{
		constexpr BlockState BlackGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13747;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13748;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13749;
			else return 13750;
		}
		BlockState BlackGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace BlackShulkerBox
	{
		constexpr BlockState BlackShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13681;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 13682;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13683;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13684;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 13685;
			else return 13686;
		}
		BlockState BlackShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace BlackStainedGlass
	{
		constexpr BlockState BlackStainedGlass()
		{
			return 6139;
		}
	}
	namespace BlackStainedGlassPane
	{
		constexpr BlockState BlackStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10661;
							else return 10662;
						else
							if (West) return 10663;
							else return 10664;
					else
						if (Waterlogged)
							if (West) return 10665;
							else return 10666;
						else
							if (West) return 10667;
							else return 10668;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10669;
							else return 10670;
						else
							if (West) return 10671;
							else return 10672;
					else
						if (Waterlogged)
							if (West) return 10673;
							else return 10674;
						else
							if (West) return 10675;
							else return 10676;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10677;
							else return 10678;
						else
							if (West) return 10679;
							else return 10680;
					else
						if (Waterlogged)
							if (West) return 10681;
							else return 10682;
						else
							if (West) return 10683;
							else return 10684;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10685;
							else return 10686;
						else
							if (West) return 10687;
							else return 10688;
					else
						if (Waterlogged)
							if (West) return 10689;
							else return 10690;
						else
							if (West) return 10691;
							else return 10692;
		}
		BlockState BlackStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace BlackTerracotta
	{
		constexpr BlockState BlackTerracotta()
		{
			return 10180;
		}
	}
	namespace BlackWallBanner
	{
		constexpr BlockState BlackWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11964;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11965;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11966;
			else return 11967;
		}
		BlockState BlackWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace BlackWool
	{
		constexpr BlockState BlackWool()
		{
			return 2108;
		}
	}
	namespace Blackstone
	{
		constexpr BlockState Blackstone()
		{
			return 20520;
		}
	}
	namespace BlackstoneSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState BlackstoneSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 20925;
				else return 20926;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 20927;
				else return 20928;
			else
				if (Waterlogged) return 20929;
				else return 20930;
		}
		BlockState BlackstoneSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BlackstoneStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState BlackstoneStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20521;
						else return 20522;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20523;
						else return 20524;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20525;
						else return 20526;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20527;
						else return 20528;
					else
						if (Waterlogged) return 20529;
						else return 20530;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20531;
						else return 20532;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20533;
						else return 20534;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20535;
						else return 20536;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20537;
						else return 20538;
					else
						if (Waterlogged) return 20539;
						else return 20540;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20541;
						else return 20542;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20543;
						else return 20544;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20545;
						else return 20546;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20547;
						else return 20548;
					else
						if (Waterlogged) return 20549;
						else return 20550;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20551;
						else return 20552;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20553;
						else return 20554;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20555;
						else return 20556;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20557;
						else return 20558;
					else
						if (Waterlogged) return 20559;
						else return 20560;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20561;
						else return 20562;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20563;
						else return 20564;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20565;
						else return 20566;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20567;
						else return 20568;
					else
						if (Waterlogged) return 20569;
						else return 20570;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20571;
						else return 20572;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20573;
						else return 20574;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20575;
						else return 20576;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20577;
						else return 20578;
					else
						if (Waterlogged) return 20579;
						else return 20580;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20581;
						else return 20582;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20583;
						else return 20584;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20585;
						else return 20586;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20587;
						else return 20588;
					else
						if (Waterlogged) return 20589;
						else return 20590;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20591;
						else return 20592;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20593;
						else return 20594;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20595;
						else return 20596;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20597;
						else return 20598;
					else
						if (Waterlogged) return 20599;
						else return 20600;
		}
		BlockState BlackstoneStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BlackstoneWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState BlackstoneWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20601;
								else if (West == West::Low) return 20602;
								else return 20603;
							else
								if (West == West::None) return 20604;
								else if (West == West::Low) return 20605;
								else return 20606;
						else
							if (Waterlogged)
								if (West == West::None) return 20607;
								else if (West == West::Low) return 20608;
								else return 20609;
							else
								if (West == West::None) return 20610;
								else if (West == West::Low) return 20611;
								else return 20612;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20613;
								else if (West == West::Low) return 20614;
								else return 20615;
							else
								if (West == West::None) return 20616;
								else if (West == West::Low) return 20617;
								else return 20618;
						else
							if (Waterlogged)
								if (West == West::None) return 20619;
								else if (West == West::Low) return 20620;
								else return 20621;
							else
								if (West == West::None) return 20622;
								else if (West == West::Low) return 20623;
								else return 20624;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20625;
								else if (West == West::Low) return 20626;
								else return 20627;
							else
								if (West == West::None) return 20628;
								else if (West == West::Low) return 20629;
								else return 20630;
						else
							if (Waterlogged)
								if (West == West::None) return 20631;
								else if (West == West::Low) return 20632;
								else return 20633;
							else
								if (West == West::None) return 20634;
								else if (West == West::Low) return 20635;
								else return 20636;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20637;
								else if (West == West::Low) return 20638;
								else return 20639;
							else
								if (West == West::None) return 20640;
								else if (West == West::Low) return 20641;
								else return 20642;
						else
							if (Waterlogged)
								if (West == West::None) return 20643;
								else if (West == West::Low) return 20644;
								else return 20645;
							else
								if (West == West::None) return 20646;
								else if (West == West::Low) return 20647;
								else return 20648;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20649;
								else if (West == West::Low) return 20650;
								else return 20651;
							else
								if (West == West::None) return 20652;
								else if (West == West::Low) return 20653;
								else return 20654;
						else
							if (Waterlogged)
								if (West == West::None) return 20655;
								else if (West == West::Low) return 20656;
								else return 20657;
							else
								if (West == West::None) return 20658;
								else if (West == West::Low) return 20659;
								else return 20660;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20661;
								else if (West == West::Low) return 20662;
								else return 20663;
							else
								if (West == West::None) return 20664;
								else if (West == West::Low) return 20665;
								else return 20666;
						else
							if (Waterlogged)
								if (West == West::None) return 20667;
								else if (West == West::Low) return 20668;
								else return 20669;
							else
								if (West == West::None) return 20670;
								else if (West == West::Low) return 20671;
								else return 20672;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20673;
								else if (West == West::Low) return 20674;
								else return 20675;
							else
								if (West == West::None) return 20676;
								else if (West == West::Low) return 20677;
								else return 20678;
						else
							if (Waterlogged)
								if (West == West::None) return 20679;
								else if (West == West::Low) return 20680;
								else return 20681;
							else
								if (West == West::None) return 20682;
								else if (West == West::Low) return 20683;
								else return 20684;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20685;
								else if (West == West::Low) return 20686;
								else return 20687;
							else
								if (West == West::None) return 20688;
								else if (West == West::Low) return 20689;
								else return 20690;
						else
							if (Waterlogged)
								if (West == West::None) return 20691;
								else if (West == West::Low) return 20692;
								else return 20693;
							else
								if (West == West::None) return 20694;
								else if (West == West::Low) return 20695;
								else return 20696;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20697;
								else if (West == West::Low) return 20698;
								else return 20699;
							else
								if (West == West::None) return 20700;
								else if (West == West::Low) return 20701;
								else return 20702;
						else
							if (Waterlogged)
								if (West == West::None) return 20703;
								else if (West == West::Low) return 20704;
								else return 20705;
							else
								if (West == West::None) return 20706;
								else if (West == West::Low) return 20707;
								else return 20708;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20709;
								else if (West == West::Low) return 20710;
								else return 20711;
							else
								if (West == West::None) return 20712;
								else if (West == West::Low) return 20713;
								else return 20714;
						else
							if (Waterlogged)
								if (West == West::None) return 20715;
								else if (West == West::Low) return 20716;
								else return 20717;
							else
								if (West == West::None) return 20718;
								else if (West == West::Low) return 20719;
								else return 20720;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20721;
								else if (West == West::Low) return 20722;
								else return 20723;
							else
								if (West == West::None) return 20724;
								else if (West == West::Low) return 20725;
								else return 20726;
						else
							if (Waterlogged)
								if (West == West::None) return 20727;
								else if (West == West::Low) return 20728;
								else return 20729;
							else
								if (West == West::None) return 20730;
								else if (West == West::Low) return 20731;
								else return 20732;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20733;
								else if (West == West::Low) return 20734;
								else return 20735;
							else
								if (West == West::None) return 20736;
								else if (West == West::Low) return 20737;
								else return 20738;
						else
							if (Waterlogged)
								if (West == West::None) return 20739;
								else if (West == West::Low) return 20740;
								else return 20741;
							else
								if (West == West::None) return 20742;
								else if (West == West::Low) return 20743;
								else return 20744;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20745;
								else if (West == West::Low) return 20746;
								else return 20747;
							else
								if (West == West::None) return 20748;
								else if (West == West::Low) return 20749;
								else return 20750;
						else
							if (Waterlogged)
								if (West == West::None) return 20751;
								else if (West == West::Low) return 20752;
								else return 20753;
							else
								if (West == West::None) return 20754;
								else if (West == West::Low) return 20755;
								else return 20756;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20757;
								else if (West == West::Low) return 20758;
								else return 20759;
							else
								if (West == West::None) return 20760;
								else if (West == West::Low) return 20761;
								else return 20762;
						else
							if (Waterlogged)
								if (West == West::None) return 20763;
								else if (West == West::Low) return 20764;
								else return 20765;
							else
								if (West == West::None) return 20766;
								else if (West == West::Low) return 20767;
								else return 20768;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20769;
								else if (West == West::Low) return 20770;
								else return 20771;
							else
								if (West == West::None) return 20772;
								else if (West == West::Low) return 20773;
								else return 20774;
						else
							if (Waterlogged)
								if (West == West::None) return 20775;
								else if (West == West::Low) return 20776;
								else return 20777;
							else
								if (West == West::None) return 20778;
								else if (West == West::Low) return 20779;
								else return 20780;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20781;
								else if (West == West::Low) return 20782;
								else return 20783;
							else
								if (West == West::None) return 20784;
								else if (West == West::Low) return 20785;
								else return 20786;
						else
							if (Waterlogged)
								if (West == West::None) return 20787;
								else if (West == West::Low) return 20788;
								else return 20789;
							else
								if (West == West::None) return 20790;
								else if (West == West::Low) return 20791;
								else return 20792;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20793;
								else if (West == West::Low) return 20794;
								else return 20795;
							else
								if (West == West::None) return 20796;
								else if (West == West::Low) return 20797;
								else return 20798;
						else
							if (Waterlogged)
								if (West == West::None) return 20799;
								else if (West == West::Low) return 20800;
								else return 20801;
							else
								if (West == West::None) return 20802;
								else if (West == West::Low) return 20803;
								else return 20804;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20805;
								else if (West == West::Low) return 20806;
								else return 20807;
							else
								if (West == West::None) return 20808;
								else if (West == West::Low) return 20809;
								else return 20810;
						else
							if (Waterlogged)
								if (West == West::None) return 20811;
								else if (West == West::Low) return 20812;
								else return 20813;
							else
								if (West == West::None) return 20814;
								else if (West == West::Low) return 20815;
								else return 20816;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20817;
								else if (West == West::Low) return 20818;
								else return 20819;
							else
								if (West == West::None) return 20820;
								else if (West == West::Low) return 20821;
								else return 20822;
						else
							if (Waterlogged)
								if (West == West::None) return 20823;
								else if (West == West::Low) return 20824;
								else return 20825;
							else
								if (West == West::None) return 20826;
								else if (West == West::Low) return 20827;
								else return 20828;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20829;
								else if (West == West::Low) return 20830;
								else return 20831;
							else
								if (West == West::None) return 20832;
								else if (West == West::Low) return 20833;
								else return 20834;
						else
							if (Waterlogged)
								if (West == West::None) return 20835;
								else if (West == West::Low) return 20836;
								else return 20837;
							else
								if (West == West::None) return 20838;
								else if (West == West::Low) return 20839;
								else return 20840;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20841;
								else if (West == West::Low) return 20842;
								else return 20843;
							else
								if (West == West::None) return 20844;
								else if (West == West::Low) return 20845;
								else return 20846;
						else
							if (Waterlogged)
								if (West == West::None) return 20847;
								else if (West == West::Low) return 20848;
								else return 20849;
							else
								if (West == West::None) return 20850;
								else if (West == West::Low) return 20851;
								else return 20852;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20853;
								else if (West == West::Low) return 20854;
								else return 20855;
							else
								if (West == West::None) return 20856;
								else if (West == West::Low) return 20857;
								else return 20858;
						else
							if (Waterlogged)
								if (West == West::None) return 20859;
								else if (West == West::Low) return 20860;
								else return 20861;
							else
								if (West == West::None) return 20862;
								else if (West == West::Low) return 20863;
								else return 20864;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20865;
								else if (West == West::Low) return 20866;
								else return 20867;
							else
								if (West == West::None) return 20868;
								else if (West == West::Low) return 20869;
								else return 20870;
						else
							if (Waterlogged)
								if (West == West::None) return 20871;
								else if (West == West::Low) return 20872;
								else return 20873;
							else
								if (West == West::None) return 20874;
								else if (West == West::Low) return 20875;
								else return 20876;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20877;
								else if (West == West::Low) return 20878;
								else return 20879;
							else
								if (West == West::None) return 20880;
								else if (West == West::Low) return 20881;
								else return 20882;
						else
							if (Waterlogged)
								if (West == West::None) return 20883;
								else if (West == West::Low) return 20884;
								else return 20885;
							else
								if (West == West::None) return 20886;
								else if (West == West::Low) return 20887;
								else return 20888;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20889;
								else if (West == West::Low) return 20890;
								else return 20891;
							else
								if (West == West::None) return 20892;
								else if (West == West::Low) return 20893;
								else return 20894;
						else
							if (Waterlogged)
								if (West == West::None) return 20895;
								else if (West == West::Low) return 20896;
								else return 20897;
							else
								if (West == West::None) return 20898;
								else if (West == West::Low) return 20899;
								else return 20900;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20901;
								else if (West == West::Low) return 20902;
								else return 20903;
							else
								if (West == West::None) return 20904;
								else if (West == West::Low) return 20905;
								else return 20906;
						else
							if (Waterlogged)
								if (West == West::None) return 20907;
								else if (West == West::Low) return 20908;
								else return 20909;
							else
								if (West == West::None) return 20910;
								else if (West == West::Low) return 20911;
								else return 20912;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20913;
								else if (West == West::Low) return 20914;
								else return 20915;
							else
								if (West == West::None) return 20916;
								else if (West == West::Low) return 20917;
								else return 20918;
						else
							if (Waterlogged)
								if (West == West::None) return 20919;
								else if (West == West::Low) return 20920;
								else return 20921;
							else
								if (West == West::None) return 20922;
								else if (West == West::Low) return 20923;
								else return 20924;
		}
		BlockState BlackstoneWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace BlastFurnace
	{
		constexpr BlockState BlastFurnace(const eBlockFace Facing, const bool Lit)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Lit) return 19483;
				else return 19484;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Lit) return 19485;
				else return 19486;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Lit) return 19487;
				else return 19488;
			else
				if (Lit) return 19489;
				else return 19490;
		}
		BlockState BlastFurnace();
		eBlockFace Facing(BlockState Block);
		bool Lit(BlockState Block);
	}
	namespace BlueBanner
	{
		constexpr BlockState BlueBanner(const unsigned char Rotation)
		{
			if (Rotation == 0) return 11824;
			else if (Rotation == 1) return 11825;
			else if (Rotation == 2) return 11826;
			else if (Rotation == 3) return 11827;
			else if (Rotation == 4) return 11828;
			else if (Rotation == 5) return 11829;
			else if (Rotation == 6) return 11830;
			else if (Rotation == 7) return 11831;
			else if (Rotation == 8) return 11832;
			else if (Rotation == 9) return 11833;
			else if (Rotation == 10) return 11834;
			else if (Rotation == 11) return 11835;
			else if (Rotation == 12) return 11836;
			else if (Rotation == 13) return 11837;
			else if (Rotation == 14) return 11838;
			else return 11839;
		}
		BlockState BlueBanner();
		unsigned char Rotation(BlockState Block);
	}
	namespace BlueBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState BlueBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1907;
					else return 1908;
				else
					if (Part == Part::Head) return 1909;
					else return 1910;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1911;
					else return 1912;
				else
					if (Part == Part::Head) return 1913;
					else return 1914;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1915;
					else return 1916;
				else
					if (Part == Part::Head) return 1917;
					else return 1918;
			else
				if (Occupied)
					if (Part == Part::Head) return 1919;
					else return 1920;
				else
					if (Part == Part::Head) return 1921;
					else return 1922;
		}
		BlockState BlueBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace BlueCandle
	{
		constexpr BlockState BlueCandle(const unsigned char Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 21977;
					else return 21978;
				else
					if (Waterlogged) return 21979;
					else return 21980;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 21981;
					else return 21982;
				else
					if (Waterlogged) return 21983;
					else return 21984;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 21985;
					else return 21986;
				else
					if (Waterlogged) return 21987;
					else return 21988;
			else
				if (Lit)
					if (Waterlogged) return 21989;
					else return 21990;
				else
					if (Waterlogged) return 21991;
					else return 21992;
		}
		BlockState BlueCandle();
		unsigned char Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BlueCandleCake
	{
		constexpr BlockState BlueCandleCake(const bool Lit)
		{
			if (Lit) return 22081;
			else return 22082;
		}
		BlockState BlueCandleCake();
		bool Lit(BlockState Block);
	}
	namespace BlueCarpet
	{
		constexpr BlockState BlueCarpet()
		{
			return 11628;
		}
	}
	namespace BlueConcrete
	{
		constexpr BlockState BlueConcrete()
		{
			return 13762;
		}
	}
	namespace BlueConcretePowder
	{
		constexpr BlockState BlueConcretePowder()
		{
			return 13778;
		}
	}
	namespace BlueGlazedTerracotta
	{
		constexpr BlockState BlueGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13731;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13732;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13733;
			else return 13734;
		}
		BlockState BlueGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace BlueIce
	{
		constexpr BlockState BlueIce()
		{
			return 13996;
		}
	}
	namespace BlueOrchid
	{
		constexpr BlockState BlueOrchid()
		{
			return 2124;
		}
	}
	namespace BlueShulkerBox
	{
		constexpr BlockState BlueShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13657;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 13658;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13659;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13660;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 13661;
			else return 13662;
		}
		BlockState BlueShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace BlueStainedGlass
	{
		constexpr BlockState BlueStainedGlass()
		{
			return 6135;
		}
	}
	namespace BlueStainedGlassPane
	{
		constexpr BlockState BlueStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10533;
							else return 10534;
						else
							if (West) return 10535;
							else return 10536;
					else
						if (Waterlogged)
							if (West) return 10537;
							else return 10538;
						else
							if (West) return 10539;
							else return 10540;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10541;
							else return 10542;
						else
							if (West) return 10543;
							else return 10544;
					else
						if (Waterlogged)
							if (West) return 10545;
							else return 10546;
						else
							if (West) return 10547;
							else return 10548;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10549;
							else return 10550;
						else
							if (West) return 10551;
							else return 10552;
					else
						if (Waterlogged)
							if (West) return 10553;
							else return 10554;
						else
							if (West) return 10555;
							else return 10556;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10557;
							else return 10558;
						else
							if (West) return 10559;
							else return 10560;
					else
						if (Waterlogged)
							if (West) return 10561;
							else return 10562;
						else
							if (West) return 10563;
							else return 10564;
		}
		BlockState BlueStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace BlueTerracotta
	{
		constexpr BlockState BlueTerracotta()
		{
			return 10176;
		}
	}
	namespace BlueWallBanner
	{
		constexpr BlockState BlueWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11948;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11949;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11950;
			else return 11951;
		}
		BlockState BlueWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace BlueWool
	{
		constexpr BlockState BlueWool()
		{
			return 2104;
		}
	}
	namespace BoneBlock
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState BoneBlock(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 13569;
			else if (Axis == Axis::Y) return 13570;
			else return 13571;
		}
		BlockState BoneBlock();
		enum Axis Axis(BlockState Block);
	}
	namespace Bookshelf
	{
		constexpr BlockState Bookshelf()
		{
			return 2142;
		}
	}
	namespace BrainCoral
	{
		constexpr BlockState BrainCoral(const bool Waterlogged)
		{
			if (Waterlogged) return 13880;
			else return 13881;
		}
		BlockState BrainCoral();
		bool Waterlogged(BlockState Block);
	}
	namespace BrainCoralBlock
	{
		constexpr BlockState BrainCoralBlock()
		{
			return 13864;
		}
	}
	namespace BrainCoralFan
	{
		constexpr BlockState BrainCoralFan(const bool Waterlogged)
		{
			if (Waterlogged) return 13900;
			else return 13901;
		}
		BlockState BrainCoralFan();
		bool Waterlogged(BlockState Block);
	}
	namespace BrainCoralWallFan
	{
		constexpr BlockState BrainCoralWallFan(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 13956;
				else return 13957;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 13958;
				else return 13959;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 13960;
				else return 13961;
			else
				if (Waterlogged) return 13962;
				else return 13963;
		}
		BlockState BrainCoralWallFan();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BrewingStand
	{
		constexpr BlockState BrewingStand(const bool HasBottle0, const bool HasBottle1, const bool HasBottle2)
		{
			if (HasBottle0)
				if (HasBottle1)
					if (HasBottle2) return 8174;
					else return 8175;
				else
					if (HasBottle2) return 8176;
					else return 8177;
			else
				if (HasBottle1)
					if (HasBottle2) return 8178;
					else return 8179;
				else
					if (HasBottle2) return 8180;
					else return 8181;
		}
		BlockState BrewingStand();
		bool HasBottle0(BlockState Block);
		bool HasBottle1(BlockState Block);
		bool HasBottle2(BlockState Block);
	}
	namespace BrickSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState BrickSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 12153;
				else return 12154;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 12155;
				else return 12156;
			else
				if (Waterlogged) return 12157;
				else return 12158;
		}
		BlockState BrickSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BrickStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState BrickStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7400;
						else return 7401;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7402;
						else return 7403;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7404;
						else return 7405;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7406;
						else return 7407;
					else
						if (Waterlogged) return 7408;
						else return 7409;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7410;
						else return 7411;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7412;
						else return 7413;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7414;
						else return 7415;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7416;
						else return 7417;
					else
						if (Waterlogged) return 7418;
						else return 7419;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7420;
						else return 7421;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7422;
						else return 7423;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7424;
						else return 7425;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7426;
						else return 7427;
					else
						if (Waterlogged) return 7428;
						else return 7429;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7430;
						else return 7431;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7432;
						else return 7433;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7434;
						else return 7435;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7436;
						else return 7437;
					else
						if (Waterlogged) return 7438;
						else return 7439;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7440;
						else return 7441;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7442;
						else return 7443;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7444;
						else return 7445;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7446;
						else return 7447;
					else
						if (Waterlogged) return 7448;
						else return 7449;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7450;
						else return 7451;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7452;
						else return 7453;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7454;
						else return 7455;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7456;
						else return 7457;
					else
						if (Waterlogged) return 7458;
						else return 7459;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7460;
						else return 7461;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7462;
						else return 7463;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7464;
						else return 7465;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7466;
						else return 7467;
					else
						if (Waterlogged) return 7468;
						else return 7469;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7470;
						else return 7471;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7472;
						else return 7473;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7474;
						else return 7475;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7476;
						else return 7477;
					else
						if (Waterlogged) return 7478;
						else return 7479;
		}
		BlockState BrickStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BrickWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState BrickWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15215;
								else if (West == West::Low) return 15216;
								else return 15217;
							else
								if (West == West::None) return 15218;
								else if (West == West::Low) return 15219;
								else return 15220;
						else
							if (Waterlogged)
								if (West == West::None) return 15221;
								else if (West == West::Low) return 15222;
								else return 15223;
							else
								if (West == West::None) return 15224;
								else if (West == West::Low) return 15225;
								else return 15226;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15227;
								else if (West == West::Low) return 15228;
								else return 15229;
							else
								if (West == West::None) return 15230;
								else if (West == West::Low) return 15231;
								else return 15232;
						else
							if (Waterlogged)
								if (West == West::None) return 15233;
								else if (West == West::Low) return 15234;
								else return 15235;
							else
								if (West == West::None) return 15236;
								else if (West == West::Low) return 15237;
								else return 15238;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15239;
								else if (West == West::Low) return 15240;
								else return 15241;
							else
								if (West == West::None) return 15242;
								else if (West == West::Low) return 15243;
								else return 15244;
						else
							if (Waterlogged)
								if (West == West::None) return 15245;
								else if (West == West::Low) return 15246;
								else return 15247;
							else
								if (West == West::None) return 15248;
								else if (West == West::Low) return 15249;
								else return 15250;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15251;
								else if (West == West::Low) return 15252;
								else return 15253;
							else
								if (West == West::None) return 15254;
								else if (West == West::Low) return 15255;
								else return 15256;
						else
							if (Waterlogged)
								if (West == West::None) return 15257;
								else if (West == West::Low) return 15258;
								else return 15259;
							else
								if (West == West::None) return 15260;
								else if (West == West::Low) return 15261;
								else return 15262;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15263;
								else if (West == West::Low) return 15264;
								else return 15265;
							else
								if (West == West::None) return 15266;
								else if (West == West::Low) return 15267;
								else return 15268;
						else
							if (Waterlogged)
								if (West == West::None) return 15269;
								else if (West == West::Low) return 15270;
								else return 15271;
							else
								if (West == West::None) return 15272;
								else if (West == West::Low) return 15273;
								else return 15274;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15275;
								else if (West == West::Low) return 15276;
								else return 15277;
							else
								if (West == West::None) return 15278;
								else if (West == West::Low) return 15279;
								else return 15280;
						else
							if (Waterlogged)
								if (West == West::None) return 15281;
								else if (West == West::Low) return 15282;
								else return 15283;
							else
								if (West == West::None) return 15284;
								else if (West == West::Low) return 15285;
								else return 15286;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15287;
								else if (West == West::Low) return 15288;
								else return 15289;
							else
								if (West == West::None) return 15290;
								else if (West == West::Low) return 15291;
								else return 15292;
						else
							if (Waterlogged)
								if (West == West::None) return 15293;
								else if (West == West::Low) return 15294;
								else return 15295;
							else
								if (West == West::None) return 15296;
								else if (West == West::Low) return 15297;
								else return 15298;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15299;
								else if (West == West::Low) return 15300;
								else return 15301;
							else
								if (West == West::None) return 15302;
								else if (West == West::Low) return 15303;
								else return 15304;
						else
							if (Waterlogged)
								if (West == West::None) return 15305;
								else if (West == West::Low) return 15306;
								else return 15307;
							else
								if (West == West::None) return 15308;
								else if (West == West::Low) return 15309;
								else return 15310;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15311;
								else if (West == West::Low) return 15312;
								else return 15313;
							else
								if (West == West::None) return 15314;
								else if (West == West::Low) return 15315;
								else return 15316;
						else
							if (Waterlogged)
								if (West == West::None) return 15317;
								else if (West == West::Low) return 15318;
								else return 15319;
							else
								if (West == West::None) return 15320;
								else if (West == West::Low) return 15321;
								else return 15322;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15323;
								else if (West == West::Low) return 15324;
								else return 15325;
							else
								if (West == West::None) return 15326;
								else if (West == West::Low) return 15327;
								else return 15328;
						else
							if (Waterlogged)
								if (West == West::None) return 15329;
								else if (West == West::Low) return 15330;
								else return 15331;
							else
								if (West == West::None) return 15332;
								else if (West == West::Low) return 15333;
								else return 15334;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15335;
								else if (West == West::Low) return 15336;
								else return 15337;
							else
								if (West == West::None) return 15338;
								else if (West == West::Low) return 15339;
								else return 15340;
						else
							if (Waterlogged)
								if (West == West::None) return 15341;
								else if (West == West::Low) return 15342;
								else return 15343;
							else
								if (West == West::None) return 15344;
								else if (West == West::Low) return 15345;
								else return 15346;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15347;
								else if (West == West::Low) return 15348;
								else return 15349;
							else
								if (West == West::None) return 15350;
								else if (West == West::Low) return 15351;
								else return 15352;
						else
							if (Waterlogged)
								if (West == West::None) return 15353;
								else if (West == West::Low) return 15354;
								else return 15355;
							else
								if (West == West::None) return 15356;
								else if (West == West::Low) return 15357;
								else return 15358;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15359;
								else if (West == West::Low) return 15360;
								else return 15361;
							else
								if (West == West::None) return 15362;
								else if (West == West::Low) return 15363;
								else return 15364;
						else
							if (Waterlogged)
								if (West == West::None) return 15365;
								else if (West == West::Low) return 15366;
								else return 15367;
							else
								if (West == West::None) return 15368;
								else if (West == West::Low) return 15369;
								else return 15370;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15371;
								else if (West == West::Low) return 15372;
								else return 15373;
							else
								if (West == West::None) return 15374;
								else if (West == West::Low) return 15375;
								else return 15376;
						else
							if (Waterlogged)
								if (West == West::None) return 15377;
								else if (West == West::Low) return 15378;
								else return 15379;
							else
								if (West == West::None) return 15380;
								else if (West == West::Low) return 15381;
								else return 15382;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15383;
								else if (West == West::Low) return 15384;
								else return 15385;
							else
								if (West == West::None) return 15386;
								else if (West == West::Low) return 15387;
								else return 15388;
						else
							if (Waterlogged)
								if (West == West::None) return 15389;
								else if (West == West::Low) return 15390;
								else return 15391;
							else
								if (West == West::None) return 15392;
								else if (West == West::Low) return 15393;
								else return 15394;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15395;
								else if (West == West::Low) return 15396;
								else return 15397;
							else
								if (West == West::None) return 15398;
								else if (West == West::Low) return 15399;
								else return 15400;
						else
							if (Waterlogged)
								if (West == West::None) return 15401;
								else if (West == West::Low) return 15402;
								else return 15403;
							else
								if (West == West::None) return 15404;
								else if (West == West::Low) return 15405;
								else return 15406;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15407;
								else if (West == West::Low) return 15408;
								else return 15409;
							else
								if (West == West::None) return 15410;
								else if (West == West::Low) return 15411;
								else return 15412;
						else
							if (Waterlogged)
								if (West == West::None) return 15413;
								else if (West == West::Low) return 15414;
								else return 15415;
							else
								if (West == West::None) return 15416;
								else if (West == West::Low) return 15417;
								else return 15418;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15419;
								else if (West == West::Low) return 15420;
								else return 15421;
							else
								if (West == West::None) return 15422;
								else if (West == West::Low) return 15423;
								else return 15424;
						else
							if (Waterlogged)
								if (West == West::None) return 15425;
								else if (West == West::Low) return 15426;
								else return 15427;
							else
								if (West == West::None) return 15428;
								else if (West == West::Low) return 15429;
								else return 15430;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15431;
								else if (West == West::Low) return 15432;
								else return 15433;
							else
								if (West == West::None) return 15434;
								else if (West == West::Low) return 15435;
								else return 15436;
						else
							if (Waterlogged)
								if (West == West::None) return 15437;
								else if (West == West::Low) return 15438;
								else return 15439;
							else
								if (West == West::None) return 15440;
								else if (West == West::Low) return 15441;
								else return 15442;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15443;
								else if (West == West::Low) return 15444;
								else return 15445;
							else
								if (West == West::None) return 15446;
								else if (West == West::Low) return 15447;
								else return 15448;
						else
							if (Waterlogged)
								if (West == West::None) return 15449;
								else if (West == West::Low) return 15450;
								else return 15451;
							else
								if (West == West::None) return 15452;
								else if (West == West::Low) return 15453;
								else return 15454;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15455;
								else if (West == West::Low) return 15456;
								else return 15457;
							else
								if (West == West::None) return 15458;
								else if (West == West::Low) return 15459;
								else return 15460;
						else
							if (Waterlogged)
								if (West == West::None) return 15461;
								else if (West == West::Low) return 15462;
								else return 15463;
							else
								if (West == West::None) return 15464;
								else if (West == West::Low) return 15465;
								else return 15466;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15467;
								else if (West == West::Low) return 15468;
								else return 15469;
							else
								if (West == West::None) return 15470;
								else if (West == West::Low) return 15471;
								else return 15472;
						else
							if (Waterlogged)
								if (West == West::None) return 15473;
								else if (West == West::Low) return 15474;
								else return 15475;
							else
								if (West == West::None) return 15476;
								else if (West == West::Low) return 15477;
								else return 15478;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15479;
								else if (West == West::Low) return 15480;
								else return 15481;
							else
								if (West == West::None) return 15482;
								else if (West == West::Low) return 15483;
								else return 15484;
						else
							if (Waterlogged)
								if (West == West::None) return 15485;
								else if (West == West::Low) return 15486;
								else return 15487;
							else
								if (West == West::None) return 15488;
								else if (West == West::Low) return 15489;
								else return 15490;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15491;
								else if (West == West::Low) return 15492;
								else return 15493;
							else
								if (West == West::None) return 15494;
								else if (West == West::Low) return 15495;
								else return 15496;
						else
							if (Waterlogged)
								if (West == West::None) return 15497;
								else if (West == West::Low) return 15498;
								else return 15499;
							else
								if (West == West::None) return 15500;
								else if (West == West::Low) return 15501;
								else return 15502;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15503;
								else if (West == West::Low) return 15504;
								else return 15505;
							else
								if (West == West::None) return 15506;
								else if (West == West::Low) return 15507;
								else return 15508;
						else
							if (Waterlogged)
								if (West == West::None) return 15509;
								else if (West == West::Low) return 15510;
								else return 15511;
							else
								if (West == West::None) return 15512;
								else if (West == West::Low) return 15513;
								else return 15514;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15515;
								else if (West == West::Low) return 15516;
								else return 15517;
							else
								if (West == West::None) return 15518;
								else if (West == West::Low) return 15519;
								else return 15520;
						else
							if (Waterlogged)
								if (West == West::None) return 15521;
								else if (West == West::Low) return 15522;
								else return 15523;
							else
								if (West == West::None) return 15524;
								else if (West == West::Low) return 15525;
								else return 15526;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15527;
								else if (West == West::Low) return 15528;
								else return 15529;
							else
								if (West == West::None) return 15530;
								else if (West == West::Low) return 15531;
								else return 15532;
						else
							if (Waterlogged)
								if (West == West::None) return 15533;
								else if (West == West::Low) return 15534;
								else return 15535;
							else
								if (West == West::None) return 15536;
								else if (West == West::Low) return 15537;
								else return 15538;
		}
		BlockState BrickWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace Bricks
	{
		constexpr BlockState Bricks()
		{
			return 2139;
		}
	}
	namespace BrownBanner
	{
		constexpr BlockState BrownBanner(const unsigned char Rotation)
		{
			if (Rotation == 0) return 11840;
			else if (Rotation == 1) return 11841;
			else if (Rotation == 2) return 11842;
			else if (Rotation == 3) return 11843;
			else if (Rotation == 4) return 11844;
			else if (Rotation == 5) return 11845;
			else if (Rotation == 6) return 11846;
			else if (Rotation == 7) return 11847;
			else if (Rotation == 8) return 11848;
			else if (Rotation == 9) return 11849;
			else if (Rotation == 10) return 11850;
			else if (Rotation == 11) return 11851;
			else if (Rotation == 12) return 11852;
			else if (Rotation == 13) return 11853;
			else if (Rotation == 14) return 11854;
			else return 11855;
		}
		BlockState BrownBanner();
		unsigned char Rotation(BlockState Block);
	}
	namespace BrownBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState BrownBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1923;
					else return 1924;
				else
					if (Part == Part::Head) return 1925;
					else return 1926;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1927;
					else return 1928;
				else
					if (Part == Part::Head) return 1929;
					else return 1930;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1931;
					else return 1932;
				else
					if (Part == Part::Head) return 1933;
					else return 1934;
			else
				if (Occupied)
					if (Part == Part::Head) return 1935;
					else return 1936;
				else
					if (Part == Part::Head) return 1937;
					else return 1938;
		}
		BlockState BrownBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace BrownCandle
	{
		constexpr BlockState BrownCandle(const unsigned char Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 21993;
					else return 21994;
				else
					if (Waterlogged) return 21995;
					else return 21996;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 21997;
					else return 21998;
				else
					if (Waterlogged) return 21999;
					else return 22000;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 22001;
					else return 22002;
				else
					if (Waterlogged) return 22003;
					else return 22004;
			else
				if (Lit)
					if (Waterlogged) return 22005;
					else return 22006;
				else
					if (Waterlogged) return 22007;
					else return 22008;
		}
		BlockState BrownCandle();
		unsigned char Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BrownCandleCake
	{
		constexpr BlockState BrownCandleCake(const bool Lit)
		{
			if (Lit) return 22083;
			else return 22084;
		}
		BlockState BrownCandleCake();
		bool Lit(BlockState Block);
	}
	namespace BrownCarpet
	{
		constexpr BlockState BrownCarpet()
		{
			return 11629;
		}
	}
	namespace BrownConcrete
	{
		constexpr BlockState BrownConcrete()
		{
			return 13763;
		}
	}
	namespace BrownConcretePowder
	{
		constexpr BlockState BrownConcretePowder()
		{
			return 13779;
		}
	}
	namespace BrownGlazedTerracotta
	{
		constexpr BlockState BrownGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13735;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13736;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13737;
			else return 13738;
		}
		BlockState BrownGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace BrownMushroom
	{
		constexpr BlockState BrownMushroom()
		{
			return 2135;
		}
	}
	namespace BrownMushroomBlock
	{
		constexpr BlockState BrownMushroomBlock(const bool Down, const bool East, const bool North, const bool South, const bool Up, const bool West)
		{
			if (Down)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 6792;
								else return 6793;
							else
								if (West) return 6794;
								else return 6795;
						else
							if (Up)
								if (West) return 6796;
								else return 6797;
							else
								if (West) return 6798;
								else return 6799;
					else
						if (South)
							if (Up)
								if (West) return 6800;
								else return 6801;
							else
								if (West) return 6802;
								else return 6803;
						else
							if (Up)
								if (West) return 6804;
								else return 6805;
							else
								if (West) return 6806;
								else return 6807;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 6808;
								else return 6809;
							else
								if (West) return 6810;
								else return 6811;
						else
							if (Up)
								if (West) return 6812;
								else return 6813;
							else
								if (West) return 6814;
								else return 6815;
					else
						if (South)
							if (Up)
								if (West) return 6816;
								else return 6817;
							else
								if (West) return 6818;
								else return 6819;
						else
							if (Up)
								if (West) return 6820;
								else return 6821;
							else
								if (West) return 6822;
								else return 6823;
			else
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 6824;
								else return 6825;
							else
								if (West) return 6826;
								else return 6827;
						else
							if (Up)
								if (West) return 6828;
								else return 6829;
							else
								if (West) return 6830;
								else return 6831;
					else
						if (South)
							if (Up)
								if (West) return 6832;
								else return 6833;
							else
								if (West) return 6834;
								else return 6835;
						else
							if (Up)
								if (West) return 6836;
								else return 6837;
							else
								if (West) return 6838;
								else return 6839;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 6840;
								else return 6841;
							else
								if (West) return 6842;
								else return 6843;
						else
							if (Up)
								if (West) return 6844;
								else return 6845;
							else
								if (West) return 6846;
								else return 6847;
					else
						if (South)
							if (Up)
								if (West) return 6848;
								else return 6849;
							else
								if (West) return 6850;
								else return 6851;
						else
							if (Up)
								if (West) return 6852;
								else return 6853;
							else
								if (West) return 6854;
								else return 6855;
		}
		BlockState BrownMushroomBlock();
		bool Down(BlockState Block);
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Up(BlockState Block);
		bool West(BlockState Block);
	}
	namespace BrownShulkerBox
	{
		constexpr BlockState BrownShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13663;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 13664;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13665;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13666;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 13667;
			else return 13668;
		}
		BlockState BrownShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace BrownStainedGlass
	{
		constexpr BlockState BrownStainedGlass()
		{
			return 6136;
		}
	}
	namespace BrownStainedGlassPane
	{
		constexpr BlockState BrownStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10565;
							else return 10566;
						else
							if (West) return 10567;
							else return 10568;
					else
						if (Waterlogged)
							if (West) return 10569;
							else return 10570;
						else
							if (West) return 10571;
							else return 10572;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10573;
							else return 10574;
						else
							if (West) return 10575;
							else return 10576;
					else
						if (Waterlogged)
							if (West) return 10577;
							else return 10578;
						else
							if (West) return 10579;
							else return 10580;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10581;
							else return 10582;
						else
							if (West) return 10583;
							else return 10584;
					else
						if (Waterlogged)
							if (West) return 10585;
							else return 10586;
						else
							if (West) return 10587;
							else return 10588;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10589;
							else return 10590;
						else
							if (West) return 10591;
							else return 10592;
					else
						if (Waterlogged)
							if (West) return 10593;
							else return 10594;
						else
							if (West) return 10595;
							else return 10596;
		}
		BlockState BrownStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace BrownTerracotta
	{
		constexpr BlockState BrownTerracotta()
		{
			return 10177;
		}
	}
	namespace BrownWallBanner
	{
		constexpr BlockState BrownWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11952;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11953;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11954;
			else return 11955;
		}
		BlockState BrownWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace BrownWool
	{
		constexpr BlockState BrownWool()
		{
			return 2105;
		}
	}
	namespace BubbleColumn
	{
		constexpr BlockState BubbleColumn(const bool Drag)
		{
			if (Drag) return 14015;
			else return 14016;
		}
		BlockState BubbleColumn();
		bool Drag(BlockState Block);
	}
	namespace BubbleCoral
	{
		constexpr BlockState BubbleCoral(const bool Waterlogged)
		{
			if (Waterlogged) return 13882;
			else return 13883;
		}
		BlockState BubbleCoral();
		bool Waterlogged(BlockState Block);
	}
	namespace BubbleCoralBlock
	{
		constexpr BlockState BubbleCoralBlock()
		{
			return 13865;
		}
	}
	namespace BubbleCoralFan
	{
		constexpr BlockState BubbleCoralFan(const bool Waterlogged)
		{
			if (Waterlogged) return 13902;
			else return 13903;
		}
		BlockState BubbleCoralFan();
		bool Waterlogged(BlockState Block);
	}
	namespace BubbleCoralWallFan
	{
		constexpr BlockState BubbleCoralWallFan(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 13964;
				else return 13965;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 13966;
				else return 13967;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 13968;
				else return 13969;
			else
				if (Waterlogged) return 13970;
				else return 13971;
		}
		BlockState BubbleCoralWallFan();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BuddingAmethyst
	{
		constexpr BlockState BuddingAmethyst()
		{
			return 22092;
		}
	}
	namespace Bush
	{
		constexpr BlockState Bush()
		{
			return 2051;
		}
	}
	namespace Cactus
	{
		constexpr BlockState Cactus(const unsigned char Age)
		{
			if (Age == 0) return 5960;
			else if (Age == 1) return 5961;
			else if (Age == 2) return 5962;
			else if (Age == 3) return 5963;
			else if (Age == 4) return 5964;
			else if (Age == 5) return 5965;
			else if (Age == 6) return 5966;
			else if (Age == 7) return 5967;
			else if (Age == 8) return 5968;
			else if (Age == 9) return 5969;
			else if (Age == 10) return 5970;
			else if (Age == 11) return 5971;
			else if (Age == 12) return 5972;
			else if (Age == 13) return 5973;
			else if (Age == 14) return 5974;
			else return 5975;
		}
		BlockState Cactus();
		unsigned char Age(BlockState Block);
	}
	namespace CactusFlower
	{
		constexpr BlockState CactusFlower()
		{
			return 5976;
		}
	}
	namespace Cake
	{
		constexpr BlockState Cake(const unsigned char Bites)
		{
			if (Bites == 0) return 6053;
			else if (Bites == 1) return 6054;
			else if (Bites == 2) return 6055;
			else if (Bites == 3) return 6056;
			else if (Bites == 4) return 6057;
			else if (Bites == 5) return 6058;
			else return 6059;
		}
		BlockState Cake();
		unsigned char Bites(BlockState Block);
	}
	namespace Calcite
	{
		constexpr BlockState Calcite()
		{
			return 23376;
		}
	}
	namespace CalibratedSculkSensor
	{
		enum class SculkSensorPhase
		{
			Inactive,
			Active,
			Cooldown,
		};
		constexpr BlockState CalibratedSculkSensor(const eBlockFace Facing, const unsigned char Power, const enum SculkSensorPhase SculkSensorPhase, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Power == 0)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23475;
						else return 23476;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23477;
						else return 23478;
					else
						if (Waterlogged) return 23479;
						else return 23480;
				else if (Power == 1)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23481;
						else return 23482;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23483;
						else return 23484;
					else
						if (Waterlogged) return 23485;
						else return 23486;
				else if (Power == 2)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23487;
						else return 23488;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23489;
						else return 23490;
					else
						if (Waterlogged) return 23491;
						else return 23492;
				else if (Power == 3)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23493;
						else return 23494;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23495;
						else return 23496;
					else
						if (Waterlogged) return 23497;
						else return 23498;
				else if (Power == 4)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23499;
						else return 23500;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23501;
						else return 23502;
					else
						if (Waterlogged) return 23503;
						else return 23504;
				else if (Power == 5)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23505;
						else return 23506;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23507;
						else return 23508;
					else
						if (Waterlogged) return 23509;
						else return 23510;
				else if (Power == 6)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23511;
						else return 23512;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23513;
						else return 23514;
					else
						if (Waterlogged) return 23515;
						else return 23516;
				else if (Power == 7)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23517;
						else return 23518;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23519;
						else return 23520;
					else
						if (Waterlogged) return 23521;
						else return 23522;
				else if (Power == 8)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23523;
						else return 23524;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23525;
						else return 23526;
					else
						if (Waterlogged) return 23527;
						else return 23528;
				else if (Power == 9)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23529;
						else return 23530;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23531;
						else return 23532;
					else
						if (Waterlogged) return 23533;
						else return 23534;
				else if (Power == 10)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23535;
						else return 23536;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23537;
						else return 23538;
					else
						if (Waterlogged) return 23539;
						else return 23540;
				else if (Power == 11)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23541;
						else return 23542;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23543;
						else return 23544;
					else
						if (Waterlogged) return 23545;
						else return 23546;
				else if (Power == 12)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23547;
						else return 23548;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23549;
						else return 23550;
					else
						if (Waterlogged) return 23551;
						else return 23552;
				else if (Power == 13)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23553;
						else return 23554;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23555;
						else return 23556;
					else
						if (Waterlogged) return 23557;
						else return 23558;
				else if (Power == 14)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23559;
						else return 23560;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23561;
						else return 23562;
					else
						if (Waterlogged) return 23563;
						else return 23564;
				else
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23565;
						else return 23566;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23567;
						else return 23568;
					else
						if (Waterlogged) return 23569;
						else return 23570;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Power == 0)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23571;
						else return 23572;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23573;
						else return 23574;
					else
						if (Waterlogged) return 23575;
						else return 23576;
				else if (Power == 1)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23577;
						else return 23578;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23579;
						else return 23580;
					else
						if (Waterlogged) return 23581;
						else return 23582;
				else if (Power == 2)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23583;
						else return 23584;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23585;
						else return 23586;
					else
						if (Waterlogged) return 23587;
						else return 23588;
				else if (Power == 3)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23589;
						else return 23590;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23591;
						else return 23592;
					else
						if (Waterlogged) return 23593;
						else return 23594;
				else if (Power == 4)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23595;
						else return 23596;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23597;
						else return 23598;
					else
						if (Waterlogged) return 23599;
						else return 23600;
				else if (Power == 5)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23601;
						else return 23602;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23603;
						else return 23604;
					else
						if (Waterlogged) return 23605;
						else return 23606;
				else if (Power == 6)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23607;
						else return 23608;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23609;
						else return 23610;
					else
						if (Waterlogged) return 23611;
						else return 23612;
				else if (Power == 7)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23613;
						else return 23614;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23615;
						else return 23616;
					else
						if (Waterlogged) return 23617;
						else return 23618;
				else if (Power == 8)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23619;
						else return 23620;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23621;
						else return 23622;
					else
						if (Waterlogged) return 23623;
						else return 23624;
				else if (Power == 9)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23625;
						else return 23626;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23627;
						else return 23628;
					else
						if (Waterlogged) return 23629;
						else return 23630;
				else if (Power == 10)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23631;
						else return 23632;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23633;
						else return 23634;
					else
						if (Waterlogged) return 23635;
						else return 23636;
				else if (Power == 11)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23637;
						else return 23638;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23639;
						else return 23640;
					else
						if (Waterlogged) return 23641;
						else return 23642;
				else if (Power == 12)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23643;
						else return 23644;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23645;
						else return 23646;
					else
						if (Waterlogged) return 23647;
						else return 23648;
				else if (Power == 13)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23649;
						else return 23650;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23651;
						else return 23652;
					else
						if (Waterlogged) return 23653;
						else return 23654;
				else if (Power == 14)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23655;
						else return 23656;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23657;
						else return 23658;
					else
						if (Waterlogged) return 23659;
						else return 23660;
				else
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23661;
						else return 23662;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23663;
						else return 23664;
					else
						if (Waterlogged) return 23665;
						else return 23666;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Power == 0)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23667;
						else return 23668;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23669;
						else return 23670;
					else
						if (Waterlogged) return 23671;
						else return 23672;
				else if (Power == 1)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23673;
						else return 23674;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23675;
						else return 23676;
					else
						if (Waterlogged) return 23677;
						else return 23678;
				else if (Power == 2)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23679;
						else return 23680;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23681;
						else return 23682;
					else
						if (Waterlogged) return 23683;
						else return 23684;
				else if (Power == 3)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23685;
						else return 23686;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23687;
						else return 23688;
					else
						if (Waterlogged) return 23689;
						else return 23690;
				else if (Power == 4)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23691;
						else return 23692;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23693;
						else return 23694;
					else
						if (Waterlogged) return 23695;
						else return 23696;
				else if (Power == 5)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23697;
						else return 23698;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23699;
						else return 23700;
					else
						if (Waterlogged) return 23701;
						else return 23702;
				else if (Power == 6)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23703;
						else return 23704;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23705;
						else return 23706;
					else
						if (Waterlogged) return 23707;
						else return 23708;
				else if (Power == 7)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23709;
						else return 23710;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23711;
						else return 23712;
					else
						if (Waterlogged) return 23713;
						else return 23714;
				else if (Power == 8)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23715;
						else return 23716;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23717;
						else return 23718;
					else
						if (Waterlogged) return 23719;
						else return 23720;
				else if (Power == 9)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23721;
						else return 23722;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23723;
						else return 23724;
					else
						if (Waterlogged) return 23725;
						else return 23726;
				else if (Power == 10)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23727;
						else return 23728;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23729;
						else return 23730;
					else
						if (Waterlogged) return 23731;
						else return 23732;
				else if (Power == 11)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23733;
						else return 23734;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23735;
						else return 23736;
					else
						if (Waterlogged) return 23737;
						else return 23738;
				else if (Power == 12)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23739;
						else return 23740;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23741;
						else return 23742;
					else
						if (Waterlogged) return 23743;
						else return 23744;
				else if (Power == 13)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23745;
						else return 23746;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23747;
						else return 23748;
					else
						if (Waterlogged) return 23749;
						else return 23750;
				else if (Power == 14)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23751;
						else return 23752;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23753;
						else return 23754;
					else
						if (Waterlogged) return 23755;
						else return 23756;
				else
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23757;
						else return 23758;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23759;
						else return 23760;
					else
						if (Waterlogged) return 23761;
						else return 23762;
			else
				if (Power == 0)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23763;
						else return 23764;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23765;
						else return 23766;
					else
						if (Waterlogged) return 23767;
						else return 23768;
				else if (Power == 1)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23769;
						else return 23770;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23771;
						else return 23772;
					else
						if (Waterlogged) return 23773;
						else return 23774;
				else if (Power == 2)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23775;
						else return 23776;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23777;
						else return 23778;
					else
						if (Waterlogged) return 23779;
						else return 23780;
				else if (Power == 3)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23781;
						else return 23782;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23783;
						else return 23784;
					else
						if (Waterlogged) return 23785;
						else return 23786;
				else if (Power == 4)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23787;
						else return 23788;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23789;
						else return 23790;
					else
						if (Waterlogged) return 23791;
						else return 23792;
				else if (Power == 5)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23793;
						else return 23794;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23795;
						else return 23796;
					else
						if (Waterlogged) return 23797;
						else return 23798;
				else if (Power == 6)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23799;
						else return 23800;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23801;
						else return 23802;
					else
						if (Waterlogged) return 23803;
						else return 23804;
				else if (Power == 7)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23805;
						else return 23806;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23807;
						else return 23808;
					else
						if (Waterlogged) return 23809;
						else return 23810;
				else if (Power == 8)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23811;
						else return 23812;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23813;
						else return 23814;
					else
						if (Waterlogged) return 23815;
						else return 23816;
				else if (Power == 9)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23817;
						else return 23818;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23819;
						else return 23820;
					else
						if (Waterlogged) return 23821;
						else return 23822;
				else if (Power == 10)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23823;
						else return 23824;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23825;
						else return 23826;
					else
						if (Waterlogged) return 23827;
						else return 23828;
				else if (Power == 11)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23829;
						else return 23830;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23831;
						else return 23832;
					else
						if (Waterlogged) return 23833;
						else return 23834;
				else if (Power == 12)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23835;
						else return 23836;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23837;
						else return 23838;
					else
						if (Waterlogged) return 23839;
						else return 23840;
				else if (Power == 13)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23841;
						else return 23842;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23843;
						else return 23844;
					else
						if (Waterlogged) return 23845;
						else return 23846;
				else if (Power == 14)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23847;
						else return 23848;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23849;
						else return 23850;
					else
						if (Waterlogged) return 23851;
						else return 23852;
				else
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 23853;
						else return 23854;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 23855;
						else return 23856;
					else
						if (Waterlogged) return 23857;
						else return 23858;
		}
		BlockState CalibratedSculkSensor();
		eBlockFace Facing(BlockState Block);
		unsigned char Power(BlockState Block);
		enum SculkSensorPhase SculkSensorPhase(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Campfire
	{
		constexpr BlockState Campfire(const eBlockFace Facing, const bool Lit, const bool SignalFire, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Lit)
					if (SignalFire)
						if (Waterlogged) return 19566;
						else return 19567;
					else
						if (Waterlogged) return 19568;
						else return 19569;
				else
					if (SignalFire)
						if (Waterlogged) return 19570;
						else return 19571;
					else
						if (Waterlogged) return 19572;
						else return 19573;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Lit)
					if (SignalFire)
						if (Waterlogged) return 19574;
						else return 19575;
					else
						if (Waterlogged) return 19576;
						else return 19577;
				else
					if (SignalFire)
						if (Waterlogged) return 19578;
						else return 19579;
					else
						if (Waterlogged) return 19580;
						else return 19581;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Lit)
					if (SignalFire)
						if (Waterlogged) return 19582;
						else return 19583;
					else
						if (Waterlogged) return 19584;
						else return 19585;
				else
					if (SignalFire)
						if (Waterlogged) return 19586;
						else return 19587;
					else
						if (Waterlogged) return 19588;
						else return 19589;
			else
				if (Lit)
					if (SignalFire)
						if (Waterlogged) return 19590;
						else return 19591;
					else
						if (Waterlogged) return 19592;
						else return 19593;
				else
					if (SignalFire)
						if (Waterlogged) return 19594;
						else return 19595;
					else
						if (Waterlogged) return 19596;
						else return 19597;
		}
		BlockState Campfire();
		eBlockFace Facing(BlockState Block);
		bool Lit(BlockState Block);
		bool SignalFire(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Candle
	{
		constexpr BlockState Candle(const unsigned char Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 21785;
					else return 21786;
				else
					if (Waterlogged) return 21787;
					else return 21788;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 21789;
					else return 21790;
				else
					if (Waterlogged) return 21791;
					else return 21792;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 21793;
					else return 21794;
				else
					if (Waterlogged) return 21795;
					else return 21796;
			else
				if (Lit)
					if (Waterlogged) return 21797;
					else return 21798;
				else
					if (Waterlogged) return 21799;
					else return 21800;
		}
		BlockState Candle();
		unsigned char Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CandleCake
	{
		constexpr BlockState CandleCake(const bool Lit)
		{
			if (Lit) return 22057;
			else return 22058;
		}
		BlockState CandleCake();
		bool Lit(BlockState Block);
	}
	namespace Carrots
	{
		constexpr BlockState Carrots(const unsigned char Age)
		{
			if (Age == 0) return 9380;
			else if (Age == 1) return 9381;
			else if (Age == 2) return 9382;
			else if (Age == 3) return 9383;
			else if (Age == 4) return 9384;
			else if (Age == 5) return 9385;
			else if (Age == 6) return 9386;
			else return 9387;
		}
		BlockState Carrots();
		unsigned char Age(BlockState Block);
	}
	namespace CartographyTable
	{
		constexpr BlockState CartographyTable()
		{
			return 19491;
		}
	}
	namespace CarvedPumpkin
	{
		constexpr BlockState CarvedPumpkin(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 6045;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 6046;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 6047;
			else return 6048;
		}
		BlockState CarvedPumpkin();
		eBlockFace Facing(BlockState Block);
	}
	namespace Cauldron
	{
		constexpr BlockState Cauldron()
		{
			return 8182;
		}
	}
	namespace CaveAir
	{
		constexpr BlockState CaveAir()
		{
			return 14014;
		}
	}
	namespace CaveVines
	{
		constexpr BlockState CaveVines(const unsigned char Age, const bool Berries)
		{
			if (Age == 0)
				if (Berries) return 25829;
				else return 25830;
			else if (Age == 1)
				if (Berries) return 25831;
				else return 25832;
			else if (Age == 2)
				if (Berries) return 25833;
				else return 25834;
			else if (Age == 3)
				if (Berries) return 25835;
				else return 25836;
			else if (Age == 4)
				if (Berries) return 25837;
				else return 25838;
			else if (Age == 5)
				if (Berries) return 25839;
				else return 25840;
			else if (Age == 6)
				if (Berries) return 25841;
				else return 25842;
			else if (Age == 7)
				if (Berries) return 25843;
				else return 25844;
			else if (Age == 8)
				if (Berries) return 25845;
				else return 25846;
			else if (Age == 9)
				if (Berries) return 25847;
				else return 25848;
			else if (Age == 10)
				if (Berries) return 25849;
				else return 25850;
			else if (Age == 11)
				if (Berries) return 25851;
				else return 25852;
			else if (Age == 12)
				if (Berries) return 25853;
				else return 25854;
			else if (Age == 13)
				if (Berries) return 25855;
				else return 25856;
			else if (Age == 14)
				if (Berries) return 25857;
				else return 25858;
			else if (Age == 15)
				if (Berries) return 25859;
				else return 25860;
			else if (Age == 16)
				if (Berries) return 25861;
				else return 25862;
			else if (Age == 17)
				if (Berries) return 25863;
				else return 25864;
			else if (Age == 18)
				if (Berries) return 25865;
				else return 25866;
			else if (Age == 19)
				if (Berries) return 25867;
				else return 25868;
			else if (Age == 20)
				if (Berries) return 25869;
				else return 25870;
			else if (Age == 21)
				if (Berries) return 25871;
				else return 25872;
			else if (Age == 22)
				if (Berries) return 25873;
				else return 25874;
			else if (Age == 23)
				if (Berries) return 25875;
				else return 25876;
			else if (Age == 24)
				if (Berries) return 25877;
				else return 25878;
			else
				if (Berries) return 25879;
				else return 25880;
		}
		BlockState CaveVines();
		unsigned char Age(BlockState Block);
		bool Berries(BlockState Block);
	}
	namespace CaveVinesPlant
	{
		constexpr BlockState CaveVinesPlant(const bool Berries)
		{
			if (Berries) return 25881;
			else return 25882;
		}
		BlockState CaveVinesPlant();
		bool Berries(BlockState Block);
	}
	namespace Chain
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState Chain(const enum Axis Axis, const bool Waterlogged)
		{
			if (Axis == Axis::X)
				if (Waterlogged) return 7016;
				else return 7017;
			else if (Axis == Axis::Y)
				if (Waterlogged) return 7018;
				else return 7019;
			else
				if (Waterlogged) return 7020;
				else return 7021;
		}
		BlockState Chain();
		enum Axis Axis(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace ChainCommandBlock
	{
		constexpr BlockState ChainCommandBlock(const bool Conditional, const eBlockFace Facing)
		{
			if (Conditional)
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13550;
				else if (Facing == eBlockFace::BLOCK_FACE_XP) return 13551;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13552;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13553;
				else if (Facing == eBlockFace::BLOCK_FACE_YP) return 13554;
				else return 13555;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13556;
				else if (Facing == eBlockFace::BLOCK_FACE_XP) return 13557;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13558;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13559;
				else if (Facing == eBlockFace::BLOCK_FACE_YP) return 13560;
				else return 13561;
		}
		BlockState ChainCommandBlock();
		bool Conditional(BlockState Block);
		eBlockFace Facing(BlockState Block);
	}
	namespace CherryButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState CherryButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9516;
					else return 9517;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9518;
					else return 9519;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9520;
					else return 9521;
				else
					if (Powered) return 9522;
					else return 9523;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9524;
					else return 9525;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9526;
					else return 9527;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9528;
					else return 9529;
				else
					if (Powered) return 9530;
					else return 9531;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9532;
					else return 9533;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9534;
					else return 9535;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9536;
					else return 9537;
				else
					if (Powered) return 9538;
					else return 9539;
		}
		BlockState CherryButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace CherryDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState CherryDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13037;
							else return 13038;
						else
							if (Powered) return 13039;
							else return 13040;
					else
						if (Open)
							if (Powered) return 13041;
							else return 13042;
						else
							if (Powered) return 13043;
							else return 13044;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13045;
							else return 13046;
						else
							if (Powered) return 13047;
							else return 13048;
					else
						if (Open)
							if (Powered) return 13049;
							else return 13050;
						else
							if (Powered) return 13051;
							else return 13052;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13053;
							else return 13054;
						else
							if (Powered) return 13055;
							else return 13056;
					else
						if (Open)
							if (Powered) return 13057;
							else return 13058;
						else
							if (Powered) return 13059;
							else return 13060;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13061;
							else return 13062;
						else
							if (Powered) return 13063;
							else return 13064;
					else
						if (Open)
							if (Powered) return 13065;
							else return 13066;
						else
							if (Powered) return 13067;
							else return 13068;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13069;
							else return 13070;
						else
							if (Powered) return 13071;
							else return 13072;
					else
						if (Open)
							if (Powered) return 13073;
							else return 13074;
						else
							if (Powered) return 13075;
							else return 13076;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13077;
							else return 13078;
						else
							if (Powered) return 13079;
							else return 13080;
					else
						if (Open)
							if (Powered) return 13081;
							else return 13082;
						else
							if (Powered) return 13083;
							else return 13084;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13085;
							else return 13086;
						else
							if (Powered) return 13087;
							else return 13088;
					else
						if (Open)
							if (Powered) return 13089;
							else return 13090;
						else
							if (Powered) return 13091;
							else return 13092;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13093;
							else return 13094;
						else
							if (Powered) return 13095;
							else return 13096;
					else
						if (Open)
							if (Powered) return 13097;
							else return 13098;
						else
							if (Powered) return 13099;
							else return 13100;
		}
		BlockState CherryDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace CherryFence
	{
		constexpr BlockState CherryFence(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 12621;
							else return 12622;
						else
							if (West) return 12623;
							else return 12624;
					else
						if (Waterlogged)
							if (West) return 12625;
							else return 12626;
						else
							if (West) return 12627;
							else return 12628;
				else
					if (South)
						if (Waterlogged)
							if (West) return 12629;
							else return 12630;
						else
							if (West) return 12631;
							else return 12632;
					else
						if (Waterlogged)
							if (West) return 12633;
							else return 12634;
						else
							if (West) return 12635;
							else return 12636;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 12637;
							else return 12638;
						else
							if (West) return 12639;
							else return 12640;
					else
						if (Waterlogged)
							if (West) return 12641;
							else return 12642;
						else
							if (West) return 12643;
							else return 12644;
				else
					if (South)
						if (Waterlogged)
							if (West) return 12645;
							else return 12646;
						else
							if (West) return 12647;
							else return 12648;
					else
						if (Waterlogged)
							if (West) return 12649;
							else return 12650;
						else
							if (West) return 12651;
							else return 12652;
		}
		BlockState CherryFence();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace CherryFenceGate
	{
		constexpr BlockState CherryFenceGate(const eBlockFace Facing, const bool InWall, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (InWall)
					if (Open)
						if (Powered) return 12333;
						else return 12334;
					else
						if (Powered) return 12335;
						else return 12336;
				else
					if (Open)
						if (Powered) return 12337;
						else return 12338;
					else
						if (Powered) return 12339;
						else return 12340;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (InWall)
					if (Open)
						if (Powered) return 12341;
						else return 12342;
					else
						if (Powered) return 12343;
						else return 12344;
				else
					if (Open)
						if (Powered) return 12345;
						else return 12346;
					else
						if (Powered) return 12347;
						else return 12348;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (InWall)
					if (Open)
						if (Powered) return 12349;
						else return 12350;
					else
						if (Powered) return 12351;
						else return 12352;
				else
					if (Open)
						if (Powered) return 12353;
						else return 12354;
					else
						if (Powered) return 12355;
						else return 12356;
			else
				if (InWall)
					if (Open)
						if (Powered) return 12357;
						else return 12358;
					else
						if (Powered) return 12359;
						else return 12360;
				else
					if (Open)
						if (Powered) return 12361;
						else return 12362;
					else
						if (Powered) return 12363;
						else return 12364;
		}
		BlockState CherryFenceGate();
		eBlockFace Facing(BlockState Block);
		bool InWall(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace CherryHangingSign
	{
		constexpr BlockState CherryHangingSign(const bool Attached, const unsigned char Rotation, const bool Waterlogged)
		{
			if (Attached)
				if (Rotation == 0)
					if (Waterlogged) return 5194;
					else return 5195;
				else if (Rotation == 1)
					if (Waterlogged) return 5196;
					else return 5197;
				else if (Rotation == 2)
					if (Waterlogged) return 5198;
					else return 5199;
				else if (Rotation == 3)
					if (Waterlogged) return 5200;
					else return 5201;
				else if (Rotation == 4)
					if (Waterlogged) return 5202;
					else return 5203;
				else if (Rotation == 5)
					if (Waterlogged) return 5204;
					else return 5205;
				else if (Rotation == 6)
					if (Waterlogged) return 5206;
					else return 5207;
				else if (Rotation == 7)
					if (Waterlogged) return 5208;
					else return 5209;
				else if (Rotation == 8)
					if (Waterlogged) return 5210;
					else return 5211;
				else if (Rotation == 9)
					if (Waterlogged) return 5212;
					else return 5213;
				else if (Rotation == 10)
					if (Waterlogged) return 5214;
					else return 5215;
				else if (Rotation == 11)
					if (Waterlogged) return 5216;
					else return 5217;
				else if (Rotation == 12)
					if (Waterlogged) return 5218;
					else return 5219;
				else if (Rotation == 13)
					if (Waterlogged) return 5220;
					else return 5221;
				else if (Rotation == 14)
					if (Waterlogged) return 5222;
					else return 5223;
				else
					if (Waterlogged) return 5224;
					else return 5225;
			else
				if (Rotation == 0)
					if (Waterlogged) return 5226;
					else return 5227;
				else if (Rotation == 1)
					if (Waterlogged) return 5228;
					else return 5229;
				else if (Rotation == 2)
					if (Waterlogged) return 5230;
					else return 5231;
				else if (Rotation == 3)
					if (Waterlogged) return 5232;
					else return 5233;
				else if (Rotation == 4)
					if (Waterlogged) return 5234;
					else return 5235;
				else if (Rotation == 5)
					if (Waterlogged) return 5236;
					else return 5237;
				else if (Rotation == 6)
					if (Waterlogged) return 5238;
					else return 5239;
				else if (Rotation == 7)
					if (Waterlogged) return 5240;
					else return 5241;
				else if (Rotation == 8)
					if (Waterlogged) return 5242;
					else return 5243;
				else if (Rotation == 9)
					if (Waterlogged) return 5244;
					else return 5245;
				else if (Rotation == 10)
					if (Waterlogged) return 5246;
					else return 5247;
				else if (Rotation == 11)
					if (Waterlogged) return 5248;
					else return 5249;
				else if (Rotation == 12)
					if (Waterlogged) return 5250;
					else return 5251;
				else if (Rotation == 13)
					if (Waterlogged) return 5252;
					else return 5253;
				else if (Rotation == 14)
					if (Waterlogged) return 5254;
					else return 5255;
				else
					if (Waterlogged) return 5256;
					else return 5257;
		}
		BlockState CherryHangingSign();
		bool Attached(BlockState Block);
		unsigned char Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CherryLeaves
	{
		constexpr BlockState CherryLeaves(const unsigned char Distance, const bool Persistent, const bool Waterlogged)
		{
			if (Distance == 1)
				if (Persistent)
					if (Waterlogged) return 392;
					else return 393;
				else
					if (Waterlogged) return 394;
					else return 395;
			else if (Distance == 2)
				if (Persistent)
					if (Waterlogged) return 396;
					else return 397;
				else
					if (Waterlogged) return 398;
					else return 399;
			else if (Distance == 3)
				if (Persistent)
					if (Waterlogged) return 400;
					else return 401;
				else
					if (Waterlogged) return 402;
					else return 403;
			else if (Distance == 4)
				if (Persistent)
					if (Waterlogged) return 404;
					else return 405;
				else
					if (Waterlogged) return 406;
					else return 407;
			else if (Distance == 5)
				if (Persistent)
					if (Waterlogged) return 408;
					else return 409;
				else
					if (Waterlogged) return 410;
					else return 411;
			else if (Distance == 6)
				if (Persistent)
					if (Waterlogged) return 412;
					else return 413;
				else
					if (Waterlogged) return 414;
					else return 415;
			else
				if (Persistent)
					if (Waterlogged) return 416;
					else return 417;
				else
					if (Waterlogged) return 418;
					else return 419;
		}
		BlockState CherryLeaves();
		unsigned char Distance(BlockState Block);
		bool Persistent(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CherryLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState CherryLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 151;
			else if (Axis == Axis::Y) return 152;
			else return 153;
		}
		BlockState CherryLog();
		enum Axis Axis(BlockState Block);
	}
	namespace CherryPlanks
	{
		constexpr BlockState CherryPlanks()
		{
			return 20;
		}
	}
	namespace CherryPressurePlate
	{
		constexpr BlockState CherryPressurePlate(const bool Powered)
		{
			if (Powered) return 5902;
			else return 5903;
		}
		BlockState CherryPressurePlate();
		bool Powered(BlockState Block);
	}
	namespace CherrySapling
	{
		constexpr BlockState CherrySapling(const unsigned char Stage)
		{
			if (Stage == 0) return 39;
			else return 40;
		}
		BlockState CherrySapling();
		unsigned char Stage(BlockState Block);
	}
	namespace CherrySign
	{
		constexpr BlockState CherrySign(const unsigned char Rotation, const bool Waterlogged)
		{
			if (Rotation == 0)
				if (Waterlogged) return 4494;
				else return 4495;
			else if (Rotation == 1)
				if (Waterlogged) return 4496;
				else return 4497;
			else if (Rotation == 2)
				if (Waterlogged) return 4498;
				else return 4499;
			else if (Rotation == 3)
				if (Waterlogged) return 4500;
				else return 4501;
			else if (Rotation == 4)
				if (Waterlogged) return 4502;
				else return 4503;
			else if (Rotation == 5)
				if (Waterlogged) return 4504;
				else return 4505;
			else if (Rotation == 6)
				if (Waterlogged) return 4506;
				else return 4507;
			else if (Rotation == 7)
				if (Waterlogged) return 4508;
				else return 4509;
			else if (Rotation == 8)
				if (Waterlogged) return 4510;
				else return 4511;
			else if (Rotation == 9)
				if (Waterlogged) return 4512;
				else return 4513;
			else if (Rotation == 10)
				if (Waterlogged) return 4514;
				else return 4515;
			else if (Rotation == 11)
				if (Waterlogged) return 4516;
				else return 4517;
			else if (Rotation == 12)
				if (Waterlogged) return 4518;
				else return 4519;
			else if (Rotation == 13)
				if (Waterlogged) return 4520;
				else return 4521;
			else if (Rotation == 14)
				if (Waterlogged) return 4522;
				else return 4523;
			else
				if (Waterlogged) return 4524;
				else return 4525;
		}
		BlockState CherrySign();
		unsigned char Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CherrySlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState CherrySlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 12081;
				else return 12082;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 12083;
				else return 12084;
			else
				if (Waterlogged) return 12085;
				else return 12086;
		}
		BlockState CherrySlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CherryStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState CherryStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10773;
						else return 10774;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10775;
						else return 10776;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10777;
						else return 10778;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10779;
						else return 10780;
					else
						if (Waterlogged) return 10781;
						else return 10782;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10783;
						else return 10784;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10785;
						else return 10786;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10787;
						else return 10788;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10789;
						else return 10790;
					else
						if (Waterlogged) return 10791;
						else return 10792;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10793;
						else return 10794;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10795;
						else return 10796;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10797;
						else return 10798;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10799;
						else return 10800;
					else
						if (Waterlogged) return 10801;
						else return 10802;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10803;
						else return 10804;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10805;
						else return 10806;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10807;
						else return 10808;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10809;
						else return 10810;
					else
						if (Waterlogged) return 10811;
						else return 10812;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10813;
						else return 10814;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10815;
						else return 10816;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10817;
						else return 10818;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10819;
						else return 10820;
					else
						if (Waterlogged) return 10821;
						else return 10822;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10823;
						else return 10824;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10825;
						else return 10826;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10827;
						else return 10828;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10829;
						else return 10830;
					else
						if (Waterlogged) return 10831;
						else return 10832;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10833;
						else return 10834;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10835;
						else return 10836;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10837;
						else return 10838;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10839;
						else return 10840;
					else
						if (Waterlogged) return 10841;
						else return 10842;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10843;
						else return 10844;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10845;
						else return 10846;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10847;
						else return 10848;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10849;
						else return 10850;
					else
						if (Waterlogged) return 10851;
						else return 10852;
		}
		BlockState CherryStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CherryTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState CherryTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6460;
							else return 6461;
						else
							if (Waterlogged) return 6462;
							else return 6463;
					else
						if (Powered)
							if (Waterlogged) return 6464;
							else return 6465;
						else
							if (Waterlogged) return 6466;
							else return 6467;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6468;
							else return 6469;
						else
							if (Waterlogged) return 6470;
							else return 6471;
					else
						if (Powered)
							if (Waterlogged) return 6472;
							else return 6473;
						else
							if (Waterlogged) return 6474;
							else return 6475;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6476;
							else return 6477;
						else
							if (Waterlogged) return 6478;
							else return 6479;
					else
						if (Powered)
							if (Waterlogged) return 6480;
							else return 6481;
						else
							if (Waterlogged) return 6482;
							else return 6483;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6484;
							else return 6485;
						else
							if (Waterlogged) return 6486;
							else return 6487;
					else
						if (Powered)
							if (Waterlogged) return 6488;
							else return 6489;
						else
							if (Waterlogged) return 6490;
							else return 6491;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6492;
							else return 6493;
						else
							if (Waterlogged) return 6494;
							else return 6495;
					else
						if (Powered)
							if (Waterlogged) return 6496;
							else return 6497;
						else
							if (Waterlogged) return 6498;
							else return 6499;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6500;
							else return 6501;
						else
							if (Waterlogged) return 6502;
							else return 6503;
					else
						if (Powered)
							if (Waterlogged) return 6504;
							else return 6505;
						else
							if (Waterlogged) return 6506;
							else return 6507;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6508;
							else return 6509;
						else
							if (Waterlogged) return 6510;
							else return 6511;
					else
						if (Powered)
							if (Waterlogged) return 6512;
							else return 6513;
						else
							if (Waterlogged) return 6514;
							else return 6515;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6516;
							else return 6517;
						else
							if (Waterlogged) return 6518;
							else return 6519;
					else
						if (Powered)
							if (Waterlogged) return 6520;
							else return 6521;
						else
							if (Waterlogged) return 6522;
							else return 6523;
		}
		BlockState CherryTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CherryWallHangingSign
	{
		constexpr BlockState CherryWallHangingSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 5738;
				else return 5739;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 5740;
				else return 5741;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 5742;
				else return 5743;
			else
				if (Waterlogged) return 5744;
				else return 5745;
		}
		BlockState CherryWallHangingSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CherryWallSign
	{
		constexpr BlockState CherryWallSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 4890;
				else return 4891;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 4892;
				else return 4893;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 4894;
				else return 4895;
			else
				if (Waterlogged) return 4896;
				else return 4897;
		}
		BlockState CherryWallSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CherryWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState CherryWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 216;
			else if (Axis == Axis::Y) return 217;
			else return 218;
		}
		BlockState CherryWood();
		enum Axis Axis(BlockState Block);
	}
	namespace Chest
	{
		enum class Type
		{
			Single,
			Left,
			Right,
		};
		constexpr BlockState Chest(const eBlockFace Facing, const enum Type Type, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Type == Type::Single)
					if (Waterlogged) return 3018;
					else return 3019;
				else if (Type == Type::Left)
					if (Waterlogged) return 3020;
					else return 3021;
				else
					if (Waterlogged) return 3022;
					else return 3023;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Type == Type::Single)
					if (Waterlogged) return 3024;
					else return 3025;
				else if (Type == Type::Left)
					if (Waterlogged) return 3026;
					else return 3027;
				else
					if (Waterlogged) return 3028;
					else return 3029;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Type == Type::Single)
					if (Waterlogged) return 3030;
					else return 3031;
				else if (Type == Type::Left)
					if (Waterlogged) return 3032;
					else return 3033;
				else
					if (Waterlogged) return 3034;
					else return 3035;
			else
				if (Type == Type::Single)
					if (Waterlogged) return 3036;
					else return 3037;
				else if (Type == Type::Left)
					if (Waterlogged) return 3038;
					else return 3039;
				else
					if (Waterlogged) return 3040;
					else return 3041;
		}
		BlockState Chest();
		eBlockFace Facing(BlockState Block);
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace ChippedAnvil
	{
		constexpr BlockState ChippedAnvil(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 9920;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 9921;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 9922;
			else return 9923;
		}
		BlockState ChippedAnvil();
		eBlockFace Facing(BlockState Block);
	}
	namespace ChiseledBookshelf
	{
		constexpr BlockState ChiseledBookshelf(const eBlockFace Facing, const bool Slot0Occupied, const bool Slot1Occupied, const bool Slot2Occupied, const bool Slot3Occupied, const bool Slot4Occupied, const bool Slot5Occupied)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Slot0Occupied)
					if (Slot1Occupied)
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2143;
									else return 2144;
								else
									if (Slot5Occupied) return 2145;
									else return 2146;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2147;
									else return 2148;
								else
									if (Slot5Occupied) return 2149;
									else return 2150;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2151;
									else return 2152;
								else
									if (Slot5Occupied) return 2153;
									else return 2154;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2155;
									else return 2156;
								else
									if (Slot5Occupied) return 2157;
									else return 2158;
					else
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2159;
									else return 2160;
								else
									if (Slot5Occupied) return 2161;
									else return 2162;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2163;
									else return 2164;
								else
									if (Slot5Occupied) return 2165;
									else return 2166;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2167;
									else return 2168;
								else
									if (Slot5Occupied) return 2169;
									else return 2170;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2171;
									else return 2172;
								else
									if (Slot5Occupied) return 2173;
									else return 2174;
				else
					if (Slot1Occupied)
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2175;
									else return 2176;
								else
									if (Slot5Occupied) return 2177;
									else return 2178;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2179;
									else return 2180;
								else
									if (Slot5Occupied) return 2181;
									else return 2182;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2183;
									else return 2184;
								else
									if (Slot5Occupied) return 2185;
									else return 2186;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2187;
									else return 2188;
								else
									if (Slot5Occupied) return 2189;
									else return 2190;
					else
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2191;
									else return 2192;
								else
									if (Slot5Occupied) return 2193;
									else return 2194;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2195;
									else return 2196;
								else
									if (Slot5Occupied) return 2197;
									else return 2198;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2199;
									else return 2200;
								else
									if (Slot5Occupied) return 2201;
									else return 2202;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2203;
									else return 2204;
								else
									if (Slot5Occupied) return 2205;
									else return 2206;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Slot0Occupied)
					if (Slot1Occupied)
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2207;
									else return 2208;
								else
									if (Slot5Occupied) return 2209;
									else return 2210;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2211;
									else return 2212;
								else
									if (Slot5Occupied) return 2213;
									else return 2214;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2215;
									else return 2216;
								else
									if (Slot5Occupied) return 2217;
									else return 2218;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2219;
									else return 2220;
								else
									if (Slot5Occupied) return 2221;
									else return 2222;
					else
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2223;
									else return 2224;
								else
									if (Slot5Occupied) return 2225;
									else return 2226;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2227;
									else return 2228;
								else
									if (Slot5Occupied) return 2229;
									else return 2230;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2231;
									else return 2232;
								else
									if (Slot5Occupied) return 2233;
									else return 2234;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2235;
									else return 2236;
								else
									if (Slot5Occupied) return 2237;
									else return 2238;
				else
					if (Slot1Occupied)
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2239;
									else return 2240;
								else
									if (Slot5Occupied) return 2241;
									else return 2242;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2243;
									else return 2244;
								else
									if (Slot5Occupied) return 2245;
									else return 2246;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2247;
									else return 2248;
								else
									if (Slot5Occupied) return 2249;
									else return 2250;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2251;
									else return 2252;
								else
									if (Slot5Occupied) return 2253;
									else return 2254;
					else
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2255;
									else return 2256;
								else
									if (Slot5Occupied) return 2257;
									else return 2258;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2259;
									else return 2260;
								else
									if (Slot5Occupied) return 2261;
									else return 2262;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2263;
									else return 2264;
								else
									if (Slot5Occupied) return 2265;
									else return 2266;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2267;
									else return 2268;
								else
									if (Slot5Occupied) return 2269;
									else return 2270;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Slot0Occupied)
					if (Slot1Occupied)
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2271;
									else return 2272;
								else
									if (Slot5Occupied) return 2273;
									else return 2274;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2275;
									else return 2276;
								else
									if (Slot5Occupied) return 2277;
									else return 2278;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2279;
									else return 2280;
								else
									if (Slot5Occupied) return 2281;
									else return 2282;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2283;
									else return 2284;
								else
									if (Slot5Occupied) return 2285;
									else return 2286;
					else
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2287;
									else return 2288;
								else
									if (Slot5Occupied) return 2289;
									else return 2290;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2291;
									else return 2292;
								else
									if (Slot5Occupied) return 2293;
									else return 2294;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2295;
									else return 2296;
								else
									if (Slot5Occupied) return 2297;
									else return 2298;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2299;
									else return 2300;
								else
									if (Slot5Occupied) return 2301;
									else return 2302;
				else
					if (Slot1Occupied)
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2303;
									else return 2304;
								else
									if (Slot5Occupied) return 2305;
									else return 2306;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2307;
									else return 2308;
								else
									if (Slot5Occupied) return 2309;
									else return 2310;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2311;
									else return 2312;
								else
									if (Slot5Occupied) return 2313;
									else return 2314;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2315;
									else return 2316;
								else
									if (Slot5Occupied) return 2317;
									else return 2318;
					else
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2319;
									else return 2320;
								else
									if (Slot5Occupied) return 2321;
									else return 2322;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2323;
									else return 2324;
								else
									if (Slot5Occupied) return 2325;
									else return 2326;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2327;
									else return 2328;
								else
									if (Slot5Occupied) return 2329;
									else return 2330;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2331;
									else return 2332;
								else
									if (Slot5Occupied) return 2333;
									else return 2334;
			else
				if (Slot0Occupied)
					if (Slot1Occupied)
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2335;
									else return 2336;
								else
									if (Slot5Occupied) return 2337;
									else return 2338;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2339;
									else return 2340;
								else
									if (Slot5Occupied) return 2341;
									else return 2342;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2343;
									else return 2344;
								else
									if (Slot5Occupied) return 2345;
									else return 2346;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2347;
									else return 2348;
								else
									if (Slot5Occupied) return 2349;
									else return 2350;
					else
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2351;
									else return 2352;
								else
									if (Slot5Occupied) return 2353;
									else return 2354;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2355;
									else return 2356;
								else
									if (Slot5Occupied) return 2357;
									else return 2358;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2359;
									else return 2360;
								else
									if (Slot5Occupied) return 2361;
									else return 2362;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2363;
									else return 2364;
								else
									if (Slot5Occupied) return 2365;
									else return 2366;
				else
					if (Slot1Occupied)
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2367;
									else return 2368;
								else
									if (Slot5Occupied) return 2369;
									else return 2370;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2371;
									else return 2372;
								else
									if (Slot5Occupied) return 2373;
									else return 2374;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2375;
									else return 2376;
								else
									if (Slot5Occupied) return 2377;
									else return 2378;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2379;
									else return 2380;
								else
									if (Slot5Occupied) return 2381;
									else return 2382;
					else
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2383;
									else return 2384;
								else
									if (Slot5Occupied) return 2385;
									else return 2386;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2387;
									else return 2388;
								else
									if (Slot5Occupied) return 2389;
									else return 2390;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2391;
									else return 2392;
								else
									if (Slot5Occupied) return 2393;
									else return 2394;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2395;
									else return 2396;
								else
									if (Slot5Occupied) return 2397;
									else return 2398;
		}
		BlockState ChiseledBookshelf();
		eBlockFace Facing(BlockState Block);
		bool Slot0Occupied(BlockState Block);
		bool Slot1Occupied(BlockState Block);
		bool Slot2Occupied(BlockState Block);
		bool Slot3Occupied(BlockState Block);
		bool Slot4Occupied(BlockState Block);
		bool Slot5Occupied(BlockState Block);
	}
	namespace ChiseledCopper
	{
		constexpr BlockState ChiseledCopper()
		{
			return 24011;
		}
	}
	namespace ChiseledDeepslate
	{
		constexpr BlockState ChiseledDeepslate()
		{
			return 27643;
		}
	}
	namespace ChiseledNetherBricks
	{
		constexpr BlockState ChiseledNetherBricks()
		{
			return 21782;
		}
	}
	namespace ChiseledPolishedBlackstone
	{
		constexpr BlockState ChiseledPolishedBlackstone()
		{
			return 20934;
		}
	}
	namespace ChiseledQuartzBlock
	{
		constexpr BlockState ChiseledQuartzBlock()
		{
			return 10045;
		}
	}
	namespace ChiseledRedSandstone
	{
		constexpr BlockState ChiseledRedSandstone()
		{
			return 11969;
		}
	}
	namespace ChiseledResinBricks
	{
		constexpr BlockState ChiseledResinBricks()
		{
			return 8055;
		}
	}
	namespace ChiseledSandstone
	{
		constexpr BlockState ChiseledSandstone()
		{
			return 579;
		}
	}
	namespace ChiseledStoneBricks
	{
		constexpr BlockState ChiseledStoneBricks()
		{
			return 6783;
		}
	}
	namespace ChiseledTuff
	{
		constexpr BlockState ChiseledTuff()
		{
			return 22963;
		}
	}
	namespace ChiseledTuffBricks
	{
		constexpr BlockState ChiseledTuffBricks()
		{
			return 23375;
		}
	}
	namespace ChorusFlower
	{
		constexpr BlockState ChorusFlower(const unsigned char Age)
		{
			if (Age == 0) return 13427;
			else if (Age == 1) return 13428;
			else if (Age == 2) return 13429;
			else if (Age == 3) return 13430;
			else if (Age == 4) return 13431;
			else return 13432;
		}
		BlockState ChorusFlower();
		unsigned char Age(BlockState Block);
	}
	namespace ChorusPlant
	{
		constexpr BlockState ChorusPlant(const bool Down, const bool East, const bool North, const bool South, const bool Up, const bool West)
		{
			if (Down)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 13363;
								else return 13364;
							else
								if (West) return 13365;
								else return 13366;
						else
							if (Up)
								if (West) return 13367;
								else return 13368;
							else
								if (West) return 13369;
								else return 13370;
					else
						if (South)
							if (Up)
								if (West) return 13371;
								else return 13372;
							else
								if (West) return 13373;
								else return 13374;
						else
							if (Up)
								if (West) return 13375;
								else return 13376;
							else
								if (West) return 13377;
								else return 13378;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 13379;
								else return 13380;
							else
								if (West) return 13381;
								else return 13382;
						else
							if (Up)
								if (West) return 13383;
								else return 13384;
							else
								if (West) return 13385;
								else return 13386;
					else
						if (South)
							if (Up)
								if (West) return 13387;
								else return 13388;
							else
								if (West) return 13389;
								else return 13390;
						else
							if (Up)
								if (West) return 13391;
								else return 13392;
							else
								if (West) return 13393;
								else return 13394;
			else
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 13395;
								else return 13396;
							else
								if (West) return 13397;
								else return 13398;
						else
							if (Up)
								if (West) return 13399;
								else return 13400;
							else
								if (West) return 13401;
								else return 13402;
					else
						if (South)
							if (Up)
								if (West) return 13403;
								else return 13404;
							else
								if (West) return 13405;
								else return 13406;
						else
							if (Up)
								if (West) return 13407;
								else return 13408;
							else
								if (West) return 13409;
								else return 13410;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 13411;
								else return 13412;
							else
								if (West) return 13413;
								else return 13414;
						else
							if (Up)
								if (West) return 13415;
								else return 13416;
							else
								if (West) return 13417;
								else return 13418;
					else
						if (South)
							if (Up)
								if (West) return 13419;
								else return 13420;
							else
								if (West) return 13421;
								else return 13422;
						else
							if (Up)
								if (West) return 13423;
								else return 13424;
							else
								if (West) return 13425;
								else return 13426;
		}
		BlockState ChorusPlant();
		bool Down(BlockState Block);
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Up(BlockState Block);
		bool West(BlockState Block);
	}
	namespace Clay
	{
		constexpr BlockState Clay()
		{
			return 5977;
		}
	}
	namespace ClosedEyeblossom
	{
		constexpr BlockState ClosedEyeblossom()
		{
			return 27942;
		}
	}
	namespace CoalBlock
	{
		constexpr BlockState CoalBlock()
		{
			return 11634;
		}
	}
	namespace CoalOre
	{
		constexpr BlockState CoalOre()
		{
			return 133;
		}
	}
	namespace CoarseDirt
	{
		constexpr BlockState CoarseDirt()
		{
			return 11;
		}
	}
	namespace CobbledDeepslate
	{
		constexpr BlockState CobbledDeepslate()
		{
			return 25999;
		}
	}
	namespace CobbledDeepslateSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState CobbledDeepslateSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 26080;
				else return 26081;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 26082;
				else return 26083;
			else
				if (Waterlogged) return 26084;
				else return 26085;
		}
		BlockState CobbledDeepslateSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CobbledDeepslateStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState CobbledDeepslateStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26000;
						else return 26001;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26002;
						else return 26003;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26004;
						else return 26005;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26006;
						else return 26007;
					else
						if (Waterlogged) return 26008;
						else return 26009;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26010;
						else return 26011;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26012;
						else return 26013;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26014;
						else return 26015;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26016;
						else return 26017;
					else
						if (Waterlogged) return 26018;
						else return 26019;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26020;
						else return 26021;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26022;
						else return 26023;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26024;
						else return 26025;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26026;
						else return 26027;
					else
						if (Waterlogged) return 26028;
						else return 26029;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26030;
						else return 26031;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26032;
						else return 26033;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26034;
						else return 26035;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26036;
						else return 26037;
					else
						if (Waterlogged) return 26038;
						else return 26039;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26040;
						else return 26041;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26042;
						else return 26043;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26044;
						else return 26045;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26046;
						else return 26047;
					else
						if (Waterlogged) return 26048;
						else return 26049;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26050;
						else return 26051;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26052;
						else return 26053;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26054;
						else return 26055;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26056;
						else return 26057;
					else
						if (Waterlogged) return 26058;
						else return 26059;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26060;
						else return 26061;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26062;
						else return 26063;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26064;
						else return 26065;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26066;
						else return 26067;
					else
						if (Waterlogged) return 26068;
						else return 26069;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26070;
						else return 26071;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26072;
						else return 26073;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26074;
						else return 26075;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26076;
						else return 26077;
					else
						if (Waterlogged) return 26078;
						else return 26079;
		}
		BlockState CobbledDeepslateStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CobbledDeepslateWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState CobbledDeepslateWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26086;
								else if (West == West::Low) return 26087;
								else return 26088;
							else
								if (West == West::None) return 26089;
								else if (West == West::Low) return 26090;
								else return 26091;
						else
							if (Waterlogged)
								if (West == West::None) return 26092;
								else if (West == West::Low) return 26093;
								else return 26094;
							else
								if (West == West::None) return 26095;
								else if (West == West::Low) return 26096;
								else return 26097;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26098;
								else if (West == West::Low) return 26099;
								else return 26100;
							else
								if (West == West::None) return 26101;
								else if (West == West::Low) return 26102;
								else return 26103;
						else
							if (Waterlogged)
								if (West == West::None) return 26104;
								else if (West == West::Low) return 26105;
								else return 26106;
							else
								if (West == West::None) return 26107;
								else if (West == West::Low) return 26108;
								else return 26109;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26110;
								else if (West == West::Low) return 26111;
								else return 26112;
							else
								if (West == West::None) return 26113;
								else if (West == West::Low) return 26114;
								else return 26115;
						else
							if (Waterlogged)
								if (West == West::None) return 26116;
								else if (West == West::Low) return 26117;
								else return 26118;
							else
								if (West == West::None) return 26119;
								else if (West == West::Low) return 26120;
								else return 26121;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26122;
								else if (West == West::Low) return 26123;
								else return 26124;
							else
								if (West == West::None) return 26125;
								else if (West == West::Low) return 26126;
								else return 26127;
						else
							if (Waterlogged)
								if (West == West::None) return 26128;
								else if (West == West::Low) return 26129;
								else return 26130;
							else
								if (West == West::None) return 26131;
								else if (West == West::Low) return 26132;
								else return 26133;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26134;
								else if (West == West::Low) return 26135;
								else return 26136;
							else
								if (West == West::None) return 26137;
								else if (West == West::Low) return 26138;
								else return 26139;
						else
							if (Waterlogged)
								if (West == West::None) return 26140;
								else if (West == West::Low) return 26141;
								else return 26142;
							else
								if (West == West::None) return 26143;
								else if (West == West::Low) return 26144;
								else return 26145;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26146;
								else if (West == West::Low) return 26147;
								else return 26148;
							else
								if (West == West::None) return 26149;
								else if (West == West::Low) return 26150;
								else return 26151;
						else
							if (Waterlogged)
								if (West == West::None) return 26152;
								else if (West == West::Low) return 26153;
								else return 26154;
							else
								if (West == West::None) return 26155;
								else if (West == West::Low) return 26156;
								else return 26157;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26158;
								else if (West == West::Low) return 26159;
								else return 26160;
							else
								if (West == West::None) return 26161;
								else if (West == West::Low) return 26162;
								else return 26163;
						else
							if (Waterlogged)
								if (West == West::None) return 26164;
								else if (West == West::Low) return 26165;
								else return 26166;
							else
								if (West == West::None) return 26167;
								else if (West == West::Low) return 26168;
								else return 26169;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26170;
								else if (West == West::Low) return 26171;
								else return 26172;
							else
								if (West == West::None) return 26173;
								else if (West == West::Low) return 26174;
								else return 26175;
						else
							if (Waterlogged)
								if (West == West::None) return 26176;
								else if (West == West::Low) return 26177;
								else return 26178;
							else
								if (West == West::None) return 26179;
								else if (West == West::Low) return 26180;
								else return 26181;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26182;
								else if (West == West::Low) return 26183;
								else return 26184;
							else
								if (West == West::None) return 26185;
								else if (West == West::Low) return 26186;
								else return 26187;
						else
							if (Waterlogged)
								if (West == West::None) return 26188;
								else if (West == West::Low) return 26189;
								else return 26190;
							else
								if (West == West::None) return 26191;
								else if (West == West::Low) return 26192;
								else return 26193;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26194;
								else if (West == West::Low) return 26195;
								else return 26196;
							else
								if (West == West::None) return 26197;
								else if (West == West::Low) return 26198;
								else return 26199;
						else
							if (Waterlogged)
								if (West == West::None) return 26200;
								else if (West == West::Low) return 26201;
								else return 26202;
							else
								if (West == West::None) return 26203;
								else if (West == West::Low) return 26204;
								else return 26205;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26206;
								else if (West == West::Low) return 26207;
								else return 26208;
							else
								if (West == West::None) return 26209;
								else if (West == West::Low) return 26210;
								else return 26211;
						else
							if (Waterlogged)
								if (West == West::None) return 26212;
								else if (West == West::Low) return 26213;
								else return 26214;
							else
								if (West == West::None) return 26215;
								else if (West == West::Low) return 26216;
								else return 26217;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26218;
								else if (West == West::Low) return 26219;
								else return 26220;
							else
								if (West == West::None) return 26221;
								else if (West == West::Low) return 26222;
								else return 26223;
						else
							if (Waterlogged)
								if (West == West::None) return 26224;
								else if (West == West::Low) return 26225;
								else return 26226;
							else
								if (West == West::None) return 26227;
								else if (West == West::Low) return 26228;
								else return 26229;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26230;
								else if (West == West::Low) return 26231;
								else return 26232;
							else
								if (West == West::None) return 26233;
								else if (West == West::Low) return 26234;
								else return 26235;
						else
							if (Waterlogged)
								if (West == West::None) return 26236;
								else if (West == West::Low) return 26237;
								else return 26238;
							else
								if (West == West::None) return 26239;
								else if (West == West::Low) return 26240;
								else return 26241;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26242;
								else if (West == West::Low) return 26243;
								else return 26244;
							else
								if (West == West::None) return 26245;
								else if (West == West::Low) return 26246;
								else return 26247;
						else
							if (Waterlogged)
								if (West == West::None) return 26248;
								else if (West == West::Low) return 26249;
								else return 26250;
							else
								if (West == West::None) return 26251;
								else if (West == West::Low) return 26252;
								else return 26253;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26254;
								else if (West == West::Low) return 26255;
								else return 26256;
							else
								if (West == West::None) return 26257;
								else if (West == West::Low) return 26258;
								else return 26259;
						else
							if (Waterlogged)
								if (West == West::None) return 26260;
								else if (West == West::Low) return 26261;
								else return 26262;
							else
								if (West == West::None) return 26263;
								else if (West == West::Low) return 26264;
								else return 26265;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26266;
								else if (West == West::Low) return 26267;
								else return 26268;
							else
								if (West == West::None) return 26269;
								else if (West == West::Low) return 26270;
								else return 26271;
						else
							if (Waterlogged)
								if (West == West::None) return 26272;
								else if (West == West::Low) return 26273;
								else return 26274;
							else
								if (West == West::None) return 26275;
								else if (West == West::Low) return 26276;
								else return 26277;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26278;
								else if (West == West::Low) return 26279;
								else return 26280;
							else
								if (West == West::None) return 26281;
								else if (West == West::Low) return 26282;
								else return 26283;
						else
							if (Waterlogged)
								if (West == West::None) return 26284;
								else if (West == West::Low) return 26285;
								else return 26286;
							else
								if (West == West::None) return 26287;
								else if (West == West::Low) return 26288;
								else return 26289;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26290;
								else if (West == West::Low) return 26291;
								else return 26292;
							else
								if (West == West::None) return 26293;
								else if (West == West::Low) return 26294;
								else return 26295;
						else
							if (Waterlogged)
								if (West == West::None) return 26296;
								else if (West == West::Low) return 26297;
								else return 26298;
							else
								if (West == West::None) return 26299;
								else if (West == West::Low) return 26300;
								else return 26301;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26302;
								else if (West == West::Low) return 26303;
								else return 26304;
							else
								if (West == West::None) return 26305;
								else if (West == West::Low) return 26306;
								else return 26307;
						else
							if (Waterlogged)
								if (West == West::None) return 26308;
								else if (West == West::Low) return 26309;
								else return 26310;
							else
								if (West == West::None) return 26311;
								else if (West == West::Low) return 26312;
								else return 26313;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26314;
								else if (West == West::Low) return 26315;
								else return 26316;
							else
								if (West == West::None) return 26317;
								else if (West == West::Low) return 26318;
								else return 26319;
						else
							if (Waterlogged)
								if (West == West::None) return 26320;
								else if (West == West::Low) return 26321;
								else return 26322;
							else
								if (West == West::None) return 26323;
								else if (West == West::Low) return 26324;
								else return 26325;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26326;
								else if (West == West::Low) return 26327;
								else return 26328;
							else
								if (West == West::None) return 26329;
								else if (West == West::Low) return 26330;
								else return 26331;
						else
							if (Waterlogged)
								if (West == West::None) return 26332;
								else if (West == West::Low) return 26333;
								else return 26334;
							else
								if (West == West::None) return 26335;
								else if (West == West::Low) return 26336;
								else return 26337;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26338;
								else if (West == West::Low) return 26339;
								else return 26340;
							else
								if (West == West::None) return 26341;
								else if (West == West::Low) return 26342;
								else return 26343;
						else
							if (Waterlogged)
								if (West == West::None) return 26344;
								else if (West == West::Low) return 26345;
								else return 26346;
							else
								if (West == West::None) return 26347;
								else if (West == West::Low) return 26348;
								else return 26349;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26350;
								else if (West == West::Low) return 26351;
								else return 26352;
							else
								if (West == West::None) return 26353;
								else if (West == West::Low) return 26354;
								else return 26355;
						else
							if (Waterlogged)
								if (West == West::None) return 26356;
								else if (West == West::Low) return 26357;
								else return 26358;
							else
								if (West == West::None) return 26359;
								else if (West == West::Low) return 26360;
								else return 26361;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26362;
								else if (West == West::Low) return 26363;
								else return 26364;
							else
								if (West == West::None) return 26365;
								else if (West == West::Low) return 26366;
								else return 26367;
						else
							if (Waterlogged)
								if (West == West::None) return 26368;
								else if (West == West::Low) return 26369;
								else return 26370;
							else
								if (West == West::None) return 26371;
								else if (West == West::Low) return 26372;
								else return 26373;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26374;
								else if (West == West::Low) return 26375;
								else return 26376;
							else
								if (West == West::None) return 26377;
								else if (West == West::Low) return 26378;
								else return 26379;
						else
							if (Waterlogged)
								if (West == West::None) return 26380;
								else if (West == West::Low) return 26381;
								else return 26382;
							else
								if (West == West::None) return 26383;
								else if (West == West::Low) return 26384;
								else return 26385;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26386;
								else if (West == West::Low) return 26387;
								else return 26388;
							else
								if (West == West::None) return 26389;
								else if (West == West::Low) return 26390;
								else return 26391;
						else
							if (Waterlogged)
								if (West == West::None) return 26392;
								else if (West == West::Low) return 26393;
								else return 26394;
							else
								if (West == West::None) return 26395;
								else if (West == West::Low) return 26396;
								else return 26397;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26398;
								else if (West == West::Low) return 26399;
								else return 26400;
							else
								if (West == West::None) return 26401;
								else if (West == West::Low) return 26402;
								else return 26403;
						else
							if (Waterlogged)
								if (West == West::None) return 26404;
								else if (West == West::Low) return 26405;
								else return 26406;
							else
								if (West == West::None) return 26407;
								else if (West == West::Low) return 26408;
								else return 26409;
		}
		BlockState CobbledDeepslateWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace Cobblestone
	{
		constexpr BlockState Cobblestone()
		{
			return 14;
		}
	}
	namespace CobblestoneSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState CobblestoneSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 12147;
				else return 12148;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 12149;
				else return 12150;
			else
				if (Waterlogged) return 12151;
				else return 12152;
		}
		BlockState CobblestoneSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CobblestoneStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState CobblestoneStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 4778;
						else return 4779;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 4780;
						else return 4781;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 4782;
						else return 4783;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 4784;
						else return 4785;
					else
						if (Waterlogged) return 4786;
						else return 4787;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 4788;
						else return 4789;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 4790;
						else return 4791;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 4792;
						else return 4793;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 4794;
						else return 4795;
					else
						if (Waterlogged) return 4796;
						else return 4797;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 4798;
						else return 4799;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 4800;
						else return 4801;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 4802;
						else return 4803;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 4804;
						else return 4805;
					else
						if (Waterlogged) return 4806;
						else return 4807;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 4808;
						else return 4809;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 4810;
						else return 4811;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 4812;
						else return 4813;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 4814;
						else return 4815;
					else
						if (Waterlogged) return 4816;
						else return 4817;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 4818;
						else return 4819;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 4820;
						else return 4821;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 4822;
						else return 4823;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 4824;
						else return 4825;
					else
						if (Waterlogged) return 4826;
						else return 4827;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 4828;
						else return 4829;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 4830;
						else return 4831;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 4832;
						else return 4833;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 4834;
						else return 4835;
					else
						if (Waterlogged) return 4836;
						else return 4837;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 4838;
						else return 4839;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 4840;
						else return 4841;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 4842;
						else return 4843;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 4844;
						else return 4845;
					else
						if (Waterlogged) return 4846;
						else return 4847;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 4848;
						else return 4849;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 4850;
						else return 4851;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 4852;
						else return 4853;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 4854;
						else return 4855;
					else
						if (Waterlogged) return 4856;
						else return 4857;
		}
		BlockState CobblestoneStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CobblestoneWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState CobblestoneWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8703;
								else if (West == West::Low) return 8704;
								else return 8705;
							else
								if (West == West::None) return 8706;
								else if (West == West::Low) return 8707;
								else return 8708;
						else
							if (Waterlogged)
								if (West == West::None) return 8709;
								else if (West == West::Low) return 8710;
								else return 8711;
							else
								if (West == West::None) return 8712;
								else if (West == West::Low) return 8713;
								else return 8714;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8715;
								else if (West == West::Low) return 8716;
								else return 8717;
							else
								if (West == West::None) return 8718;
								else if (West == West::Low) return 8719;
								else return 8720;
						else
							if (Waterlogged)
								if (West == West::None) return 8721;
								else if (West == West::Low) return 8722;
								else return 8723;
							else
								if (West == West::None) return 8724;
								else if (West == West::Low) return 8725;
								else return 8726;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8727;
								else if (West == West::Low) return 8728;
								else return 8729;
							else
								if (West == West::None) return 8730;
								else if (West == West::Low) return 8731;
								else return 8732;
						else
							if (Waterlogged)
								if (West == West::None) return 8733;
								else if (West == West::Low) return 8734;
								else return 8735;
							else
								if (West == West::None) return 8736;
								else if (West == West::Low) return 8737;
								else return 8738;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8739;
								else if (West == West::Low) return 8740;
								else return 8741;
							else
								if (West == West::None) return 8742;
								else if (West == West::Low) return 8743;
								else return 8744;
						else
							if (Waterlogged)
								if (West == West::None) return 8745;
								else if (West == West::Low) return 8746;
								else return 8747;
							else
								if (West == West::None) return 8748;
								else if (West == West::Low) return 8749;
								else return 8750;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8751;
								else if (West == West::Low) return 8752;
								else return 8753;
							else
								if (West == West::None) return 8754;
								else if (West == West::Low) return 8755;
								else return 8756;
						else
							if (Waterlogged)
								if (West == West::None) return 8757;
								else if (West == West::Low) return 8758;
								else return 8759;
							else
								if (West == West::None) return 8760;
								else if (West == West::Low) return 8761;
								else return 8762;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8763;
								else if (West == West::Low) return 8764;
								else return 8765;
							else
								if (West == West::None) return 8766;
								else if (West == West::Low) return 8767;
								else return 8768;
						else
							if (Waterlogged)
								if (West == West::None) return 8769;
								else if (West == West::Low) return 8770;
								else return 8771;
							else
								if (West == West::None) return 8772;
								else if (West == West::Low) return 8773;
								else return 8774;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8775;
								else if (West == West::Low) return 8776;
								else return 8777;
							else
								if (West == West::None) return 8778;
								else if (West == West::Low) return 8779;
								else return 8780;
						else
							if (Waterlogged)
								if (West == West::None) return 8781;
								else if (West == West::Low) return 8782;
								else return 8783;
							else
								if (West == West::None) return 8784;
								else if (West == West::Low) return 8785;
								else return 8786;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8787;
								else if (West == West::Low) return 8788;
								else return 8789;
							else
								if (West == West::None) return 8790;
								else if (West == West::Low) return 8791;
								else return 8792;
						else
							if (Waterlogged)
								if (West == West::None) return 8793;
								else if (West == West::Low) return 8794;
								else return 8795;
							else
								if (West == West::None) return 8796;
								else if (West == West::Low) return 8797;
								else return 8798;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8799;
								else if (West == West::Low) return 8800;
								else return 8801;
							else
								if (West == West::None) return 8802;
								else if (West == West::Low) return 8803;
								else return 8804;
						else
							if (Waterlogged)
								if (West == West::None) return 8805;
								else if (West == West::Low) return 8806;
								else return 8807;
							else
								if (West == West::None) return 8808;
								else if (West == West::Low) return 8809;
								else return 8810;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8811;
								else if (West == West::Low) return 8812;
								else return 8813;
							else
								if (West == West::None) return 8814;
								else if (West == West::Low) return 8815;
								else return 8816;
						else
							if (Waterlogged)
								if (West == West::None) return 8817;
								else if (West == West::Low) return 8818;
								else return 8819;
							else
								if (West == West::None) return 8820;
								else if (West == West::Low) return 8821;
								else return 8822;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8823;
								else if (West == West::Low) return 8824;
								else return 8825;
							else
								if (West == West::None) return 8826;
								else if (West == West::Low) return 8827;
								else return 8828;
						else
							if (Waterlogged)
								if (West == West::None) return 8829;
								else if (West == West::Low) return 8830;
								else return 8831;
							else
								if (West == West::None) return 8832;
								else if (West == West::Low) return 8833;
								else return 8834;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8835;
								else if (West == West::Low) return 8836;
								else return 8837;
							else
								if (West == West::None) return 8838;
								else if (West == West::Low) return 8839;
								else return 8840;
						else
							if (Waterlogged)
								if (West == West::None) return 8841;
								else if (West == West::Low) return 8842;
								else return 8843;
							else
								if (West == West::None) return 8844;
								else if (West == West::Low) return 8845;
								else return 8846;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8847;
								else if (West == West::Low) return 8848;
								else return 8849;
							else
								if (West == West::None) return 8850;
								else if (West == West::Low) return 8851;
								else return 8852;
						else
							if (Waterlogged)
								if (West == West::None) return 8853;
								else if (West == West::Low) return 8854;
								else return 8855;
							else
								if (West == West::None) return 8856;
								else if (West == West::Low) return 8857;
								else return 8858;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8859;
								else if (West == West::Low) return 8860;
								else return 8861;
							else
								if (West == West::None) return 8862;
								else if (West == West::Low) return 8863;
								else return 8864;
						else
							if (Waterlogged)
								if (West == West::None) return 8865;
								else if (West == West::Low) return 8866;
								else return 8867;
							else
								if (West == West::None) return 8868;
								else if (West == West::Low) return 8869;
								else return 8870;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8871;
								else if (West == West::Low) return 8872;
								else return 8873;
							else
								if (West == West::None) return 8874;
								else if (West == West::Low) return 8875;
								else return 8876;
						else
							if (Waterlogged)
								if (West == West::None) return 8877;
								else if (West == West::Low) return 8878;
								else return 8879;
							else
								if (West == West::None) return 8880;
								else if (West == West::Low) return 8881;
								else return 8882;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8883;
								else if (West == West::Low) return 8884;
								else return 8885;
							else
								if (West == West::None) return 8886;
								else if (West == West::Low) return 8887;
								else return 8888;
						else
							if (Waterlogged)
								if (West == West::None) return 8889;
								else if (West == West::Low) return 8890;
								else return 8891;
							else
								if (West == West::None) return 8892;
								else if (West == West::Low) return 8893;
								else return 8894;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8895;
								else if (West == West::Low) return 8896;
								else return 8897;
							else
								if (West == West::None) return 8898;
								else if (West == West::Low) return 8899;
								else return 8900;
						else
							if (Waterlogged)
								if (West == West::None) return 8901;
								else if (West == West::Low) return 8902;
								else return 8903;
							else
								if (West == West::None) return 8904;
								else if (West == West::Low) return 8905;
								else return 8906;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8907;
								else if (West == West::Low) return 8908;
								else return 8909;
							else
								if (West == West::None) return 8910;
								else if (West == West::Low) return 8911;
								else return 8912;
						else
							if (Waterlogged)
								if (West == West::None) return 8913;
								else if (West == West::Low) return 8914;
								else return 8915;
							else
								if (West == West::None) return 8916;
								else if (West == West::Low) return 8917;
								else return 8918;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8919;
								else if (West == West::Low) return 8920;
								else return 8921;
							else
								if (West == West::None) return 8922;
								else if (West == West::Low) return 8923;
								else return 8924;
						else
							if (Waterlogged)
								if (West == West::None) return 8925;
								else if (West == West::Low) return 8926;
								else return 8927;
							else
								if (West == West::None) return 8928;
								else if (West == West::Low) return 8929;
								else return 8930;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8931;
								else if (West == West::Low) return 8932;
								else return 8933;
							else
								if (West == West::None) return 8934;
								else if (West == West::Low) return 8935;
								else return 8936;
						else
							if (Waterlogged)
								if (West == West::None) return 8937;
								else if (West == West::Low) return 8938;
								else return 8939;
							else
								if (West == West::None) return 8940;
								else if (West == West::Low) return 8941;
								else return 8942;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8943;
								else if (West == West::Low) return 8944;
								else return 8945;
							else
								if (West == West::None) return 8946;
								else if (West == West::Low) return 8947;
								else return 8948;
						else
							if (Waterlogged)
								if (West == West::None) return 8949;
								else if (West == West::Low) return 8950;
								else return 8951;
							else
								if (West == West::None) return 8952;
								else if (West == West::Low) return 8953;
								else return 8954;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8955;
								else if (West == West::Low) return 8956;
								else return 8957;
							else
								if (West == West::None) return 8958;
								else if (West == West::Low) return 8959;
								else return 8960;
						else
							if (Waterlogged)
								if (West == West::None) return 8961;
								else if (West == West::Low) return 8962;
								else return 8963;
							else
								if (West == West::None) return 8964;
								else if (West == West::Low) return 8965;
								else return 8966;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8967;
								else if (West == West::Low) return 8968;
								else return 8969;
							else
								if (West == West::None) return 8970;
								else if (West == West::Low) return 8971;
								else return 8972;
						else
							if (Waterlogged)
								if (West == West::None) return 8973;
								else if (West == West::Low) return 8974;
								else return 8975;
							else
								if (West == West::None) return 8976;
								else if (West == West::Low) return 8977;
								else return 8978;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8979;
								else if (West == West::Low) return 8980;
								else return 8981;
							else
								if (West == West::None) return 8982;
								else if (West == West::Low) return 8983;
								else return 8984;
						else
							if (Waterlogged)
								if (West == West::None) return 8985;
								else if (West == West::Low) return 8986;
								else return 8987;
							else
								if (West == West::None) return 8988;
								else if (West == West::Low) return 8989;
								else return 8990;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8991;
								else if (West == West::Low) return 8992;
								else return 8993;
							else
								if (West == West::None) return 8994;
								else if (West == West::Low) return 8995;
								else return 8996;
						else
							if (Waterlogged)
								if (West == West::None) return 8997;
								else if (West == West::Low) return 8998;
								else return 8999;
							else
								if (West == West::None) return 9000;
								else if (West == West::Low) return 9001;
								else return 9002;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9003;
								else if (West == West::Low) return 9004;
								else return 9005;
							else
								if (West == West::None) return 9006;
								else if (West == West::Low) return 9007;
								else return 9008;
						else
							if (Waterlogged)
								if (West == West::None) return 9009;
								else if (West == West::Low) return 9010;
								else return 9011;
							else
								if (West == West::None) return 9012;
								else if (West == West::Low) return 9013;
								else return 9014;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9015;
								else if (West == West::Low) return 9016;
								else return 9017;
							else
								if (West == West::None) return 9018;
								else if (West == West::Low) return 9019;
								else return 9020;
						else
							if (Waterlogged)
								if (West == West::None) return 9021;
								else if (West == West::Low) return 9022;
								else return 9023;
							else
								if (West == West::None) return 9024;
								else if (West == West::Low) return 9025;
								else return 9026;
		}
		BlockState CobblestoneWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace Cobweb
	{
		constexpr BlockState Cobweb()
		{
			return 2047;
		}
	}
	namespace Cocoa
	{
		constexpr BlockState Cocoa(const unsigned char Age, const eBlockFace Facing)
		{
			if (Age == 0)
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 8203;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 8204;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 8205;
				else return 8206;
			else if (Age == 1)
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 8207;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 8208;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 8209;
				else return 8210;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 8211;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 8212;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 8213;
				else return 8214;
		}
		BlockState Cocoa();
		unsigned char Age(BlockState Block);
		eBlockFace Facing(BlockState Block);
	}
	namespace CommandBlock
	{
		constexpr BlockState CommandBlock(const bool Conditional, const eBlockFace Facing)
		{
			if (Conditional)
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 8690;
				else if (Facing == eBlockFace::BLOCK_FACE_XP) return 8691;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 8692;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 8693;
				else if (Facing == eBlockFace::BLOCK_FACE_YP) return 8694;
				else return 8695;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 8696;
				else if (Facing == eBlockFace::BLOCK_FACE_XP) return 8697;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 8698;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 8699;
				else if (Facing == eBlockFace::BLOCK_FACE_YP) return 8700;
				else return 8701;
		}
		BlockState CommandBlock();
		bool Conditional(BlockState Block);
		eBlockFace Facing(BlockState Block);
	}
	namespace Comparator
	{
		enum class Mode
		{
			Compare,
			Subtract,
		};
		constexpr BlockState Comparator(const eBlockFace Facing, const enum Mode Mode, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Mode == Mode::Compare)
					if (Powered) return 9984;
					else return 9985;
				else
					if (Powered) return 9986;
					else return 9987;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Mode == Mode::Compare)
					if (Powered) return 9988;
					else return 9989;
				else
					if (Powered) return 9990;
					else return 9991;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Mode == Mode::Compare)
					if (Powered) return 9992;
					else return 9993;
				else
					if (Powered) return 9994;
					else return 9995;
			else
				if (Mode == Mode::Compare)
					if (Powered) return 9996;
					else return 9997;
				else
					if (Powered) return 9998;
					else return 9999;
		}
		BlockState Comparator();
		eBlockFace Facing(BlockState Block);
		enum Mode Mode(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace Composter
	{
		constexpr BlockState Composter(const unsigned char Level)
		{
			if (Level == 0) return 20432;
			else if (Level == 1) return 20433;
			else if (Level == 2) return 20434;
			else if (Level == 3) return 20435;
			else if (Level == 4) return 20436;
			else if (Level == 5) return 20437;
			else if (Level == 6) return 20438;
			else if (Level == 7) return 20439;
			else return 20440;
		}
		BlockState Composter();
		unsigned char Level(BlockState Block);
	}
	namespace Conduit
	{
		constexpr BlockState Conduit(const bool Waterlogged)
		{
			if (Waterlogged) return 13997;
			else return 13998;
		}
		BlockState Conduit();
		bool Waterlogged(BlockState Block);
	}
	namespace CopperBlock
	{
		constexpr BlockState CopperBlock()
		{
			return 23998;
		}
	}
	namespace CopperBulb
	{
		constexpr BlockState CopperBulb(const bool Lit, const bool Powered)
		{
			if (Lit)
				if (Powered) return 25752;
				else return 25753;
			else
				if (Powered) return 25754;
				else return 25755;
		}
		BlockState CopperBulb();
		bool Lit(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace CopperDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState CopperDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24712;
							else return 24713;
						else
							if (Powered) return 24714;
							else return 24715;
					else
						if (Open)
							if (Powered) return 24716;
							else return 24717;
						else
							if (Powered) return 24718;
							else return 24719;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24720;
							else return 24721;
						else
							if (Powered) return 24722;
							else return 24723;
					else
						if (Open)
							if (Powered) return 24724;
							else return 24725;
						else
							if (Powered) return 24726;
							else return 24727;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24728;
							else return 24729;
						else
							if (Powered) return 24730;
							else return 24731;
					else
						if (Open)
							if (Powered) return 24732;
							else return 24733;
						else
							if (Powered) return 24734;
							else return 24735;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24736;
							else return 24737;
						else
							if (Powered) return 24738;
							else return 24739;
					else
						if (Open)
							if (Powered) return 24740;
							else return 24741;
						else
							if (Powered) return 24742;
							else return 24743;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24744;
							else return 24745;
						else
							if (Powered) return 24746;
							else return 24747;
					else
						if (Open)
							if (Powered) return 24748;
							else return 24749;
						else
							if (Powered) return 24750;
							else return 24751;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24752;
							else return 24753;
						else
							if (Powered) return 24754;
							else return 24755;
					else
						if (Open)
							if (Powered) return 24756;
							else return 24757;
						else
							if (Powered) return 24758;
							else return 24759;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24760;
							else return 24761;
						else
							if (Powered) return 24762;
							else return 24763;
					else
						if (Open)
							if (Powered) return 24764;
							else return 24765;
						else
							if (Powered) return 24766;
							else return 24767;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24768;
							else return 24769;
						else
							if (Powered) return 24770;
							else return 24771;
					else
						if (Open)
							if (Powered) return 24772;
							else return 24773;
						else
							if (Powered) return 24774;
							else return 24775;
		}
		BlockState CopperDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace CopperGrate
	{
		constexpr BlockState CopperGrate(const bool Waterlogged)
		{
			if (Waterlogged) return 25736;
			else return 25737;
		}
		BlockState CopperGrate();
		bool Waterlogged(BlockState Block);
	}
	namespace CopperOre
	{
		constexpr BlockState CopperOre()
		{
			return 24002;
		}
	}
	namespace CopperTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState CopperTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25224;
							else return 25225;
						else
							if (Waterlogged) return 25226;
							else return 25227;
					else
						if (Powered)
							if (Waterlogged) return 25228;
							else return 25229;
						else
							if (Waterlogged) return 25230;
							else return 25231;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25232;
							else return 25233;
						else
							if (Waterlogged) return 25234;
							else return 25235;
					else
						if (Powered)
							if (Waterlogged) return 25236;
							else return 25237;
						else
							if (Waterlogged) return 25238;
							else return 25239;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25240;
							else return 25241;
						else
							if (Waterlogged) return 25242;
							else return 25243;
					else
						if (Powered)
							if (Waterlogged) return 25244;
							else return 25245;
						else
							if (Waterlogged) return 25246;
							else return 25247;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25248;
							else return 25249;
						else
							if (Waterlogged) return 25250;
							else return 25251;
					else
						if (Powered)
							if (Waterlogged) return 25252;
							else return 25253;
						else
							if (Waterlogged) return 25254;
							else return 25255;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25256;
							else return 25257;
						else
							if (Waterlogged) return 25258;
							else return 25259;
					else
						if (Powered)
							if (Waterlogged) return 25260;
							else return 25261;
						else
							if (Waterlogged) return 25262;
							else return 25263;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25264;
							else return 25265;
						else
							if (Waterlogged) return 25266;
							else return 25267;
					else
						if (Powered)
							if (Waterlogged) return 25268;
							else return 25269;
						else
							if (Waterlogged) return 25270;
							else return 25271;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25272;
							else return 25273;
						else
							if (Waterlogged) return 25274;
							else return 25275;
					else
						if (Powered)
							if (Waterlogged) return 25276;
							else return 25277;
						else
							if (Waterlogged) return 25278;
							else return 25279;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25280;
							else return 25281;
						else
							if (Waterlogged) return 25282;
							else return 25283;
					else
						if (Powered)
							if (Waterlogged) return 25284;
							else return 25285;
						else
							if (Waterlogged) return 25286;
							else return 25287;
		}
		BlockState CopperTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Cornflower
	{
		constexpr BlockState Cornflower()
		{
			return 2132;
		}
	}
	namespace CrackedDeepslateBricks
	{
		constexpr BlockState CrackedDeepslateBricks()
		{
			return 27644;
		}
	}
	namespace CrackedDeepslateTiles
	{
		constexpr BlockState CrackedDeepslateTiles()
		{
			return 27645;
		}
	}
	namespace CrackedNetherBricks
	{
		constexpr BlockState CrackedNetherBricks()
		{
			return 21783;
		}
	}
	namespace CrackedPolishedBlackstoneBricks
	{
		constexpr BlockState CrackedPolishedBlackstoneBricks()
		{
			return 20933;
		}
	}
	namespace CrackedStoneBricks
	{
		constexpr BlockState CrackedStoneBricks()
		{
			return 6782;
		}
	}
	namespace Crafter
	{
		enum class Orientation
		{
			DownEast,
			DownNorth,
			DownSouth,
			DownWest,
			UpEast,
			UpNorth,
			UpSouth,
			UpWest,
			WestUp,
			EastUp,
			NorthUp,
			SouthUp,
		};
		constexpr BlockState Crafter(const bool Crafting, const enum Orientation Orientation, const bool Triggered)
		{
			if (Crafting)
				if (Orientation == Orientation::DownEast)
					if (Triggered) return 27682;
					else return 27683;
				else if (Orientation == Orientation::DownNorth)
					if (Triggered) return 27684;
					else return 27685;
				else if (Orientation == Orientation::DownSouth)
					if (Triggered) return 27686;
					else return 27687;
				else if (Orientation == Orientation::DownWest)
					if (Triggered) return 27688;
					else return 27689;
				else if (Orientation == Orientation::UpEast)
					if (Triggered) return 27690;
					else return 27691;
				else if (Orientation == Orientation::UpNorth)
					if (Triggered) return 27692;
					else return 27693;
				else if (Orientation == Orientation::UpSouth)
					if (Triggered) return 27694;
					else return 27695;
				else if (Orientation == Orientation::UpWest)
					if (Triggered) return 27696;
					else return 27697;
				else if (Orientation == Orientation::WestUp)
					if (Triggered) return 27698;
					else return 27699;
				else if (Orientation == Orientation::EastUp)
					if (Triggered) return 27700;
					else return 27701;
				else if (Orientation == Orientation::NorthUp)
					if (Triggered) return 27702;
					else return 27703;
				else
					if (Triggered) return 27704;
					else return 27705;
			else
				if (Orientation == Orientation::DownEast)
					if (Triggered) return 27706;
					else return 27707;
				else if (Orientation == Orientation::DownNorth)
					if (Triggered) return 27708;
					else return 27709;
				else if (Orientation == Orientation::DownSouth)
					if (Triggered) return 27710;
					else return 27711;
				else if (Orientation == Orientation::DownWest)
					if (Triggered) return 27712;
					else return 27713;
				else if (Orientation == Orientation::UpEast)
					if (Triggered) return 27714;
					else return 27715;
				else if (Orientation == Orientation::UpNorth)
					if (Triggered) return 27716;
					else return 27717;
				else if (Orientation == Orientation::UpSouth)
					if (Triggered) return 27718;
					else return 27719;
				else if (Orientation == Orientation::UpWest)
					if (Triggered) return 27720;
					else return 27721;
				else if (Orientation == Orientation::WestUp)
					if (Triggered) return 27722;
					else return 27723;
				else if (Orientation == Orientation::EastUp)
					if (Triggered) return 27724;
					else return 27725;
				else if (Orientation == Orientation::NorthUp)
					if (Triggered) return 27726;
					else return 27727;
				else
					if (Triggered) return 27728;
					else return 27729;
		}
		BlockState Crafter();
		bool Crafting(BlockState Block);
		enum Orientation Orientation(BlockState Block);
		bool Triggered(BlockState Block);
	}
	namespace CraftingTable
	{
		constexpr BlockState CraftingTable()
		{
			return 4341;
		}
	}
	namespace CreakingHeart
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		enum class CreakingHeartState
		{
			Uprooted,
			Dormant,
			Awake,
		};
		constexpr BlockState CreakingHeart(const enum Axis Axis, const enum CreakingHeartState CreakingHeartState, const bool Natural)
		{
			if (Axis == Axis::X)
				if (CreakingHeartState == CreakingHeartState::Uprooted)
					if (Natural) return 2920;
					else return 2921;
				else if (CreakingHeartState == CreakingHeartState::Dormant)
					if (Natural) return 2922;
					else return 2923;
				else
					if (Natural) return 2924;
					else return 2925;
			else if (Axis == Axis::Y)
				if (CreakingHeartState == CreakingHeartState::Uprooted)
					if (Natural) return 2926;
					else return 2927;
				else if (CreakingHeartState == CreakingHeartState::Dormant)
					if (Natural) return 2928;
					else return 2929;
				else
					if (Natural) return 2930;
					else return 2931;
			else
				if (CreakingHeartState == CreakingHeartState::Uprooted)
					if (Natural) return 2932;
					else return 2933;
				else if (CreakingHeartState == CreakingHeartState::Dormant)
					if (Natural) return 2934;
					else return 2935;
				else
					if (Natural) return 2936;
					else return 2937;
		}
		BlockState CreakingHeart();
		enum Axis Axis(BlockState Block);
		enum CreakingHeartState CreakingHeartState(BlockState Block);
		bool Natural(BlockState Block);
	}
	namespace CreeperHead
	{
		constexpr BlockState CreeperHead(const bool Powered, const unsigned char Rotation)
		{
			if (Powered)
				if (Rotation == 0) return 9796;
				else if (Rotation == 1) return 9797;
				else if (Rotation == 2) return 9798;
				else if (Rotation == 3) return 9799;
				else if (Rotation == 4) return 9800;
				else if (Rotation == 5) return 9801;
				else if (Rotation == 6) return 9802;
				else if (Rotation == 7) return 9803;
				else if (Rotation == 8) return 9804;
				else if (Rotation == 9) return 9805;
				else if (Rotation == 10) return 9806;
				else if (Rotation == 11) return 9807;
				else if (Rotation == 12) return 9808;
				else if (Rotation == 13) return 9809;
				else if (Rotation == 14) return 9810;
				else return 9811;
			else
				if (Rotation == 0) return 9812;
				else if (Rotation == 1) return 9813;
				else if (Rotation == 2) return 9814;
				else if (Rotation == 3) return 9815;
				else if (Rotation == 4) return 9816;
				else if (Rotation == 5) return 9817;
				else if (Rotation == 6) return 9818;
				else if (Rotation == 7) return 9819;
				else if (Rotation == 8) return 9820;
				else if (Rotation == 9) return 9821;
				else if (Rotation == 10) return 9822;
				else if (Rotation == 11) return 9823;
				else if (Rotation == 12) return 9824;
				else if (Rotation == 13) return 9825;
				else if (Rotation == 14) return 9826;
				else return 9827;
		}
		BlockState CreeperHead();
		bool Powered(BlockState Block);
		unsigned char Rotation(BlockState Block);
	}
	namespace CreeperWallHead
	{
		constexpr BlockState CreeperWallHead(const eBlockFace Facing, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Powered) return 9828;
				else return 9829;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Powered) return 9830;
				else return 9831;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Powered) return 9832;
				else return 9833;
			else
				if (Powered) return 9834;
				else return 9835;
		}
		BlockState CreeperWallHead();
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace CrimsonButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState CrimsonButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 20155;
					else return 20156;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 20157;
					else return 20158;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 20159;
					else return 20160;
				else
					if (Powered) return 20161;
					else return 20162;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 20163;
					else return 20164;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 20165;
					else return 20166;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 20167;
					else return 20168;
				else
					if (Powered) return 20169;
					else return 20170;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 20171;
					else return 20172;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 20173;
					else return 20174;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 20175;
					else return 20176;
				else
					if (Powered) return 20177;
					else return 20178;
		}
		BlockState CrimsonButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace CrimsonDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState CrimsonDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 20203;
							else return 20204;
						else
							if (Powered) return 20205;
							else return 20206;
					else
						if (Open)
							if (Powered) return 20207;
							else return 20208;
						else
							if (Powered) return 20209;
							else return 20210;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 20211;
							else return 20212;
						else
							if (Powered) return 20213;
							else return 20214;
					else
						if (Open)
							if (Powered) return 20215;
							else return 20216;
						else
							if (Powered) return 20217;
							else return 20218;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 20219;
							else return 20220;
						else
							if (Powered) return 20221;
							else return 20222;
					else
						if (Open)
							if (Powered) return 20223;
							else return 20224;
						else
							if (Powered) return 20225;
							else return 20226;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 20227;
							else return 20228;
						else
							if (Powered) return 20229;
							else return 20230;
					else
						if (Open)
							if (Powered) return 20231;
							else return 20232;
						else
							if (Powered) return 20233;
							else return 20234;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 20235;
							else return 20236;
						else
							if (Powered) return 20237;
							else return 20238;
					else
						if (Open)
							if (Powered) return 20239;
							else return 20240;
						else
							if (Powered) return 20241;
							else return 20242;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 20243;
							else return 20244;
						else
							if (Powered) return 20245;
							else return 20246;
					else
						if (Open)
							if (Powered) return 20247;
							else return 20248;
						else
							if (Powered) return 20249;
							else return 20250;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 20251;
							else return 20252;
						else
							if (Powered) return 20253;
							else return 20254;
					else
						if (Open)
							if (Powered) return 20255;
							else return 20256;
						else
							if (Powered) return 20257;
							else return 20258;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 20259;
							else return 20260;
						else
							if (Powered) return 20261;
							else return 20262;
					else
						if (Open)
							if (Powered) return 20263;
							else return 20264;
						else
							if (Powered) return 20265;
							else return 20266;
		}
		BlockState CrimsonDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace CrimsonFence
	{
		constexpr BlockState CrimsonFence(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 19739;
							else return 19740;
						else
							if (West) return 19741;
							else return 19742;
					else
						if (Waterlogged)
							if (West) return 19743;
							else return 19744;
						else
							if (West) return 19745;
							else return 19746;
				else
					if (South)
						if (Waterlogged)
							if (West) return 19747;
							else return 19748;
						else
							if (West) return 19749;
							else return 19750;
					else
						if (Waterlogged)
							if (West) return 19751;
							else return 19752;
						else
							if (West) return 19753;
							else return 19754;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 19755;
							else return 19756;
						else
							if (West) return 19757;
							else return 19758;
					else
						if (Waterlogged)
							if (West) return 19759;
							else return 19760;
						else
							if (West) return 19761;
							else return 19762;
				else
					if (South)
						if (Waterlogged)
							if (West) return 19763;
							else return 19764;
						else
							if (West) return 19765;
							else return 19766;
					else
						if (Waterlogged)
							if (West) return 19767;
							else return 19768;
						else
							if (West) return 19769;
							else return 19770;
		}
		BlockState CrimsonFence();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace CrimsonFenceGate
	{
		constexpr BlockState CrimsonFenceGate(const eBlockFace Facing, const bool InWall, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (InWall)
					if (Open)
						if (Powered) return 19931;
						else return 19932;
					else
						if (Powered) return 19933;
						else return 19934;
				else
					if (Open)
						if (Powered) return 19935;
						else return 19936;
					else
						if (Powered) return 19937;
						else return 19938;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (InWall)
					if (Open)
						if (Powered) return 19939;
						else return 19940;
					else
						if (Powered) return 19941;
						else return 19942;
				else
					if (Open)
						if (Powered) return 19943;
						else return 19944;
					else
						if (Powered) return 19945;
						else return 19946;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (InWall)
					if (Open)
						if (Powered) return 19947;
						else return 19948;
					else
						if (Powered) return 19949;
						else return 19950;
				else
					if (Open)
						if (Powered) return 19951;
						else return 19952;
					else
						if (Powered) return 19953;
						else return 19954;
			else
				if (InWall)
					if (Open)
						if (Powered) return 19955;
						else return 19956;
					else
						if (Powered) return 19957;
						else return 19958;
				else
					if (Open)
						if (Powered) return 19959;
						else return 19960;
					else
						if (Powered) return 19961;
						else return 19962;
		}
		BlockState CrimsonFenceGate();
		eBlockFace Facing(BlockState Block);
		bool InWall(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace CrimsonFungus
	{
		constexpr BlockState CrimsonFungus()
		{
			return 19664;
		}
	}
	namespace CrimsonHangingSign
	{
		constexpr BlockState CrimsonHangingSign(const bool Attached, const unsigned char Rotation, const bool Waterlogged)
		{
			if (Attached)
				if (Rotation == 0)
					if (Waterlogged) return 5450;
					else return 5451;
				else if (Rotation == 1)
					if (Waterlogged) return 5452;
					else return 5453;
				else if (Rotation == 2)
					if (Waterlogged) return 5454;
					else return 5455;
				else if (Rotation == 3)
					if (Waterlogged) return 5456;
					else return 5457;
				else if (Rotation == 4)
					if (Waterlogged) return 5458;
					else return 5459;
				else if (Rotation == 5)
					if (Waterlogged) return 5460;
					else return 5461;
				else if (Rotation == 6)
					if (Waterlogged) return 5462;
					else return 5463;
				else if (Rotation == 7)
					if (Waterlogged) return 5464;
					else return 5465;
				else if (Rotation == 8)
					if (Waterlogged) return 5466;
					else return 5467;
				else if (Rotation == 9)
					if (Waterlogged) return 5468;
					else return 5469;
				else if (Rotation == 10)
					if (Waterlogged) return 5470;
					else return 5471;
				else if (Rotation == 11)
					if (Waterlogged) return 5472;
					else return 5473;
				else if (Rotation == 12)
					if (Waterlogged) return 5474;
					else return 5475;
				else if (Rotation == 13)
					if (Waterlogged) return 5476;
					else return 5477;
				else if (Rotation == 14)
					if (Waterlogged) return 5478;
					else return 5479;
				else
					if (Waterlogged) return 5480;
					else return 5481;
			else
				if (Rotation == 0)
					if (Waterlogged) return 5482;
					else return 5483;
				else if (Rotation == 1)
					if (Waterlogged) return 5484;
					else return 5485;
				else if (Rotation == 2)
					if (Waterlogged) return 5486;
					else return 5487;
				else if (Rotation == 3)
					if (Waterlogged) return 5488;
					else return 5489;
				else if (Rotation == 4)
					if (Waterlogged) return 5490;
					else return 5491;
				else if (Rotation == 5)
					if (Waterlogged) return 5492;
					else return 5493;
				else if (Rotation == 6)
					if (Waterlogged) return 5494;
					else return 5495;
				else if (Rotation == 7)
					if (Waterlogged) return 5496;
					else return 5497;
				else if (Rotation == 8)
					if (Waterlogged) return 5498;
					else return 5499;
				else if (Rotation == 9)
					if (Waterlogged) return 5500;
					else return 5501;
				else if (Rotation == 10)
					if (Waterlogged) return 5502;
					else return 5503;
				else if (Rotation == 11)
					if (Waterlogged) return 5504;
					else return 5505;
				else if (Rotation == 12)
					if (Waterlogged) return 5506;
					else return 5507;
				else if (Rotation == 13)
					if (Waterlogged) return 5508;
					else return 5509;
				else if (Rotation == 14)
					if (Waterlogged) return 5510;
					else return 5511;
				else
					if (Waterlogged) return 5512;
					else return 5513;
		}
		BlockState CrimsonHangingSign();
		bool Attached(BlockState Block);
		unsigned char Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CrimsonHyphae
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState CrimsonHyphae(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 19657;
			else if (Axis == Axis::Y) return 19658;
			else return 19659;
		}
		BlockState CrimsonHyphae();
		enum Axis Axis(BlockState Block);
	}
	namespace CrimsonNylium
	{
		constexpr BlockState CrimsonNylium()
		{
			return 19663;
		}
	}
	namespace CrimsonPlanks
	{
		constexpr BlockState CrimsonPlanks()
		{
			return 19721;
		}
	}
	namespace CrimsonPressurePlate
	{
		constexpr BlockState CrimsonPressurePlate(const bool Powered)
		{
			if (Powered) return 19735;
			else return 19736;
		}
		BlockState CrimsonPressurePlate();
		bool Powered(BlockState Block);
	}
	namespace CrimsonRoots
	{
		constexpr BlockState CrimsonRoots()
		{
			return 19720;
		}
	}
	namespace CrimsonSign
	{
		constexpr BlockState CrimsonSign(const unsigned char Rotation, const bool Waterlogged)
		{
			if (Rotation == 0)
				if (Waterlogged) return 20331;
				else return 20332;
			else if (Rotation == 1)
				if (Waterlogged) return 20333;
				else return 20334;
			else if (Rotation == 2)
				if (Waterlogged) return 20335;
				else return 20336;
			else if (Rotation == 3)
				if (Waterlogged) return 20337;
				else return 20338;
			else if (Rotation == 4)
				if (Waterlogged) return 20339;
				else return 20340;
			else if (Rotation == 5)
				if (Waterlogged) return 20341;
				else return 20342;
			else if (Rotation == 6)
				if (Waterlogged) return 20343;
				else return 20344;
			else if (Rotation == 7)
				if (Waterlogged) return 20345;
				else return 20346;
			else if (Rotation == 8)
				if (Waterlogged) return 20347;
				else return 20348;
			else if (Rotation == 9)
				if (Waterlogged) return 20349;
				else return 20350;
			else if (Rotation == 10)
				if (Waterlogged) return 20351;
				else return 20352;
			else if (Rotation == 11)
				if (Waterlogged) return 20353;
				else return 20354;
			else if (Rotation == 12)
				if (Waterlogged) return 20355;
				else return 20356;
			else if (Rotation == 13)
				if (Waterlogged) return 20357;
				else return 20358;
			else if (Rotation == 14)
				if (Waterlogged) return 20359;
				else return 20360;
			else
				if (Waterlogged) return 20361;
				else return 20362;
		}
		BlockState CrimsonSign();
		unsigned char Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CrimsonSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState CrimsonSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 19723;
				else return 19724;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 19725;
				else return 19726;
			else
				if (Waterlogged) return 19727;
				else return 19728;
		}
		BlockState CrimsonSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CrimsonStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState CrimsonStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19995;
						else return 19996;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19997;
						else return 19998;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19999;
						else return 20000;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20001;
						else return 20002;
					else
						if (Waterlogged) return 20003;
						else return 20004;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20005;
						else return 20006;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20007;
						else return 20008;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20009;
						else return 20010;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20011;
						else return 20012;
					else
						if (Waterlogged) return 20013;
						else return 20014;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20015;
						else return 20016;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20017;
						else return 20018;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20019;
						else return 20020;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20021;
						else return 20022;
					else
						if (Waterlogged) return 20023;
						else return 20024;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20025;
						else return 20026;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20027;
						else return 20028;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20029;
						else return 20030;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20031;
						else return 20032;
					else
						if (Waterlogged) return 20033;
						else return 20034;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20035;
						else return 20036;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20037;
						else return 20038;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20039;
						else return 20040;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20041;
						else return 20042;
					else
						if (Waterlogged) return 20043;
						else return 20044;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20045;
						else return 20046;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20047;
						else return 20048;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20049;
						else return 20050;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20051;
						else return 20052;
					else
						if (Waterlogged) return 20053;
						else return 20054;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20055;
						else return 20056;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20057;
						else return 20058;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20059;
						else return 20060;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20061;
						else return 20062;
					else
						if (Waterlogged) return 20063;
						else return 20064;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20065;
						else return 20066;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20067;
						else return 20068;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20069;
						else return 20070;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20071;
						else return 20072;
					else
						if (Waterlogged) return 20073;
						else return 20074;
		}
		BlockState CrimsonStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CrimsonStem
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState CrimsonStem(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 19651;
			else if (Axis == Axis::Y) return 19652;
			else return 19653;
		}
		BlockState CrimsonStem();
		enum Axis Axis(BlockState Block);
	}
	namespace CrimsonTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState CrimsonTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 19803;
							else return 19804;
						else
							if (Waterlogged) return 19805;
							else return 19806;
					else
						if (Powered)
							if (Waterlogged) return 19807;
							else return 19808;
						else
							if (Waterlogged) return 19809;
							else return 19810;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 19811;
							else return 19812;
						else
							if (Waterlogged) return 19813;
							else return 19814;
					else
						if (Powered)
							if (Waterlogged) return 19815;
							else return 19816;
						else
							if (Waterlogged) return 19817;
							else return 19818;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 19819;
							else return 19820;
						else
							if (Waterlogged) return 19821;
							else return 19822;
					else
						if (Powered)
							if (Waterlogged) return 19823;
							else return 19824;
						else
							if (Waterlogged) return 19825;
							else return 19826;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 19827;
							else return 19828;
						else
							if (Waterlogged) return 19829;
							else return 19830;
					else
						if (Powered)
							if (Waterlogged) return 19831;
							else return 19832;
						else
							if (Waterlogged) return 19833;
							else return 19834;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 19835;
							else return 19836;
						else
							if (Waterlogged) return 19837;
							else return 19838;
					else
						if (Powered)
							if (Waterlogged) return 19839;
							else return 19840;
						else
							if (Waterlogged) return 19841;
							else return 19842;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 19843;
							else return 19844;
						else
							if (Waterlogged) return 19845;
							else return 19846;
					else
						if (Powered)
							if (Waterlogged) return 19847;
							else return 19848;
						else
							if (Waterlogged) return 19849;
							else return 19850;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 19851;
							else return 19852;
						else
							if (Waterlogged) return 19853;
							else return 19854;
					else
						if (Powered)
							if (Waterlogged) return 19855;
							else return 19856;
						else
							if (Waterlogged) return 19857;
							else return 19858;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 19859;
							else return 19860;
						else
							if (Waterlogged) return 19861;
							else return 19862;
					else
						if (Powered)
							if (Waterlogged) return 19863;
							else return 19864;
						else
							if (Waterlogged) return 19865;
							else return 19866;
		}
		BlockState CrimsonTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CrimsonWallHangingSign
	{
		constexpr BlockState CrimsonWallHangingSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 5778;
				else return 5779;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 5780;
				else return 5781;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 5782;
				else return 5783;
			else
				if (Waterlogged) return 5784;
				else return 5785;
		}
		BlockState CrimsonWallHangingSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CrimsonWallSign
	{
		constexpr BlockState CrimsonWallSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 20395;
				else return 20396;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 20397;
				else return 20398;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 20399;
				else return 20400;
			else
				if (Waterlogged) return 20401;
				else return 20402;
		}
		BlockState CrimsonWallSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CryingObsidian
	{
		constexpr BlockState CryingObsidian()
		{
			return 20509;
		}
	}
	namespace CutCopper
	{
		constexpr BlockState CutCopper()
		{
			return 24007;
		}
	}
	namespace CutCopperSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState CutCopperSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 24354;
				else return 24355;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 24356;
				else return 24357;
			else
				if (Waterlogged) return 24358;
				else return 24359;
		}
		BlockState CutCopperSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CutCopperStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState CutCopperStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24256;
						else return 24257;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24258;
						else return 24259;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24260;
						else return 24261;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24262;
						else return 24263;
					else
						if (Waterlogged) return 24264;
						else return 24265;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24266;
						else return 24267;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24268;
						else return 24269;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24270;
						else return 24271;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24272;
						else return 24273;
					else
						if (Waterlogged) return 24274;
						else return 24275;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24276;
						else return 24277;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24278;
						else return 24279;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24280;
						else return 24281;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24282;
						else return 24283;
					else
						if (Waterlogged) return 24284;
						else return 24285;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24286;
						else return 24287;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24288;
						else return 24289;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24290;
						else return 24291;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24292;
						else return 24293;
					else
						if (Waterlogged) return 24294;
						else return 24295;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24296;
						else return 24297;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24298;
						else return 24299;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24300;
						else return 24301;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24302;
						else return 24303;
					else
						if (Waterlogged) return 24304;
						else return 24305;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24306;
						else return 24307;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24308;
						else return 24309;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24310;
						else return 24311;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24312;
						else return 24313;
					else
						if (Waterlogged) return 24314;
						else return 24315;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24316;
						else return 24317;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24318;
						else return 24319;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24320;
						else return 24321;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24322;
						else return 24323;
					else
						if (Waterlogged) return 24324;
						else return 24325;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24326;
						else return 24327;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24328;
						else return 24329;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24330;
						else return 24331;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24332;
						else return 24333;
					else
						if (Waterlogged) return 24334;
						else return 24335;
		}
		BlockState CutCopperStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CutRedSandstone
	{
		constexpr BlockState CutRedSandstone()
		{
			return 11970;
		}
	}
	namespace CutRedSandstoneSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState CutRedSandstoneSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 12189;
				else return 12190;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 12191;
				else return 12192;
			else
				if (Waterlogged) return 12193;
				else return 12194;
		}
		BlockState CutRedSandstoneSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CutSandstone
	{
		constexpr BlockState CutSandstone()
		{
			return 580;
		}
	}
	namespace CutSandstoneSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState CutSandstoneSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 12135;
				else return 12136;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 12137;
				else return 12138;
			else
				if (Waterlogged) return 12139;
				else return 12140;
		}
		BlockState CutSandstoneSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CyanBanner
	{
		constexpr BlockState CyanBanner(const unsigned char Rotation)
		{
			if (Rotation == 0) return 11792;
			else if (Rotation == 1) return 11793;
			else if (Rotation == 2) return 11794;
			else if (Rotation == 3) return 11795;
			else if (Rotation == 4) return 11796;
			else if (Rotation == 5) return 11797;
			else if (Rotation == 6) return 11798;
			else if (Rotation == 7) return 11799;
			else if (Rotation == 8) return 11800;
			else if (Rotation == 9) return 11801;
			else if (Rotation == 10) return 11802;
			else if (Rotation == 11) return 11803;
			else if (Rotation == 12) return 11804;
			else if (Rotation == 13) return 11805;
			else if (Rotation == 14) return 11806;
			else return 11807;
		}
		BlockState CyanBanner();
		unsigned char Rotation(BlockState Block);
	}
	namespace CyanBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState CyanBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1875;
					else return 1876;
				else
					if (Part == Part::Head) return 1877;
					else return 1878;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1879;
					else return 1880;
				else
					if (Part == Part::Head) return 1881;
					else return 1882;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1883;
					else return 1884;
				else
					if (Part == Part::Head) return 1885;
					else return 1886;
			else
				if (Occupied)
					if (Part == Part::Head) return 1887;
					else return 1888;
				else
					if (Part == Part::Head) return 1889;
					else return 1890;
		}
		BlockState CyanBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace CyanCandle
	{
		constexpr BlockState CyanCandle(const unsigned char Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 21945;
					else return 21946;
				else
					if (Waterlogged) return 21947;
					else return 21948;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 21949;
					else return 21950;
				else
					if (Waterlogged) return 21951;
					else return 21952;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 21953;
					else return 21954;
				else
					if (Waterlogged) return 21955;
					else return 21956;
			else
				if (Lit)
					if (Waterlogged) return 21957;
					else return 21958;
				else
					if (Waterlogged) return 21959;
					else return 21960;
		}
		BlockState CyanCandle();
		unsigned char Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CyanCandleCake
	{
		constexpr BlockState CyanCandleCake(const bool Lit)
		{
			if (Lit) return 22077;
			else return 22078;
		}
		BlockState CyanCandleCake();
		bool Lit(BlockState Block);
	}
	namespace CyanCarpet
	{
		constexpr BlockState CyanCarpet()
		{
			return 11626;
		}
	}
	namespace CyanConcrete
	{
		constexpr BlockState CyanConcrete()
		{
			return 13760;
		}
	}
	namespace CyanConcretePowder
	{
		constexpr BlockState CyanConcretePowder()
		{
			return 13776;
		}
	}
	namespace CyanGlazedTerracotta
	{
		constexpr BlockState CyanGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13723;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13724;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13725;
			else return 13726;
		}
		BlockState CyanGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace CyanShulkerBox
	{
		constexpr BlockState CyanShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13645;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 13646;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13647;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13648;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 13649;
			else return 13650;
		}
		BlockState CyanShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace CyanStainedGlass
	{
		constexpr BlockState CyanStainedGlass()
		{
			return 6133;
		}
	}
	namespace CyanStainedGlassPane
	{
		constexpr BlockState CyanStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10469;
							else return 10470;
						else
							if (West) return 10471;
							else return 10472;
					else
						if (Waterlogged)
							if (West) return 10473;
							else return 10474;
						else
							if (West) return 10475;
							else return 10476;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10477;
							else return 10478;
						else
							if (West) return 10479;
							else return 10480;
					else
						if (Waterlogged)
							if (West) return 10481;
							else return 10482;
						else
							if (West) return 10483;
							else return 10484;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10485;
							else return 10486;
						else
							if (West) return 10487;
							else return 10488;
					else
						if (Waterlogged)
							if (West) return 10489;
							else return 10490;
						else
							if (West) return 10491;
							else return 10492;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10493;
							else return 10494;
						else
							if (West) return 10495;
							else return 10496;
					else
						if (Waterlogged)
							if (West) return 10497;
							else return 10498;
						else
							if (West) return 10499;
							else return 10500;
		}
		BlockState CyanStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace CyanTerracotta
	{
		constexpr BlockState CyanTerracotta()
		{
			return 10174;
		}
	}
	namespace CyanWallBanner
	{
		constexpr BlockState CyanWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11940;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11941;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11942;
			else return 11943;
		}
		BlockState CyanWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace CyanWool
	{
		constexpr BlockState CyanWool()
		{
			return 2102;
		}
	}
	namespace DamagedAnvil
	{
		constexpr BlockState DamagedAnvil(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 9924;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 9925;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 9926;
			else return 9927;
		}
		BlockState DamagedAnvil();
		eBlockFace Facing(BlockState Block);
	}
	namespace Dandelion
	{
		constexpr BlockState Dandelion()
		{
			return 2121;
		}
	}
	namespace DarkOakButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState DarkOakButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9540;
					else return 9541;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9542;
					else return 9543;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9544;
					else return 9545;
				else
					if (Powered) return 9546;
					else return 9547;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9548;
					else return 9549;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9550;
					else return 9551;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9552;
					else return 9553;
				else
					if (Powered) return 9554;
					else return 9555;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9556;
					else return 9557;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9558;
					else return 9559;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9560;
					else return 9561;
				else
					if (Powered) return 9562;
					else return 9563;
		}
		BlockState DarkOakButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace DarkOakDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState DarkOakDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13101;
							else return 13102;
						else
							if (Powered) return 13103;
							else return 13104;
					else
						if (Open)
							if (Powered) return 13105;
							else return 13106;
						else
							if (Powered) return 13107;
							else return 13108;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13109;
							else return 13110;
						else
							if (Powered) return 13111;
							else return 13112;
					else
						if (Open)
							if (Powered) return 13113;
							else return 13114;
						else
							if (Powered) return 13115;
							else return 13116;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13117;
							else return 13118;
						else
							if (Powered) return 13119;
							else return 13120;
					else
						if (Open)
							if (Powered) return 13121;
							else return 13122;
						else
							if (Powered) return 13123;
							else return 13124;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13125;
							else return 13126;
						else
							if (Powered) return 13127;
							else return 13128;
					else
						if (Open)
							if (Powered) return 13129;
							else return 13130;
						else
							if (Powered) return 13131;
							else return 13132;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13133;
							else return 13134;
						else
							if (Powered) return 13135;
							else return 13136;
					else
						if (Open)
							if (Powered) return 13137;
							else return 13138;
						else
							if (Powered) return 13139;
							else return 13140;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13141;
							else return 13142;
						else
							if (Powered) return 13143;
							else return 13144;
					else
						if (Open)
							if (Powered) return 13145;
							else return 13146;
						else
							if (Powered) return 13147;
							else return 13148;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13149;
							else return 13150;
						else
							if (Powered) return 13151;
							else return 13152;
					else
						if (Open)
							if (Powered) return 13153;
							else return 13154;
						else
							if (Powered) return 13155;
							else return 13156;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13157;
							else return 13158;
						else
							if (Powered) return 13159;
							else return 13160;
					else
						if (Open)
							if (Powered) return 13161;
							else return 13162;
						else
							if (Powered) return 13163;
							else return 13164;
		}
		BlockState DarkOakDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace DarkOakFence
	{
		constexpr BlockState DarkOakFence(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 12653;
							else return 12654;
						else
							if (West) return 12655;
							else return 12656;
					else
						if (Waterlogged)
							if (West) return 12657;
							else return 12658;
						else
							if (West) return 12659;
							else return 12660;
				else
					if (South)
						if (Waterlogged)
							if (West) return 12661;
							else return 12662;
						else
							if (West) return 12663;
							else return 12664;
					else
						if (Waterlogged)
							if (West) return 12665;
							else return 12666;
						else
							if (West) return 12667;
							else return 12668;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 12669;
							else return 12670;
						else
							if (West) return 12671;
							else return 12672;
					else
						if (Waterlogged)
							if (West) return 12673;
							else return 12674;
						else
							if (West) return 12675;
							else return 12676;
				else
					if (South)
						if (Waterlogged)
							if (West) return 12677;
							else return 12678;
						else
							if (West) return 12679;
							else return 12680;
					else
						if (Waterlogged)
							if (West) return 12681;
							else return 12682;
						else
							if (West) return 12683;
							else return 12684;
		}
		BlockState DarkOakFence();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace DarkOakFenceGate
	{
		constexpr BlockState DarkOakFenceGate(const eBlockFace Facing, const bool InWall, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (InWall)
					if (Open)
						if (Powered) return 12365;
						else return 12366;
					else
						if (Powered) return 12367;
						else return 12368;
				else
					if (Open)
						if (Powered) return 12369;
						else return 12370;
					else
						if (Powered) return 12371;
						else return 12372;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (InWall)
					if (Open)
						if (Powered) return 12373;
						else return 12374;
					else
						if (Powered) return 12375;
						else return 12376;
				else
					if (Open)
						if (Powered) return 12377;
						else return 12378;
					else
						if (Powered) return 12379;
						else return 12380;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (InWall)
					if (Open)
						if (Powered) return 12381;
						else return 12382;
					else
						if (Powered) return 12383;
						else return 12384;
				else
					if (Open)
						if (Powered) return 12385;
						else return 12386;
					else
						if (Powered) return 12387;
						else return 12388;
			else
				if (InWall)
					if (Open)
						if (Powered) return 12389;
						else return 12390;
					else
						if (Powered) return 12391;
						else return 12392;
				else
					if (Open)
						if (Powered) return 12393;
						else return 12394;
					else
						if (Powered) return 12395;
						else return 12396;
		}
		BlockState DarkOakFenceGate();
		eBlockFace Facing(BlockState Block);
		bool InWall(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace DarkOakHangingSign
	{
		constexpr BlockState DarkOakHangingSign(const bool Attached, const unsigned char Rotation, const bool Waterlogged)
		{
			if (Attached)
				if (Rotation == 0)
					if (Waterlogged) return 5322;
					else return 5323;
				else if (Rotation == 1)
					if (Waterlogged) return 5324;
					else return 5325;
				else if (Rotation == 2)
					if (Waterlogged) return 5326;
					else return 5327;
				else if (Rotation == 3)
					if (Waterlogged) return 5328;
					else return 5329;
				else if (Rotation == 4)
					if (Waterlogged) return 5330;
					else return 5331;
				else if (Rotation == 5)
					if (Waterlogged) return 5332;
					else return 5333;
				else if (Rotation == 6)
					if (Waterlogged) return 5334;
					else return 5335;
				else if (Rotation == 7)
					if (Waterlogged) return 5336;
					else return 5337;
				else if (Rotation == 8)
					if (Waterlogged) return 5338;
					else return 5339;
				else if (Rotation == 9)
					if (Waterlogged) return 5340;
					else return 5341;
				else if (Rotation == 10)
					if (Waterlogged) return 5342;
					else return 5343;
				else if (Rotation == 11)
					if (Waterlogged) return 5344;
					else return 5345;
				else if (Rotation == 12)
					if (Waterlogged) return 5346;
					else return 5347;
				else if (Rotation == 13)
					if (Waterlogged) return 5348;
					else return 5349;
				else if (Rotation == 14)
					if (Waterlogged) return 5350;
					else return 5351;
				else
					if (Waterlogged) return 5352;
					else return 5353;
			else
				if (Rotation == 0)
					if (Waterlogged) return 5354;
					else return 5355;
				else if (Rotation == 1)
					if (Waterlogged) return 5356;
					else return 5357;
				else if (Rotation == 2)
					if (Waterlogged) return 5358;
					else return 5359;
				else if (Rotation == 3)
					if (Waterlogged) return 5360;
					else return 5361;
				else if (Rotation == 4)
					if (Waterlogged) return 5362;
					else return 5363;
				else if (Rotation == 5)
					if (Waterlogged) return 5364;
					else return 5365;
				else if (Rotation == 6)
					if (Waterlogged) return 5366;
					else return 5367;
				else if (Rotation == 7)
					if (Waterlogged) return 5368;
					else return 5369;
				else if (Rotation == 8)
					if (Waterlogged) return 5370;
					else return 5371;
				else if (Rotation == 9)
					if (Waterlogged) return 5372;
					else return 5373;
				else if (Rotation == 10)
					if (Waterlogged) return 5374;
					else return 5375;
				else if (Rotation == 11)
					if (Waterlogged) return 5376;
					else return 5377;
				else if (Rotation == 12)
					if (Waterlogged) return 5378;
					else return 5379;
				else if (Rotation == 13)
					if (Waterlogged) return 5380;
					else return 5381;
				else if (Rotation == 14)
					if (Waterlogged) return 5382;
					else return 5383;
				else
					if (Waterlogged) return 5384;
					else return 5385;
		}
		BlockState DarkOakHangingSign();
		bool Attached(BlockState Block);
		unsigned char Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DarkOakLeaves
	{
		constexpr BlockState DarkOakLeaves(const unsigned char Distance, const bool Persistent, const bool Waterlogged)
		{
			if (Distance == 1)
				if (Persistent)
					if (Waterlogged) return 420;
					else return 421;
				else
					if (Waterlogged) return 422;
					else return 423;
			else if (Distance == 2)
				if (Persistent)
					if (Waterlogged) return 424;
					else return 425;
				else
					if (Waterlogged) return 426;
					else return 427;
			else if (Distance == 3)
				if (Persistent)
					if (Waterlogged) return 428;
					else return 429;
				else
					if (Waterlogged) return 430;
					else return 431;
			else if (Distance == 4)
				if (Persistent)
					if (Waterlogged) return 432;
					else return 433;
				else
					if (Waterlogged) return 434;
					else return 435;
			else if (Distance == 5)
				if (Persistent)
					if (Waterlogged) return 436;
					else return 437;
				else
					if (Waterlogged) return 438;
					else return 439;
			else if (Distance == 6)
				if (Persistent)
					if (Waterlogged) return 440;
					else return 441;
				else
					if (Waterlogged) return 442;
					else return 443;
			else
				if (Persistent)
					if (Waterlogged) return 444;
					else return 445;
				else
					if (Waterlogged) return 446;
					else return 447;
		}
		BlockState DarkOakLeaves();
		unsigned char Distance(BlockState Block);
		bool Persistent(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DarkOakLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState DarkOakLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 154;
			else if (Axis == Axis::Y) return 155;
			else return 156;
		}
		BlockState DarkOakLog();
		enum Axis Axis(BlockState Block);
	}
	namespace DarkOakPlanks
	{
		constexpr BlockState DarkOakPlanks()
		{
			return 21;
		}
	}
	namespace DarkOakPressurePlate
	{
		constexpr BlockState DarkOakPressurePlate(const bool Powered)
		{
			if (Powered) return 5904;
			else return 5905;
		}
		BlockState DarkOakPressurePlate();
		bool Powered(BlockState Block);
	}
	namespace DarkOakSapling
	{
		constexpr BlockState DarkOakSapling(const unsigned char Stage)
		{
			if (Stage == 0) return 41;
			else return 42;
		}
		BlockState DarkOakSapling();
		unsigned char Stage(BlockState Block);
	}
	namespace DarkOakSign
	{
		constexpr BlockState DarkOakSign(const unsigned char Rotation, const bool Waterlogged)
		{
			if (Rotation == 0)
				if (Waterlogged) return 4558;
				else return 4559;
			else if (Rotation == 1)
				if (Waterlogged) return 4560;
				else return 4561;
			else if (Rotation == 2)
				if (Waterlogged) return 4562;
				else return 4563;
			else if (Rotation == 3)
				if (Waterlogged) return 4564;
				else return 4565;
			else if (Rotation == 4)
				if (Waterlogged) return 4566;
				else return 4567;
			else if (Rotation == 5)
				if (Waterlogged) return 4568;
				else return 4569;
			else if (Rotation == 6)
				if (Waterlogged) return 4570;
				else return 4571;
			else if (Rotation == 7)
				if (Waterlogged) return 4572;
				else return 4573;
			else if (Rotation == 8)
				if (Waterlogged) return 4574;
				else return 4575;
			else if (Rotation == 9)
				if (Waterlogged) return 4576;
				else return 4577;
			else if (Rotation == 10)
				if (Waterlogged) return 4578;
				else return 4579;
			else if (Rotation == 11)
				if (Waterlogged) return 4580;
				else return 4581;
			else if (Rotation == 12)
				if (Waterlogged) return 4582;
				else return 4583;
			else if (Rotation == 13)
				if (Waterlogged) return 4584;
				else return 4585;
			else if (Rotation == 14)
				if (Waterlogged) return 4586;
				else return 4587;
			else
				if (Waterlogged) return 4588;
				else return 4589;
		}
		BlockState DarkOakSign();
		unsigned char Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DarkOakSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState DarkOakSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 12087;
				else return 12088;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 12089;
				else return 12090;
			else
				if (Waterlogged) return 12091;
				else return 12092;
		}
		BlockState DarkOakSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DarkOakStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState DarkOakStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10853;
						else return 10854;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10855;
						else return 10856;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10857;
						else return 10858;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10859;
						else return 10860;
					else
						if (Waterlogged) return 10861;
						else return 10862;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10863;
						else return 10864;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10865;
						else return 10866;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10867;
						else return 10868;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10869;
						else return 10870;
					else
						if (Waterlogged) return 10871;
						else return 10872;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10873;
						else return 10874;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10875;
						else return 10876;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10877;
						else return 10878;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10879;
						else return 10880;
					else
						if (Waterlogged) return 10881;
						else return 10882;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10883;
						else return 10884;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10885;
						else return 10886;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10887;
						else return 10888;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10889;
						else return 10890;
					else
						if (Waterlogged) return 10891;
						else return 10892;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10893;
						else return 10894;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10895;
						else return 10896;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10897;
						else return 10898;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10899;
						else return 10900;
					else
						if (Waterlogged) return 10901;
						else return 10902;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10903;
						else return 10904;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10905;
						else return 10906;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10907;
						else return 10908;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10909;
						else return 10910;
					else
						if (Waterlogged) return 10911;
						else return 10912;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10913;
						else return 10914;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10915;
						else return 10916;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10917;
						else return 10918;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10919;
						else return 10920;
					else
						if (Waterlogged) return 10921;
						else return 10922;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10923;
						else return 10924;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10925;
						else return 10926;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10927;
						else return 10928;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10929;
						else return 10930;
					else
						if (Waterlogged) return 10931;
						else return 10932;
		}
		BlockState DarkOakStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DarkOakTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState DarkOakTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6524;
							else return 6525;
						else
							if (Waterlogged) return 6526;
							else return 6527;
					else
						if (Powered)
							if (Waterlogged) return 6528;
							else return 6529;
						else
							if (Waterlogged) return 6530;
							else return 6531;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6532;
							else return 6533;
						else
							if (Waterlogged) return 6534;
							else return 6535;
					else
						if (Powered)
							if (Waterlogged) return 6536;
							else return 6537;
						else
							if (Waterlogged) return 6538;
							else return 6539;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6540;
							else return 6541;
						else
							if (Waterlogged) return 6542;
							else return 6543;
					else
						if (Powered)
							if (Waterlogged) return 6544;
							else return 6545;
						else
							if (Waterlogged) return 6546;
							else return 6547;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6548;
							else return 6549;
						else
							if (Waterlogged) return 6550;
							else return 6551;
					else
						if (Powered)
							if (Waterlogged) return 6552;
							else return 6553;
						else
							if (Waterlogged) return 6554;
							else return 6555;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6556;
							else return 6557;
						else
							if (Waterlogged) return 6558;
							else return 6559;
					else
						if (Powered)
							if (Waterlogged) return 6560;
							else return 6561;
						else
							if (Waterlogged) return 6562;
							else return 6563;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6564;
							else return 6565;
						else
							if (Waterlogged) return 6566;
							else return 6567;
					else
						if (Powered)
							if (Waterlogged) return 6568;
							else return 6569;
						else
							if (Waterlogged) return 6570;
							else return 6571;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6572;
							else return 6573;
						else
							if (Waterlogged) return 6574;
							else return 6575;
					else
						if (Powered)
							if (Waterlogged) return 6576;
							else return 6577;
						else
							if (Waterlogged) return 6578;
							else return 6579;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6580;
							else return 6581;
						else
							if (Waterlogged) return 6582;
							else return 6583;
					else
						if (Powered)
							if (Waterlogged) return 6584;
							else return 6585;
						else
							if (Waterlogged) return 6586;
							else return 6587;
		}
		BlockState DarkOakTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DarkOakWallHangingSign
	{
		constexpr BlockState DarkOakWallHangingSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 5754;
				else return 5755;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 5756;
				else return 5757;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 5758;
				else return 5759;
			else
				if (Waterlogged) return 5760;
				else return 5761;
		}
		BlockState DarkOakWallHangingSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DarkOakWallSign
	{
		constexpr BlockState DarkOakWallSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 4906;
				else return 4907;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 4908;
				else return 4909;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 4910;
				else return 4911;
			else
				if (Waterlogged) return 4912;
				else return 4913;
		}
		BlockState DarkOakWallSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DarkOakWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState DarkOakWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 219;
			else if (Axis == Axis::Y) return 220;
			else return 221;
		}
		BlockState DarkOakWood();
		enum Axis Axis(BlockState Block);
	}
	namespace DarkPrismarine
	{
		constexpr BlockState DarkPrismarine()
		{
			return 11354;
		}
	}
	namespace DarkPrismarineSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState DarkPrismarineSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11607;
				else return 11608;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11609;
				else return 11610;
			else
				if (Waterlogged) return 11611;
				else return 11612;
		}
		BlockState DarkPrismarineSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DarkPrismarineStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState DarkPrismarineStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11515;
						else return 11516;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11517;
						else return 11518;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11519;
						else return 11520;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11521;
						else return 11522;
					else
						if (Waterlogged) return 11523;
						else return 11524;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11525;
						else return 11526;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11527;
						else return 11528;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11529;
						else return 11530;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11531;
						else return 11532;
					else
						if (Waterlogged) return 11533;
						else return 11534;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11535;
						else return 11536;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11537;
						else return 11538;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11539;
						else return 11540;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11541;
						else return 11542;
					else
						if (Waterlogged) return 11543;
						else return 11544;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11545;
						else return 11546;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11547;
						else return 11548;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11549;
						else return 11550;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11551;
						else return 11552;
					else
						if (Waterlogged) return 11553;
						else return 11554;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11555;
						else return 11556;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11557;
						else return 11558;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11559;
						else return 11560;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11561;
						else return 11562;
					else
						if (Waterlogged) return 11563;
						else return 11564;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11565;
						else return 11566;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11567;
						else return 11568;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11569;
						else return 11570;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11571;
						else return 11572;
					else
						if (Waterlogged) return 11573;
						else return 11574;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11575;
						else return 11576;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11577;
						else return 11578;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11579;
						else return 11580;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11581;
						else return 11582;
					else
						if (Waterlogged) return 11583;
						else return 11584;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11585;
						else return 11586;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11587;
						else return 11588;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11589;
						else return 11590;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11591;
						else return 11592;
					else
						if (Waterlogged) return 11593;
						else return 11594;
		}
		BlockState DarkPrismarineStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DaylightDetector
	{
		constexpr BlockState DaylightDetector(const bool Inverted, const unsigned char Power)
		{
			if (Inverted)
				if (Power == 0) return 10000;
				else if (Power == 1) return 10001;
				else if (Power == 2) return 10002;
				else if (Power == 3) return 10003;
				else if (Power == 4) return 10004;
				else if (Power == 5) return 10005;
				else if (Power == 6) return 10006;
				else if (Power == 7) return 10007;
				else if (Power == 8) return 10008;
				else if (Power == 9) return 10009;
				else if (Power == 10) return 10010;
				else if (Power == 11) return 10011;
				else if (Power == 12) return 10012;
				else if (Power == 13) return 10013;
				else if (Power == 14) return 10014;
				else return 10015;
			else
				if (Power == 0) return 10016;
				else if (Power == 1) return 10017;
				else if (Power == 2) return 10018;
				else if (Power == 3) return 10019;
				else if (Power == 4) return 10020;
				else if (Power == 5) return 10021;
				else if (Power == 6) return 10022;
				else if (Power == 7) return 10023;
				else if (Power == 8) return 10024;
				else if (Power == 9) return 10025;
				else if (Power == 10) return 10026;
				else if (Power == 11) return 10027;
				else if (Power == 12) return 10028;
				else if (Power == 13) return 10029;
				else if (Power == 14) return 10030;
				else return 10031;
		}
		BlockState DaylightDetector();
		bool Inverted(BlockState Block);
		unsigned char Power(BlockState Block);
	}
	namespace DeadBrainCoral
	{
		constexpr BlockState DeadBrainCoral(const bool Waterlogged)
		{
			if (Waterlogged) return 13870;
			else return 13871;
		}
		BlockState DeadBrainCoral();
		bool Waterlogged(BlockState Block);
	}
	namespace DeadBrainCoralBlock
	{
		constexpr BlockState DeadBrainCoralBlock()
		{
			return 13859;
		}
	}
	namespace DeadBrainCoralFan
	{
		constexpr BlockState DeadBrainCoralFan(const bool Waterlogged)
		{
			if (Waterlogged) return 13890;
			else return 13891;
		}
		BlockState DeadBrainCoralFan();
		bool Waterlogged(BlockState Block);
	}
	namespace DeadBrainCoralWallFan
	{
		constexpr BlockState DeadBrainCoralWallFan(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 13916;
				else return 13917;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 13918;
				else return 13919;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 13920;
				else return 13921;
			else
				if (Waterlogged) return 13922;
				else return 13923;
		}
		BlockState DeadBrainCoralWallFan();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DeadBubbleCoral
	{
		constexpr BlockState DeadBubbleCoral(const bool Waterlogged)
		{
			if (Waterlogged) return 13872;
			else return 13873;
		}
		BlockState DeadBubbleCoral();
		bool Waterlogged(BlockState Block);
	}
	namespace DeadBubbleCoralBlock
	{
		constexpr BlockState DeadBubbleCoralBlock()
		{
			return 13860;
		}
	}
	namespace DeadBubbleCoralFan
	{
		constexpr BlockState DeadBubbleCoralFan(const bool Waterlogged)
		{
			if (Waterlogged) return 13892;
			else return 13893;
		}
		BlockState DeadBubbleCoralFan();
		bool Waterlogged(BlockState Block);
	}
	namespace DeadBubbleCoralWallFan
	{
		constexpr BlockState DeadBubbleCoralWallFan(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 13924;
				else return 13925;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 13926;
				else return 13927;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 13928;
				else return 13929;
			else
				if (Waterlogged) return 13930;
				else return 13931;
		}
		BlockState DeadBubbleCoralWallFan();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DeadBush
	{
		constexpr BlockState DeadBush()
		{
			return 2050;
		}
	}
	namespace DeadFireCoral
	{
		constexpr BlockState DeadFireCoral(const bool Waterlogged)
		{
			if (Waterlogged) return 13874;
			else return 13875;
		}
		BlockState DeadFireCoral();
		bool Waterlogged(BlockState Block);
	}
	namespace DeadFireCoralBlock
	{
		constexpr BlockState DeadFireCoralBlock()
		{
			return 13861;
		}
	}
	namespace DeadFireCoralFan
	{
		constexpr BlockState DeadFireCoralFan(const bool Waterlogged)
		{
			if (Waterlogged) return 13894;
			else return 13895;
		}
		BlockState DeadFireCoralFan();
		bool Waterlogged(BlockState Block);
	}
	namespace DeadFireCoralWallFan
	{
		constexpr BlockState DeadFireCoralWallFan(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 13932;
				else return 13933;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 13934;
				else return 13935;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 13936;
				else return 13937;
			else
				if (Waterlogged) return 13938;
				else return 13939;
		}
		BlockState DeadFireCoralWallFan();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DeadHornCoral
	{
		constexpr BlockState DeadHornCoral(const bool Waterlogged)
		{
			if (Waterlogged) return 13876;
			else return 13877;
		}
		BlockState DeadHornCoral();
		bool Waterlogged(BlockState Block);
	}
	namespace DeadHornCoralBlock
	{
		constexpr BlockState DeadHornCoralBlock()
		{
			return 13862;
		}
	}
	namespace DeadHornCoralFan
	{
		constexpr BlockState DeadHornCoralFan(const bool Waterlogged)
		{
			if (Waterlogged) return 13896;
			else return 13897;
		}
		BlockState DeadHornCoralFan();
		bool Waterlogged(BlockState Block);
	}
	namespace DeadHornCoralWallFan
	{
		constexpr BlockState DeadHornCoralWallFan(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 13940;
				else return 13941;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 13942;
				else return 13943;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 13944;
				else return 13945;
			else
				if (Waterlogged) return 13946;
				else return 13947;
		}
		BlockState DeadHornCoralWallFan();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DeadTubeCoral
	{
		constexpr BlockState DeadTubeCoral(const bool Waterlogged)
		{
			if (Waterlogged) return 13868;
			else return 13869;
		}
		BlockState DeadTubeCoral();
		bool Waterlogged(BlockState Block);
	}
	namespace DeadTubeCoralBlock
	{
		constexpr BlockState DeadTubeCoralBlock()
		{
			return 13858;
		}
	}
	namespace DeadTubeCoralFan
	{
		constexpr BlockState DeadTubeCoralFan(const bool Waterlogged)
		{
			if (Waterlogged) return 13888;
			else return 13889;
		}
		BlockState DeadTubeCoralFan();
		bool Waterlogged(BlockState Block);
	}
	namespace DeadTubeCoralWallFan
	{
		constexpr BlockState DeadTubeCoralWallFan(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 13908;
				else return 13909;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 13910;
				else return 13911;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 13912;
				else return 13913;
			else
				if (Waterlogged) return 13914;
				else return 13915;
		}
		BlockState DeadTubeCoralWallFan();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DecoratedPot
	{
		constexpr BlockState DecoratedPot(const bool Cracked, const eBlockFace Facing, const bool Waterlogged)
		{
			if (Cracked)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Waterlogged) return 27666;
					else return 27667;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Waterlogged) return 27668;
					else return 27669;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Waterlogged) return 27670;
					else return 27671;
				else
					if (Waterlogged) return 27672;
					else return 27673;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Waterlogged) return 27674;
					else return 27675;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Waterlogged) return 27676;
					else return 27677;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Waterlogged) return 27678;
					else return 27679;
				else
					if (Waterlogged) return 27680;
					else return 27681;
		}
		BlockState DecoratedPot();
		bool Cracked(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Deepslate
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState Deepslate(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 25996;
			else if (Axis == Axis::Y) return 25997;
			else return 25998;
		}
		BlockState Deepslate();
		enum Axis Axis(BlockState Block);
	}
	namespace DeepslateBrickSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState DeepslateBrickSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 27313;
				else return 27314;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 27315;
				else return 27316;
			else
				if (Waterlogged) return 27317;
				else return 27318;
		}
		BlockState DeepslateBrickSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DeepslateBrickStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState DeepslateBrickStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 27233;
						else return 27234;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 27235;
						else return 27236;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 27237;
						else return 27238;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 27239;
						else return 27240;
					else
						if (Waterlogged) return 27241;
						else return 27242;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 27243;
						else return 27244;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 27245;
						else return 27246;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 27247;
						else return 27248;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 27249;
						else return 27250;
					else
						if (Waterlogged) return 27251;
						else return 27252;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 27253;
						else return 27254;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 27255;
						else return 27256;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 27257;
						else return 27258;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 27259;
						else return 27260;
					else
						if (Waterlogged) return 27261;
						else return 27262;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 27263;
						else return 27264;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 27265;
						else return 27266;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 27267;
						else return 27268;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 27269;
						else return 27270;
					else
						if (Waterlogged) return 27271;
						else return 27272;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 27273;
						else return 27274;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 27275;
						else return 27276;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 27277;
						else return 27278;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 27279;
						else return 27280;
					else
						if (Waterlogged) return 27281;
						else return 27282;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 27283;
						else return 27284;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 27285;
						else return 27286;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 27287;
						else return 27288;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 27289;
						else return 27290;
					else
						if (Waterlogged) return 27291;
						else return 27292;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 27293;
						else return 27294;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 27295;
						else return 27296;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 27297;
						else return 27298;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 27299;
						else return 27300;
					else
						if (Waterlogged) return 27301;
						else return 27302;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 27303;
						else return 27304;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 27305;
						else return 27306;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 27307;
						else return 27308;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 27309;
						else return 27310;
					else
						if (Waterlogged) return 27311;
						else return 27312;
		}
		BlockState DeepslateBrickStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DeepslateBrickWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState DeepslateBrickWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27319;
								else if (West == West::Low) return 27320;
								else return 27321;
							else
								if (West == West::None) return 27322;
								else if (West == West::Low) return 27323;
								else return 27324;
						else
							if (Waterlogged)
								if (West == West::None) return 27325;
								else if (West == West::Low) return 27326;
								else return 27327;
							else
								if (West == West::None) return 27328;
								else if (West == West::Low) return 27329;
								else return 27330;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27331;
								else if (West == West::Low) return 27332;
								else return 27333;
							else
								if (West == West::None) return 27334;
								else if (West == West::Low) return 27335;
								else return 27336;
						else
							if (Waterlogged)
								if (West == West::None) return 27337;
								else if (West == West::Low) return 27338;
								else return 27339;
							else
								if (West == West::None) return 27340;
								else if (West == West::Low) return 27341;
								else return 27342;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27343;
								else if (West == West::Low) return 27344;
								else return 27345;
							else
								if (West == West::None) return 27346;
								else if (West == West::Low) return 27347;
								else return 27348;
						else
							if (Waterlogged)
								if (West == West::None) return 27349;
								else if (West == West::Low) return 27350;
								else return 27351;
							else
								if (West == West::None) return 27352;
								else if (West == West::Low) return 27353;
								else return 27354;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27355;
								else if (West == West::Low) return 27356;
								else return 27357;
							else
								if (West == West::None) return 27358;
								else if (West == West::Low) return 27359;
								else return 27360;
						else
							if (Waterlogged)
								if (West == West::None) return 27361;
								else if (West == West::Low) return 27362;
								else return 27363;
							else
								if (West == West::None) return 27364;
								else if (West == West::Low) return 27365;
								else return 27366;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27367;
								else if (West == West::Low) return 27368;
								else return 27369;
							else
								if (West == West::None) return 27370;
								else if (West == West::Low) return 27371;
								else return 27372;
						else
							if (Waterlogged)
								if (West == West::None) return 27373;
								else if (West == West::Low) return 27374;
								else return 27375;
							else
								if (West == West::None) return 27376;
								else if (West == West::Low) return 27377;
								else return 27378;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27379;
								else if (West == West::Low) return 27380;
								else return 27381;
							else
								if (West == West::None) return 27382;
								else if (West == West::Low) return 27383;
								else return 27384;
						else
							if (Waterlogged)
								if (West == West::None) return 27385;
								else if (West == West::Low) return 27386;
								else return 27387;
							else
								if (West == West::None) return 27388;
								else if (West == West::Low) return 27389;
								else return 27390;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27391;
								else if (West == West::Low) return 27392;
								else return 27393;
							else
								if (West == West::None) return 27394;
								else if (West == West::Low) return 27395;
								else return 27396;
						else
							if (Waterlogged)
								if (West == West::None) return 27397;
								else if (West == West::Low) return 27398;
								else return 27399;
							else
								if (West == West::None) return 27400;
								else if (West == West::Low) return 27401;
								else return 27402;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27403;
								else if (West == West::Low) return 27404;
								else return 27405;
							else
								if (West == West::None) return 27406;
								else if (West == West::Low) return 27407;
								else return 27408;
						else
							if (Waterlogged)
								if (West == West::None) return 27409;
								else if (West == West::Low) return 27410;
								else return 27411;
							else
								if (West == West::None) return 27412;
								else if (West == West::Low) return 27413;
								else return 27414;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27415;
								else if (West == West::Low) return 27416;
								else return 27417;
							else
								if (West == West::None) return 27418;
								else if (West == West::Low) return 27419;
								else return 27420;
						else
							if (Waterlogged)
								if (West == West::None) return 27421;
								else if (West == West::Low) return 27422;
								else return 27423;
							else
								if (West == West::None) return 27424;
								else if (West == West::Low) return 27425;
								else return 27426;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27427;
								else if (West == West::Low) return 27428;
								else return 27429;
							else
								if (West == West::None) return 27430;
								else if (West == West::Low) return 27431;
								else return 27432;
						else
							if (Waterlogged)
								if (West == West::None) return 27433;
								else if (West == West::Low) return 27434;
								else return 27435;
							else
								if (West == West::None) return 27436;
								else if (West == West::Low) return 27437;
								else return 27438;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27439;
								else if (West == West::Low) return 27440;
								else return 27441;
							else
								if (West == West::None) return 27442;
								else if (West == West::Low) return 27443;
								else return 27444;
						else
							if (Waterlogged)
								if (West == West::None) return 27445;
								else if (West == West::Low) return 27446;
								else return 27447;
							else
								if (West == West::None) return 27448;
								else if (West == West::Low) return 27449;
								else return 27450;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27451;
								else if (West == West::Low) return 27452;
								else return 27453;
							else
								if (West == West::None) return 27454;
								else if (West == West::Low) return 27455;
								else return 27456;
						else
							if (Waterlogged)
								if (West == West::None) return 27457;
								else if (West == West::Low) return 27458;
								else return 27459;
							else
								if (West == West::None) return 27460;
								else if (West == West::Low) return 27461;
								else return 27462;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27463;
								else if (West == West::Low) return 27464;
								else return 27465;
							else
								if (West == West::None) return 27466;
								else if (West == West::Low) return 27467;
								else return 27468;
						else
							if (Waterlogged)
								if (West == West::None) return 27469;
								else if (West == West::Low) return 27470;
								else return 27471;
							else
								if (West == West::None) return 27472;
								else if (West == West::Low) return 27473;
								else return 27474;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27475;
								else if (West == West::Low) return 27476;
								else return 27477;
							else
								if (West == West::None) return 27478;
								else if (West == West::Low) return 27479;
								else return 27480;
						else
							if (Waterlogged)
								if (West == West::None) return 27481;
								else if (West == West::Low) return 27482;
								else return 27483;
							else
								if (West == West::None) return 27484;
								else if (West == West::Low) return 27485;
								else return 27486;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27487;
								else if (West == West::Low) return 27488;
								else return 27489;
							else
								if (West == West::None) return 27490;
								else if (West == West::Low) return 27491;
								else return 27492;
						else
							if (Waterlogged)
								if (West == West::None) return 27493;
								else if (West == West::Low) return 27494;
								else return 27495;
							else
								if (West == West::None) return 27496;
								else if (West == West::Low) return 27497;
								else return 27498;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27499;
								else if (West == West::Low) return 27500;
								else return 27501;
							else
								if (West == West::None) return 27502;
								else if (West == West::Low) return 27503;
								else return 27504;
						else
							if (Waterlogged)
								if (West == West::None) return 27505;
								else if (West == West::Low) return 27506;
								else return 27507;
							else
								if (West == West::None) return 27508;
								else if (West == West::Low) return 27509;
								else return 27510;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27511;
								else if (West == West::Low) return 27512;
								else return 27513;
							else
								if (West == West::None) return 27514;
								else if (West == West::Low) return 27515;
								else return 27516;
						else
							if (Waterlogged)
								if (West == West::None) return 27517;
								else if (West == West::Low) return 27518;
								else return 27519;
							else
								if (West == West::None) return 27520;
								else if (West == West::Low) return 27521;
								else return 27522;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27523;
								else if (West == West::Low) return 27524;
								else return 27525;
							else
								if (West == West::None) return 27526;
								else if (West == West::Low) return 27527;
								else return 27528;
						else
							if (Waterlogged)
								if (West == West::None) return 27529;
								else if (West == West::Low) return 27530;
								else return 27531;
							else
								if (West == West::None) return 27532;
								else if (West == West::Low) return 27533;
								else return 27534;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27535;
								else if (West == West::Low) return 27536;
								else return 27537;
							else
								if (West == West::None) return 27538;
								else if (West == West::Low) return 27539;
								else return 27540;
						else
							if (Waterlogged)
								if (West == West::None) return 27541;
								else if (West == West::Low) return 27542;
								else return 27543;
							else
								if (West == West::None) return 27544;
								else if (West == West::Low) return 27545;
								else return 27546;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27547;
								else if (West == West::Low) return 27548;
								else return 27549;
							else
								if (West == West::None) return 27550;
								else if (West == West::Low) return 27551;
								else return 27552;
						else
							if (Waterlogged)
								if (West == West::None) return 27553;
								else if (West == West::Low) return 27554;
								else return 27555;
							else
								if (West == West::None) return 27556;
								else if (West == West::Low) return 27557;
								else return 27558;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27559;
								else if (West == West::Low) return 27560;
								else return 27561;
							else
								if (West == West::None) return 27562;
								else if (West == West::Low) return 27563;
								else return 27564;
						else
							if (Waterlogged)
								if (West == West::None) return 27565;
								else if (West == West::Low) return 27566;
								else return 27567;
							else
								if (West == West::None) return 27568;
								else if (West == West::Low) return 27569;
								else return 27570;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27571;
								else if (West == West::Low) return 27572;
								else return 27573;
							else
								if (West == West::None) return 27574;
								else if (West == West::Low) return 27575;
								else return 27576;
						else
							if (Waterlogged)
								if (West == West::None) return 27577;
								else if (West == West::Low) return 27578;
								else return 27579;
							else
								if (West == West::None) return 27580;
								else if (West == West::Low) return 27581;
								else return 27582;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27583;
								else if (West == West::Low) return 27584;
								else return 27585;
							else
								if (West == West::None) return 27586;
								else if (West == West::Low) return 27587;
								else return 27588;
						else
							if (Waterlogged)
								if (West == West::None) return 27589;
								else if (West == West::Low) return 27590;
								else return 27591;
							else
								if (West == West::None) return 27592;
								else if (West == West::Low) return 27593;
								else return 27594;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27595;
								else if (West == West::Low) return 27596;
								else return 27597;
							else
								if (West == West::None) return 27598;
								else if (West == West::Low) return 27599;
								else return 27600;
						else
							if (Waterlogged)
								if (West == West::None) return 27601;
								else if (West == West::Low) return 27602;
								else return 27603;
							else
								if (West == West::None) return 27604;
								else if (West == West::Low) return 27605;
								else return 27606;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27607;
								else if (West == West::Low) return 27608;
								else return 27609;
							else
								if (West == West::None) return 27610;
								else if (West == West::Low) return 27611;
								else return 27612;
						else
							if (Waterlogged)
								if (West == West::None) return 27613;
								else if (West == West::Low) return 27614;
								else return 27615;
							else
								if (West == West::None) return 27616;
								else if (West == West::Low) return 27617;
								else return 27618;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27619;
								else if (West == West::Low) return 27620;
								else return 27621;
							else
								if (West == West::None) return 27622;
								else if (West == West::Low) return 27623;
								else return 27624;
						else
							if (Waterlogged)
								if (West == West::None) return 27625;
								else if (West == West::Low) return 27626;
								else return 27627;
							else
								if (West == West::None) return 27628;
								else if (West == West::Low) return 27629;
								else return 27630;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27631;
								else if (West == West::Low) return 27632;
								else return 27633;
							else
								if (West == West::None) return 27634;
								else if (West == West::Low) return 27635;
								else return 27636;
						else
							if (Waterlogged)
								if (West == West::None) return 27637;
								else if (West == West::Low) return 27638;
								else return 27639;
							else
								if (West == West::None) return 27640;
								else if (West == West::Low) return 27641;
								else return 27642;
		}
		BlockState DeepslateBrickWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace DeepslateBricks
	{
		constexpr BlockState DeepslateBricks()
		{
			return 27232;
		}
	}
	namespace DeepslateCoalOre
	{
		constexpr BlockState DeepslateCoalOre()
		{
			return 134;
		}
	}
	namespace DeepslateCopperOre
	{
		constexpr BlockState DeepslateCopperOre()
		{
			return 24003;
		}
	}
	namespace DeepslateDiamondOre
	{
		constexpr BlockState DeepslateDiamondOre()
		{
			return 4339;
		}
	}
	namespace DeepslateEmeraldOre
	{
		constexpr BlockState DeepslateEmeraldOre()
		{
			return 8296;
		}
	}
	namespace DeepslateGoldOre
	{
		constexpr BlockState DeepslateGoldOre()
		{
			return 130;
		}
	}
	namespace DeepslateIronOre
	{
		constexpr BlockState DeepslateIronOre()
		{
			return 132;
		}
	}
	namespace DeepslateLapisOre
	{
		constexpr BlockState DeepslateLapisOre()
		{
			return 564;
		}
	}
	namespace DeepslateRedstoneOre
	{
		constexpr BlockState DeepslateRedstoneOre(const bool Lit)
		{
			if (Lit) return 5914;
			else return 5915;
		}
		BlockState DeepslateRedstoneOre();
		bool Lit(BlockState Block);
	}
	namespace DeepslateTileSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState DeepslateTileSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 26902;
				else return 26903;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 26904;
				else return 26905;
			else
				if (Waterlogged) return 26906;
				else return 26907;
		}
		BlockState DeepslateTileSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DeepslateTileStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState DeepslateTileStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26822;
						else return 26823;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26824;
						else return 26825;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26826;
						else return 26827;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26828;
						else return 26829;
					else
						if (Waterlogged) return 26830;
						else return 26831;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26832;
						else return 26833;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26834;
						else return 26835;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26836;
						else return 26837;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26838;
						else return 26839;
					else
						if (Waterlogged) return 26840;
						else return 26841;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26842;
						else return 26843;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26844;
						else return 26845;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26846;
						else return 26847;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26848;
						else return 26849;
					else
						if (Waterlogged) return 26850;
						else return 26851;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26852;
						else return 26853;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26854;
						else return 26855;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26856;
						else return 26857;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26858;
						else return 26859;
					else
						if (Waterlogged) return 26860;
						else return 26861;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26862;
						else return 26863;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26864;
						else return 26865;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26866;
						else return 26867;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26868;
						else return 26869;
					else
						if (Waterlogged) return 26870;
						else return 26871;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26872;
						else return 26873;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26874;
						else return 26875;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26876;
						else return 26877;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26878;
						else return 26879;
					else
						if (Waterlogged) return 26880;
						else return 26881;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26882;
						else return 26883;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26884;
						else return 26885;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26886;
						else return 26887;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26888;
						else return 26889;
					else
						if (Waterlogged) return 26890;
						else return 26891;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26892;
						else return 26893;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26894;
						else return 26895;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26896;
						else return 26897;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26898;
						else return 26899;
					else
						if (Waterlogged) return 26900;
						else return 26901;
		}
		BlockState DeepslateTileStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DeepslateTileWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState DeepslateTileWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26908;
								else if (West == West::Low) return 26909;
								else return 26910;
							else
								if (West == West::None) return 26911;
								else if (West == West::Low) return 26912;
								else return 26913;
						else
							if (Waterlogged)
								if (West == West::None) return 26914;
								else if (West == West::Low) return 26915;
								else return 26916;
							else
								if (West == West::None) return 26917;
								else if (West == West::Low) return 26918;
								else return 26919;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26920;
								else if (West == West::Low) return 26921;
								else return 26922;
							else
								if (West == West::None) return 26923;
								else if (West == West::Low) return 26924;
								else return 26925;
						else
							if (Waterlogged)
								if (West == West::None) return 26926;
								else if (West == West::Low) return 26927;
								else return 26928;
							else
								if (West == West::None) return 26929;
								else if (West == West::Low) return 26930;
								else return 26931;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26932;
								else if (West == West::Low) return 26933;
								else return 26934;
							else
								if (West == West::None) return 26935;
								else if (West == West::Low) return 26936;
								else return 26937;
						else
							if (Waterlogged)
								if (West == West::None) return 26938;
								else if (West == West::Low) return 26939;
								else return 26940;
							else
								if (West == West::None) return 26941;
								else if (West == West::Low) return 26942;
								else return 26943;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26944;
								else if (West == West::Low) return 26945;
								else return 26946;
							else
								if (West == West::None) return 26947;
								else if (West == West::Low) return 26948;
								else return 26949;
						else
							if (Waterlogged)
								if (West == West::None) return 26950;
								else if (West == West::Low) return 26951;
								else return 26952;
							else
								if (West == West::None) return 26953;
								else if (West == West::Low) return 26954;
								else return 26955;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26956;
								else if (West == West::Low) return 26957;
								else return 26958;
							else
								if (West == West::None) return 26959;
								else if (West == West::Low) return 26960;
								else return 26961;
						else
							if (Waterlogged)
								if (West == West::None) return 26962;
								else if (West == West::Low) return 26963;
								else return 26964;
							else
								if (West == West::None) return 26965;
								else if (West == West::Low) return 26966;
								else return 26967;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26968;
								else if (West == West::Low) return 26969;
								else return 26970;
							else
								if (West == West::None) return 26971;
								else if (West == West::Low) return 26972;
								else return 26973;
						else
							if (Waterlogged)
								if (West == West::None) return 26974;
								else if (West == West::Low) return 26975;
								else return 26976;
							else
								if (West == West::None) return 26977;
								else if (West == West::Low) return 26978;
								else return 26979;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26980;
								else if (West == West::Low) return 26981;
								else return 26982;
							else
								if (West == West::None) return 26983;
								else if (West == West::Low) return 26984;
								else return 26985;
						else
							if (Waterlogged)
								if (West == West::None) return 26986;
								else if (West == West::Low) return 26987;
								else return 26988;
							else
								if (West == West::None) return 26989;
								else if (West == West::Low) return 26990;
								else return 26991;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26992;
								else if (West == West::Low) return 26993;
								else return 26994;
							else
								if (West == West::None) return 26995;
								else if (West == West::Low) return 26996;
								else return 26997;
						else
							if (Waterlogged)
								if (West == West::None) return 26998;
								else if (West == West::Low) return 26999;
								else return 27000;
							else
								if (West == West::None) return 27001;
								else if (West == West::Low) return 27002;
								else return 27003;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27004;
								else if (West == West::Low) return 27005;
								else return 27006;
							else
								if (West == West::None) return 27007;
								else if (West == West::Low) return 27008;
								else return 27009;
						else
							if (Waterlogged)
								if (West == West::None) return 27010;
								else if (West == West::Low) return 27011;
								else return 27012;
							else
								if (West == West::None) return 27013;
								else if (West == West::Low) return 27014;
								else return 27015;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27016;
								else if (West == West::Low) return 27017;
								else return 27018;
							else
								if (West == West::None) return 27019;
								else if (West == West::Low) return 27020;
								else return 27021;
						else
							if (Waterlogged)
								if (West == West::None) return 27022;
								else if (West == West::Low) return 27023;
								else return 27024;
							else
								if (West == West::None) return 27025;
								else if (West == West::Low) return 27026;
								else return 27027;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27028;
								else if (West == West::Low) return 27029;
								else return 27030;
							else
								if (West == West::None) return 27031;
								else if (West == West::Low) return 27032;
								else return 27033;
						else
							if (Waterlogged)
								if (West == West::None) return 27034;
								else if (West == West::Low) return 27035;
								else return 27036;
							else
								if (West == West::None) return 27037;
								else if (West == West::Low) return 27038;
								else return 27039;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27040;
								else if (West == West::Low) return 27041;
								else return 27042;
							else
								if (West == West::None) return 27043;
								else if (West == West::Low) return 27044;
								else return 27045;
						else
							if (Waterlogged)
								if (West == West::None) return 27046;
								else if (West == West::Low) return 27047;
								else return 27048;
							else
								if (West == West::None) return 27049;
								else if (West == West::Low) return 27050;
								else return 27051;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27052;
								else if (West == West::Low) return 27053;
								else return 27054;
							else
								if (West == West::None) return 27055;
								else if (West == West::Low) return 27056;
								else return 27057;
						else
							if (Waterlogged)
								if (West == West::None) return 27058;
								else if (West == West::Low) return 27059;
								else return 27060;
							else
								if (West == West::None) return 27061;
								else if (West == West::Low) return 27062;
								else return 27063;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27064;
								else if (West == West::Low) return 27065;
								else return 27066;
							else
								if (West == West::None) return 27067;
								else if (West == West::Low) return 27068;
								else return 27069;
						else
							if (Waterlogged)
								if (West == West::None) return 27070;
								else if (West == West::Low) return 27071;
								else return 27072;
							else
								if (West == West::None) return 27073;
								else if (West == West::Low) return 27074;
								else return 27075;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27076;
								else if (West == West::Low) return 27077;
								else return 27078;
							else
								if (West == West::None) return 27079;
								else if (West == West::Low) return 27080;
								else return 27081;
						else
							if (Waterlogged)
								if (West == West::None) return 27082;
								else if (West == West::Low) return 27083;
								else return 27084;
							else
								if (West == West::None) return 27085;
								else if (West == West::Low) return 27086;
								else return 27087;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27088;
								else if (West == West::Low) return 27089;
								else return 27090;
							else
								if (West == West::None) return 27091;
								else if (West == West::Low) return 27092;
								else return 27093;
						else
							if (Waterlogged)
								if (West == West::None) return 27094;
								else if (West == West::Low) return 27095;
								else return 27096;
							else
								if (West == West::None) return 27097;
								else if (West == West::Low) return 27098;
								else return 27099;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27100;
								else if (West == West::Low) return 27101;
								else return 27102;
							else
								if (West == West::None) return 27103;
								else if (West == West::Low) return 27104;
								else return 27105;
						else
							if (Waterlogged)
								if (West == West::None) return 27106;
								else if (West == West::Low) return 27107;
								else return 27108;
							else
								if (West == West::None) return 27109;
								else if (West == West::Low) return 27110;
								else return 27111;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27112;
								else if (West == West::Low) return 27113;
								else return 27114;
							else
								if (West == West::None) return 27115;
								else if (West == West::Low) return 27116;
								else return 27117;
						else
							if (Waterlogged)
								if (West == West::None) return 27118;
								else if (West == West::Low) return 27119;
								else return 27120;
							else
								if (West == West::None) return 27121;
								else if (West == West::Low) return 27122;
								else return 27123;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27124;
								else if (West == West::Low) return 27125;
								else return 27126;
							else
								if (West == West::None) return 27127;
								else if (West == West::Low) return 27128;
								else return 27129;
						else
							if (Waterlogged)
								if (West == West::None) return 27130;
								else if (West == West::Low) return 27131;
								else return 27132;
							else
								if (West == West::None) return 27133;
								else if (West == West::Low) return 27134;
								else return 27135;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27136;
								else if (West == West::Low) return 27137;
								else return 27138;
							else
								if (West == West::None) return 27139;
								else if (West == West::Low) return 27140;
								else return 27141;
						else
							if (Waterlogged)
								if (West == West::None) return 27142;
								else if (West == West::Low) return 27143;
								else return 27144;
							else
								if (West == West::None) return 27145;
								else if (West == West::Low) return 27146;
								else return 27147;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27148;
								else if (West == West::Low) return 27149;
								else return 27150;
							else
								if (West == West::None) return 27151;
								else if (West == West::Low) return 27152;
								else return 27153;
						else
							if (Waterlogged)
								if (West == West::None) return 27154;
								else if (West == West::Low) return 27155;
								else return 27156;
							else
								if (West == West::None) return 27157;
								else if (West == West::Low) return 27158;
								else return 27159;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27160;
								else if (West == West::Low) return 27161;
								else return 27162;
							else
								if (West == West::None) return 27163;
								else if (West == West::Low) return 27164;
								else return 27165;
						else
							if (Waterlogged)
								if (West == West::None) return 27166;
								else if (West == West::Low) return 27167;
								else return 27168;
							else
								if (West == West::None) return 27169;
								else if (West == West::Low) return 27170;
								else return 27171;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27172;
								else if (West == West::Low) return 27173;
								else return 27174;
							else
								if (West == West::None) return 27175;
								else if (West == West::Low) return 27176;
								else return 27177;
						else
							if (Waterlogged)
								if (West == West::None) return 27178;
								else if (West == West::Low) return 27179;
								else return 27180;
							else
								if (West == West::None) return 27181;
								else if (West == West::Low) return 27182;
								else return 27183;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27184;
								else if (West == West::Low) return 27185;
								else return 27186;
							else
								if (West == West::None) return 27187;
								else if (West == West::Low) return 27188;
								else return 27189;
						else
							if (Waterlogged)
								if (West == West::None) return 27190;
								else if (West == West::Low) return 27191;
								else return 27192;
							else
								if (West == West::None) return 27193;
								else if (West == West::Low) return 27194;
								else return 27195;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27196;
								else if (West == West::Low) return 27197;
								else return 27198;
							else
								if (West == West::None) return 27199;
								else if (West == West::Low) return 27200;
								else return 27201;
						else
							if (Waterlogged)
								if (West == West::None) return 27202;
								else if (West == West::Low) return 27203;
								else return 27204;
							else
								if (West == West::None) return 27205;
								else if (West == West::Low) return 27206;
								else return 27207;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27208;
								else if (West == West::Low) return 27209;
								else return 27210;
							else
								if (West == West::None) return 27211;
								else if (West == West::Low) return 27212;
								else return 27213;
						else
							if (Waterlogged)
								if (West == West::None) return 27214;
								else if (West == West::Low) return 27215;
								else return 27216;
							else
								if (West == West::None) return 27217;
								else if (West == West::Low) return 27218;
								else return 27219;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 27220;
								else if (West == West::Low) return 27221;
								else return 27222;
							else
								if (West == West::None) return 27223;
								else if (West == West::Low) return 27224;
								else return 27225;
						else
							if (Waterlogged)
								if (West == West::None) return 27226;
								else if (West == West::Low) return 27227;
								else return 27228;
							else
								if (West == West::None) return 27229;
								else if (West == West::Low) return 27230;
								else return 27231;
		}
		BlockState DeepslateTileWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace DeepslateTiles
	{
		constexpr BlockState DeepslateTiles()
		{
			return 26821;
		}
	}
	namespace DetectorRail
	{
		enum class Shape
		{
			NorthSouth,
			EastWest,
			AscendingEast,
			AscendingWest,
			AscendingNorth,
			AscendingSouth,
		};
		constexpr BlockState DetectorRail(const bool Powered, const enum Shape Shape, const bool Waterlogged)
		{
			if (Powered)
				if (Shape == Shape::NorthSouth)
					if (Waterlogged) return 2011;
					else return 2012;
				else if (Shape == Shape::EastWest)
					if (Waterlogged) return 2013;
					else return 2014;
				else if (Shape == Shape::AscendingEast)
					if (Waterlogged) return 2015;
					else return 2016;
				else if (Shape == Shape::AscendingWest)
					if (Waterlogged) return 2017;
					else return 2018;
				else if (Shape == Shape::AscendingNorth)
					if (Waterlogged) return 2019;
					else return 2020;
				else
					if (Waterlogged) return 2021;
					else return 2022;
			else
				if (Shape == Shape::NorthSouth)
					if (Waterlogged) return 2023;
					else return 2024;
				else if (Shape == Shape::EastWest)
					if (Waterlogged) return 2025;
					else return 2026;
				else if (Shape == Shape::AscendingEast)
					if (Waterlogged) return 2027;
					else return 2028;
				else if (Shape == Shape::AscendingWest)
					if (Waterlogged) return 2029;
					else return 2030;
				else if (Shape == Shape::AscendingNorth)
					if (Waterlogged) return 2031;
					else return 2032;
				else
					if (Waterlogged) return 2033;
					else return 2034;
		}
		BlockState DetectorRail();
		bool Powered(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DiamondBlock
	{
		constexpr BlockState DiamondBlock()
		{
			return 4340;
		}
	}
	namespace DiamondOre
	{
		constexpr BlockState DiamondOre()
		{
			return 4338;
		}
	}
	namespace Diorite
	{
		constexpr BlockState Diorite()
		{
			return 4;
		}
	}
	namespace DioriteSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState DioriteSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 15209;
				else return 15210;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 15211;
				else return 15212;
			else
				if (Waterlogged) return 15213;
				else return 15214;
		}
		BlockState DioriteSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DioriteStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState DioriteStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 15057;
						else return 15058;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 15059;
						else return 15060;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 15061;
						else return 15062;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 15063;
						else return 15064;
					else
						if (Waterlogged) return 15065;
						else return 15066;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 15067;
						else return 15068;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 15069;
						else return 15070;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 15071;
						else return 15072;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 15073;
						else return 15074;
					else
						if (Waterlogged) return 15075;
						else return 15076;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 15077;
						else return 15078;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 15079;
						else return 15080;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 15081;
						else return 15082;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 15083;
						else return 15084;
					else
						if (Waterlogged) return 15085;
						else return 15086;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 15087;
						else return 15088;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 15089;
						else return 15090;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 15091;
						else return 15092;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 15093;
						else return 15094;
					else
						if (Waterlogged) return 15095;
						else return 15096;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 15097;
						else return 15098;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 15099;
						else return 15100;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 15101;
						else return 15102;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 15103;
						else return 15104;
					else
						if (Waterlogged) return 15105;
						else return 15106;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 15107;
						else return 15108;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 15109;
						else return 15110;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 15111;
						else return 15112;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 15113;
						else return 15114;
					else
						if (Waterlogged) return 15115;
						else return 15116;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 15117;
						else return 15118;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 15119;
						else return 15120;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 15121;
						else return 15122;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 15123;
						else return 15124;
					else
						if (Waterlogged) return 15125;
						else return 15126;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 15127;
						else return 15128;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 15129;
						else return 15130;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 15131;
						else return 15132;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 15133;
						else return 15134;
					else
						if (Waterlogged) return 15135;
						else return 15136;
		}
		BlockState DioriteStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DioriteWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState DioriteWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19103;
								else if (West == West::Low) return 19104;
								else return 19105;
							else
								if (West == West::None) return 19106;
								else if (West == West::Low) return 19107;
								else return 19108;
						else
							if (Waterlogged)
								if (West == West::None) return 19109;
								else if (West == West::Low) return 19110;
								else return 19111;
							else
								if (West == West::None) return 19112;
								else if (West == West::Low) return 19113;
								else return 19114;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19115;
								else if (West == West::Low) return 19116;
								else return 19117;
							else
								if (West == West::None) return 19118;
								else if (West == West::Low) return 19119;
								else return 19120;
						else
							if (Waterlogged)
								if (West == West::None) return 19121;
								else if (West == West::Low) return 19122;
								else return 19123;
							else
								if (West == West::None) return 19124;
								else if (West == West::Low) return 19125;
								else return 19126;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19127;
								else if (West == West::Low) return 19128;
								else return 19129;
							else
								if (West == West::None) return 19130;
								else if (West == West::Low) return 19131;
								else return 19132;
						else
							if (Waterlogged)
								if (West == West::None) return 19133;
								else if (West == West::Low) return 19134;
								else return 19135;
							else
								if (West == West::None) return 19136;
								else if (West == West::Low) return 19137;
								else return 19138;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19139;
								else if (West == West::Low) return 19140;
								else return 19141;
							else
								if (West == West::None) return 19142;
								else if (West == West::Low) return 19143;
								else return 19144;
						else
							if (Waterlogged)
								if (West == West::None) return 19145;
								else if (West == West::Low) return 19146;
								else return 19147;
							else
								if (West == West::None) return 19148;
								else if (West == West::Low) return 19149;
								else return 19150;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19151;
								else if (West == West::Low) return 19152;
								else return 19153;
							else
								if (West == West::None) return 19154;
								else if (West == West::Low) return 19155;
								else return 19156;
						else
							if (Waterlogged)
								if (West == West::None) return 19157;
								else if (West == West::Low) return 19158;
								else return 19159;
							else
								if (West == West::None) return 19160;
								else if (West == West::Low) return 19161;
								else return 19162;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19163;
								else if (West == West::Low) return 19164;
								else return 19165;
							else
								if (West == West::None) return 19166;
								else if (West == West::Low) return 19167;
								else return 19168;
						else
							if (Waterlogged)
								if (West == West::None) return 19169;
								else if (West == West::Low) return 19170;
								else return 19171;
							else
								if (West == West::None) return 19172;
								else if (West == West::Low) return 19173;
								else return 19174;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19175;
								else if (West == West::Low) return 19176;
								else return 19177;
							else
								if (West == West::None) return 19178;
								else if (West == West::Low) return 19179;
								else return 19180;
						else
							if (Waterlogged)
								if (West == West::None) return 19181;
								else if (West == West::Low) return 19182;
								else return 19183;
							else
								if (West == West::None) return 19184;
								else if (West == West::Low) return 19185;
								else return 19186;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19187;
								else if (West == West::Low) return 19188;
								else return 19189;
							else
								if (West == West::None) return 19190;
								else if (West == West::Low) return 19191;
								else return 19192;
						else
							if (Waterlogged)
								if (West == West::None) return 19193;
								else if (West == West::Low) return 19194;
								else return 19195;
							else
								if (West == West::None) return 19196;
								else if (West == West::Low) return 19197;
								else return 19198;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19199;
								else if (West == West::Low) return 19200;
								else return 19201;
							else
								if (West == West::None) return 19202;
								else if (West == West::Low) return 19203;
								else return 19204;
						else
							if (Waterlogged)
								if (West == West::None) return 19205;
								else if (West == West::Low) return 19206;
								else return 19207;
							else
								if (West == West::None) return 19208;
								else if (West == West::Low) return 19209;
								else return 19210;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19211;
								else if (West == West::Low) return 19212;
								else return 19213;
							else
								if (West == West::None) return 19214;
								else if (West == West::Low) return 19215;
								else return 19216;
						else
							if (Waterlogged)
								if (West == West::None) return 19217;
								else if (West == West::Low) return 19218;
								else return 19219;
							else
								if (West == West::None) return 19220;
								else if (West == West::Low) return 19221;
								else return 19222;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19223;
								else if (West == West::Low) return 19224;
								else return 19225;
							else
								if (West == West::None) return 19226;
								else if (West == West::Low) return 19227;
								else return 19228;
						else
							if (Waterlogged)
								if (West == West::None) return 19229;
								else if (West == West::Low) return 19230;
								else return 19231;
							else
								if (West == West::None) return 19232;
								else if (West == West::Low) return 19233;
								else return 19234;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19235;
								else if (West == West::Low) return 19236;
								else return 19237;
							else
								if (West == West::None) return 19238;
								else if (West == West::Low) return 19239;
								else return 19240;
						else
							if (Waterlogged)
								if (West == West::None) return 19241;
								else if (West == West::Low) return 19242;
								else return 19243;
							else
								if (West == West::None) return 19244;
								else if (West == West::Low) return 19245;
								else return 19246;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19247;
								else if (West == West::Low) return 19248;
								else return 19249;
							else
								if (West == West::None) return 19250;
								else if (West == West::Low) return 19251;
								else return 19252;
						else
							if (Waterlogged)
								if (West == West::None) return 19253;
								else if (West == West::Low) return 19254;
								else return 19255;
							else
								if (West == West::None) return 19256;
								else if (West == West::Low) return 19257;
								else return 19258;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19259;
								else if (West == West::Low) return 19260;
								else return 19261;
							else
								if (West == West::None) return 19262;
								else if (West == West::Low) return 19263;
								else return 19264;
						else
							if (Waterlogged)
								if (West == West::None) return 19265;
								else if (West == West::Low) return 19266;
								else return 19267;
							else
								if (West == West::None) return 19268;
								else if (West == West::Low) return 19269;
								else return 19270;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19271;
								else if (West == West::Low) return 19272;
								else return 19273;
							else
								if (West == West::None) return 19274;
								else if (West == West::Low) return 19275;
								else return 19276;
						else
							if (Waterlogged)
								if (West == West::None) return 19277;
								else if (West == West::Low) return 19278;
								else return 19279;
							else
								if (West == West::None) return 19280;
								else if (West == West::Low) return 19281;
								else return 19282;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19283;
								else if (West == West::Low) return 19284;
								else return 19285;
							else
								if (West == West::None) return 19286;
								else if (West == West::Low) return 19287;
								else return 19288;
						else
							if (Waterlogged)
								if (West == West::None) return 19289;
								else if (West == West::Low) return 19290;
								else return 19291;
							else
								if (West == West::None) return 19292;
								else if (West == West::Low) return 19293;
								else return 19294;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19295;
								else if (West == West::Low) return 19296;
								else return 19297;
							else
								if (West == West::None) return 19298;
								else if (West == West::Low) return 19299;
								else return 19300;
						else
							if (Waterlogged)
								if (West == West::None) return 19301;
								else if (West == West::Low) return 19302;
								else return 19303;
							else
								if (West == West::None) return 19304;
								else if (West == West::Low) return 19305;
								else return 19306;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19307;
								else if (West == West::Low) return 19308;
								else return 19309;
							else
								if (West == West::None) return 19310;
								else if (West == West::Low) return 19311;
								else return 19312;
						else
							if (Waterlogged)
								if (West == West::None) return 19313;
								else if (West == West::Low) return 19314;
								else return 19315;
							else
								if (West == West::None) return 19316;
								else if (West == West::Low) return 19317;
								else return 19318;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19319;
								else if (West == West::Low) return 19320;
								else return 19321;
							else
								if (West == West::None) return 19322;
								else if (West == West::Low) return 19323;
								else return 19324;
						else
							if (Waterlogged)
								if (West == West::None) return 19325;
								else if (West == West::Low) return 19326;
								else return 19327;
							else
								if (West == West::None) return 19328;
								else if (West == West::Low) return 19329;
								else return 19330;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19331;
								else if (West == West::Low) return 19332;
								else return 19333;
							else
								if (West == West::None) return 19334;
								else if (West == West::Low) return 19335;
								else return 19336;
						else
							if (Waterlogged)
								if (West == West::None) return 19337;
								else if (West == West::Low) return 19338;
								else return 19339;
							else
								if (West == West::None) return 19340;
								else if (West == West::Low) return 19341;
								else return 19342;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19343;
								else if (West == West::Low) return 19344;
								else return 19345;
							else
								if (West == West::None) return 19346;
								else if (West == West::Low) return 19347;
								else return 19348;
						else
							if (Waterlogged)
								if (West == West::None) return 19349;
								else if (West == West::Low) return 19350;
								else return 19351;
							else
								if (West == West::None) return 19352;
								else if (West == West::Low) return 19353;
								else return 19354;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19355;
								else if (West == West::Low) return 19356;
								else return 19357;
							else
								if (West == West::None) return 19358;
								else if (West == West::Low) return 19359;
								else return 19360;
						else
							if (Waterlogged)
								if (West == West::None) return 19361;
								else if (West == West::Low) return 19362;
								else return 19363;
							else
								if (West == West::None) return 19364;
								else if (West == West::Low) return 19365;
								else return 19366;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19367;
								else if (West == West::Low) return 19368;
								else return 19369;
							else
								if (West == West::None) return 19370;
								else if (West == West::Low) return 19371;
								else return 19372;
						else
							if (Waterlogged)
								if (West == West::None) return 19373;
								else if (West == West::Low) return 19374;
								else return 19375;
							else
								if (West == West::None) return 19376;
								else if (West == West::Low) return 19377;
								else return 19378;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19379;
								else if (West == West::Low) return 19380;
								else return 19381;
							else
								if (West == West::None) return 19382;
								else if (West == West::Low) return 19383;
								else return 19384;
						else
							if (Waterlogged)
								if (West == West::None) return 19385;
								else if (West == West::Low) return 19386;
								else return 19387;
							else
								if (West == West::None) return 19388;
								else if (West == West::Low) return 19389;
								else return 19390;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19391;
								else if (West == West::Low) return 19392;
								else return 19393;
							else
								if (West == West::None) return 19394;
								else if (West == West::Low) return 19395;
								else return 19396;
						else
							if (Waterlogged)
								if (West == West::None) return 19397;
								else if (West == West::Low) return 19398;
								else return 19399;
							else
								if (West == West::None) return 19400;
								else if (West == West::Low) return 19401;
								else return 19402;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19403;
								else if (West == West::Low) return 19404;
								else return 19405;
							else
								if (West == West::None) return 19406;
								else if (West == West::Low) return 19407;
								else return 19408;
						else
							if (Waterlogged)
								if (West == West::None) return 19409;
								else if (West == West::Low) return 19410;
								else return 19411;
							else
								if (West == West::None) return 19412;
								else if (West == West::Low) return 19413;
								else return 19414;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19415;
								else if (West == West::Low) return 19416;
								else return 19417;
							else
								if (West == West::None) return 19418;
								else if (West == West::Low) return 19419;
								else return 19420;
						else
							if (Waterlogged)
								if (West == West::None) return 19421;
								else if (West == West::Low) return 19422;
								else return 19423;
							else
								if (West == West::None) return 19424;
								else if (West == West::Low) return 19425;
								else return 19426;
		}
		BlockState DioriteWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace Dirt
	{
		constexpr BlockState Dirt()
		{
			return 10;
		}
	}
	namespace DirtPath
	{
		constexpr BlockState DirtPath()
		{
			return 13536;
		}
	}
	namespace Dispenser
	{
		constexpr BlockState Dispenser(const eBlockFace Facing, const bool Triggered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Triggered) return 566;
				else return 567;
			else if (Facing == eBlockFace::BLOCK_FACE_XP)
				if (Triggered) return 568;
				else return 569;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Triggered) return 570;
				else return 571;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Triggered) return 572;
				else return 573;
			else if (Facing == eBlockFace::BLOCK_FACE_YP)
				if (Triggered) return 574;
				else return 575;
			else
				if (Triggered) return 576;
				else return 577;
		}
		BlockState Dispenser();
		eBlockFace Facing(BlockState Block);
		bool Triggered(BlockState Block);
	}
	namespace DragonEgg
	{
		constexpr BlockState DragonEgg()
		{
			return 8200;
		}
	}
	namespace DragonHead
	{
		constexpr BlockState DragonHead(const bool Powered, const unsigned char Rotation)
		{
			if (Powered)
				if (Rotation == 0) return 9836;
				else if (Rotation == 1) return 9837;
				else if (Rotation == 2) return 9838;
				else if (Rotation == 3) return 9839;
				else if (Rotation == 4) return 9840;
				else if (Rotation == 5) return 9841;
				else if (Rotation == 6) return 9842;
				else if (Rotation == 7) return 9843;
				else if (Rotation == 8) return 9844;
				else if (Rotation == 9) return 9845;
				else if (Rotation == 10) return 9846;
				else if (Rotation == 11) return 9847;
				else if (Rotation == 12) return 9848;
				else if (Rotation == 13) return 9849;
				else if (Rotation == 14) return 9850;
				else return 9851;
			else
				if (Rotation == 0) return 9852;
				else if (Rotation == 1) return 9853;
				else if (Rotation == 2) return 9854;
				else if (Rotation == 3) return 9855;
				else if (Rotation == 4) return 9856;
				else if (Rotation == 5) return 9857;
				else if (Rotation == 6) return 9858;
				else if (Rotation == 7) return 9859;
				else if (Rotation == 8) return 9860;
				else if (Rotation == 9) return 9861;
				else if (Rotation == 10) return 9862;
				else if (Rotation == 11) return 9863;
				else if (Rotation == 12) return 9864;
				else if (Rotation == 13) return 9865;
				else if (Rotation == 14) return 9866;
				else return 9867;
		}
		BlockState DragonHead();
		bool Powered(BlockState Block);
		unsigned char Rotation(BlockState Block);
	}
	namespace DragonWallHead
	{
		constexpr BlockState DragonWallHead(const eBlockFace Facing, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Powered) return 9868;
				else return 9869;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Powered) return 9870;
				else return 9871;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Powered) return 9872;
				else return 9873;
			else
				if (Powered) return 9874;
				else return 9875;
		}
		BlockState DragonWallHead();
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace DriedGhast
	{
		constexpr BlockState DriedGhast(const eBlockFace Facing, const unsigned char Hydration, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Hydration == 0)
					if (Waterlogged) return 13826;
					else return 13827;
				else if (Hydration == 1)
					if (Waterlogged) return 13828;
					else return 13829;
				else if (Hydration == 2)
					if (Waterlogged) return 13830;
					else return 13831;
				else
					if (Waterlogged) return 13832;
					else return 13833;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Hydration == 0)
					if (Waterlogged) return 13834;
					else return 13835;
				else if (Hydration == 1)
					if (Waterlogged) return 13836;
					else return 13837;
				else if (Hydration == 2)
					if (Waterlogged) return 13838;
					else return 13839;
				else
					if (Waterlogged) return 13840;
					else return 13841;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Hydration == 0)
					if (Waterlogged) return 13842;
					else return 13843;
				else if (Hydration == 1)
					if (Waterlogged) return 13844;
					else return 13845;
				else if (Hydration == 2)
					if (Waterlogged) return 13846;
					else return 13847;
				else
					if (Waterlogged) return 13848;
					else return 13849;
			else
				if (Hydration == 0)
					if (Waterlogged) return 13850;
					else return 13851;
				else if (Hydration == 1)
					if (Waterlogged) return 13852;
					else return 13853;
				else if (Hydration == 2)
					if (Waterlogged) return 13854;
					else return 13855;
				else
					if (Waterlogged) return 13856;
					else return 13857;
		}
		BlockState DriedGhast();
		eBlockFace Facing(BlockState Block);
		unsigned char Hydration(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DriedKelpBlock
	{
		constexpr BlockState DriedKelpBlock()
		{
			return 13810;
		}
	}
	namespace DripstoneBlock
	{
		constexpr BlockState DripstoneBlock()
		{
			return 25828;
		}
	}
	namespace Dropper
	{
		constexpr BlockState Dropper(const eBlockFace Facing, const bool Triggered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Triggered) return 10153;
				else return 10154;
			else if (Facing == eBlockFace::BLOCK_FACE_XP)
				if (Triggered) return 10155;
				else return 10156;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Triggered) return 10157;
				else return 10158;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Triggered) return 10159;
				else return 10160;
			else if (Facing == eBlockFace::BLOCK_FACE_YP)
				if (Triggered) return 10161;
				else return 10162;
			else
				if (Triggered) return 10163;
				else return 10164;
		}
		BlockState Dropper();
		eBlockFace Facing(BlockState Block);
		bool Triggered(BlockState Block);
	}
	namespace EmeraldBlock
	{
		constexpr BlockState EmeraldBlock()
		{
			return 8449;
		}
	}
	namespace EmeraldOre
	{
		constexpr BlockState EmeraldOre()
		{
			return 8295;
		}
	}
	namespace EnchantingTable
	{
		constexpr BlockState EnchantingTable()
		{
			return 8173;
		}
	}
	namespace EndGateway
	{
		constexpr BlockState EndGateway()
		{
			return 13537;
		}
	}
	namespace EndPortal
	{
		constexpr BlockState EndPortal()
		{
			return 8190;
		}
	}
	namespace EndPortalFrame
	{
		constexpr BlockState EndPortalFrame(const bool Eye, const eBlockFace Facing)
		{
			if (Eye)
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 8191;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 8192;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 8193;
				else return 8194;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 8195;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 8196;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 8197;
				else return 8198;
		}
		BlockState EndPortalFrame();
		bool Eye(BlockState Block);
		eBlockFace Facing(BlockState Block);
	}
	namespace EndRod
	{
		constexpr BlockState EndRod(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13357;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 13358;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13359;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13360;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 13361;
			else return 13362;
		}
		BlockState EndRod();
		eBlockFace Facing(BlockState Block);
	}
	namespace EndStone
	{
		constexpr BlockState EndStone()
		{
			return 8199;
		}
	}
	namespace EndStoneBrickSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState EndStoneBrickSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 15167;
				else return 15168;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 15169;
				else return 15170;
			else
				if (Waterlogged) return 15171;
				else return 15172;
		}
		BlockState EndStoneBrickSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace EndStoneBrickStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState EndStoneBrickStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14417;
						else return 14418;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14419;
						else return 14420;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14421;
						else return 14422;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14423;
						else return 14424;
					else
						if (Waterlogged) return 14425;
						else return 14426;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14427;
						else return 14428;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14429;
						else return 14430;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14431;
						else return 14432;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14433;
						else return 14434;
					else
						if (Waterlogged) return 14435;
						else return 14436;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14437;
						else return 14438;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14439;
						else return 14440;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14441;
						else return 14442;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14443;
						else return 14444;
					else
						if (Waterlogged) return 14445;
						else return 14446;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14447;
						else return 14448;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14449;
						else return 14450;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14451;
						else return 14452;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14453;
						else return 14454;
					else
						if (Waterlogged) return 14455;
						else return 14456;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14457;
						else return 14458;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14459;
						else return 14460;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14461;
						else return 14462;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14463;
						else return 14464;
					else
						if (Waterlogged) return 14465;
						else return 14466;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14467;
						else return 14468;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14469;
						else return 14470;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14471;
						else return 14472;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14473;
						else return 14474;
					else
						if (Waterlogged) return 14475;
						else return 14476;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14477;
						else return 14478;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14479;
						else return 14480;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14481;
						else return 14482;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14483;
						else return 14484;
					else
						if (Waterlogged) return 14485;
						else return 14486;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14487;
						else return 14488;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14489;
						else return 14490;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14491;
						else return 14492;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14493;
						else return 14494;
					else
						if (Waterlogged) return 14495;
						else return 14496;
		}
		BlockState EndStoneBrickStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace EndStoneBrickWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState EndStoneBrickWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18779;
								else if (West == West::Low) return 18780;
								else return 18781;
							else
								if (West == West::None) return 18782;
								else if (West == West::Low) return 18783;
								else return 18784;
						else
							if (Waterlogged)
								if (West == West::None) return 18785;
								else if (West == West::Low) return 18786;
								else return 18787;
							else
								if (West == West::None) return 18788;
								else if (West == West::Low) return 18789;
								else return 18790;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18791;
								else if (West == West::Low) return 18792;
								else return 18793;
							else
								if (West == West::None) return 18794;
								else if (West == West::Low) return 18795;
								else return 18796;
						else
							if (Waterlogged)
								if (West == West::None) return 18797;
								else if (West == West::Low) return 18798;
								else return 18799;
							else
								if (West == West::None) return 18800;
								else if (West == West::Low) return 18801;
								else return 18802;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18803;
								else if (West == West::Low) return 18804;
								else return 18805;
							else
								if (West == West::None) return 18806;
								else if (West == West::Low) return 18807;
								else return 18808;
						else
							if (Waterlogged)
								if (West == West::None) return 18809;
								else if (West == West::Low) return 18810;
								else return 18811;
							else
								if (West == West::None) return 18812;
								else if (West == West::Low) return 18813;
								else return 18814;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18815;
								else if (West == West::Low) return 18816;
								else return 18817;
							else
								if (West == West::None) return 18818;
								else if (West == West::Low) return 18819;
								else return 18820;
						else
							if (Waterlogged)
								if (West == West::None) return 18821;
								else if (West == West::Low) return 18822;
								else return 18823;
							else
								if (West == West::None) return 18824;
								else if (West == West::Low) return 18825;
								else return 18826;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18827;
								else if (West == West::Low) return 18828;
								else return 18829;
							else
								if (West == West::None) return 18830;
								else if (West == West::Low) return 18831;
								else return 18832;
						else
							if (Waterlogged)
								if (West == West::None) return 18833;
								else if (West == West::Low) return 18834;
								else return 18835;
							else
								if (West == West::None) return 18836;
								else if (West == West::Low) return 18837;
								else return 18838;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18839;
								else if (West == West::Low) return 18840;
								else return 18841;
							else
								if (West == West::None) return 18842;
								else if (West == West::Low) return 18843;
								else return 18844;
						else
							if (Waterlogged)
								if (West == West::None) return 18845;
								else if (West == West::Low) return 18846;
								else return 18847;
							else
								if (West == West::None) return 18848;
								else if (West == West::Low) return 18849;
								else return 18850;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18851;
								else if (West == West::Low) return 18852;
								else return 18853;
							else
								if (West == West::None) return 18854;
								else if (West == West::Low) return 18855;
								else return 18856;
						else
							if (Waterlogged)
								if (West == West::None) return 18857;
								else if (West == West::Low) return 18858;
								else return 18859;
							else
								if (West == West::None) return 18860;
								else if (West == West::Low) return 18861;
								else return 18862;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18863;
								else if (West == West::Low) return 18864;
								else return 18865;
							else
								if (West == West::None) return 18866;
								else if (West == West::Low) return 18867;
								else return 18868;
						else
							if (Waterlogged)
								if (West == West::None) return 18869;
								else if (West == West::Low) return 18870;
								else return 18871;
							else
								if (West == West::None) return 18872;
								else if (West == West::Low) return 18873;
								else return 18874;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18875;
								else if (West == West::Low) return 18876;
								else return 18877;
							else
								if (West == West::None) return 18878;
								else if (West == West::Low) return 18879;
								else return 18880;
						else
							if (Waterlogged)
								if (West == West::None) return 18881;
								else if (West == West::Low) return 18882;
								else return 18883;
							else
								if (West == West::None) return 18884;
								else if (West == West::Low) return 18885;
								else return 18886;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18887;
								else if (West == West::Low) return 18888;
								else return 18889;
							else
								if (West == West::None) return 18890;
								else if (West == West::Low) return 18891;
								else return 18892;
						else
							if (Waterlogged)
								if (West == West::None) return 18893;
								else if (West == West::Low) return 18894;
								else return 18895;
							else
								if (West == West::None) return 18896;
								else if (West == West::Low) return 18897;
								else return 18898;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18899;
								else if (West == West::Low) return 18900;
								else return 18901;
							else
								if (West == West::None) return 18902;
								else if (West == West::Low) return 18903;
								else return 18904;
						else
							if (Waterlogged)
								if (West == West::None) return 18905;
								else if (West == West::Low) return 18906;
								else return 18907;
							else
								if (West == West::None) return 18908;
								else if (West == West::Low) return 18909;
								else return 18910;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18911;
								else if (West == West::Low) return 18912;
								else return 18913;
							else
								if (West == West::None) return 18914;
								else if (West == West::Low) return 18915;
								else return 18916;
						else
							if (Waterlogged)
								if (West == West::None) return 18917;
								else if (West == West::Low) return 18918;
								else return 18919;
							else
								if (West == West::None) return 18920;
								else if (West == West::Low) return 18921;
								else return 18922;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18923;
								else if (West == West::Low) return 18924;
								else return 18925;
							else
								if (West == West::None) return 18926;
								else if (West == West::Low) return 18927;
								else return 18928;
						else
							if (Waterlogged)
								if (West == West::None) return 18929;
								else if (West == West::Low) return 18930;
								else return 18931;
							else
								if (West == West::None) return 18932;
								else if (West == West::Low) return 18933;
								else return 18934;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18935;
								else if (West == West::Low) return 18936;
								else return 18937;
							else
								if (West == West::None) return 18938;
								else if (West == West::Low) return 18939;
								else return 18940;
						else
							if (Waterlogged)
								if (West == West::None) return 18941;
								else if (West == West::Low) return 18942;
								else return 18943;
							else
								if (West == West::None) return 18944;
								else if (West == West::Low) return 18945;
								else return 18946;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18947;
								else if (West == West::Low) return 18948;
								else return 18949;
							else
								if (West == West::None) return 18950;
								else if (West == West::Low) return 18951;
								else return 18952;
						else
							if (Waterlogged)
								if (West == West::None) return 18953;
								else if (West == West::Low) return 18954;
								else return 18955;
							else
								if (West == West::None) return 18956;
								else if (West == West::Low) return 18957;
								else return 18958;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18959;
								else if (West == West::Low) return 18960;
								else return 18961;
							else
								if (West == West::None) return 18962;
								else if (West == West::Low) return 18963;
								else return 18964;
						else
							if (Waterlogged)
								if (West == West::None) return 18965;
								else if (West == West::Low) return 18966;
								else return 18967;
							else
								if (West == West::None) return 18968;
								else if (West == West::Low) return 18969;
								else return 18970;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18971;
								else if (West == West::Low) return 18972;
								else return 18973;
							else
								if (West == West::None) return 18974;
								else if (West == West::Low) return 18975;
								else return 18976;
						else
							if (Waterlogged)
								if (West == West::None) return 18977;
								else if (West == West::Low) return 18978;
								else return 18979;
							else
								if (West == West::None) return 18980;
								else if (West == West::Low) return 18981;
								else return 18982;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18983;
								else if (West == West::Low) return 18984;
								else return 18985;
							else
								if (West == West::None) return 18986;
								else if (West == West::Low) return 18987;
								else return 18988;
						else
							if (Waterlogged)
								if (West == West::None) return 18989;
								else if (West == West::Low) return 18990;
								else return 18991;
							else
								if (West == West::None) return 18992;
								else if (West == West::Low) return 18993;
								else return 18994;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18995;
								else if (West == West::Low) return 18996;
								else return 18997;
							else
								if (West == West::None) return 18998;
								else if (West == West::Low) return 18999;
								else return 19000;
						else
							if (Waterlogged)
								if (West == West::None) return 19001;
								else if (West == West::Low) return 19002;
								else return 19003;
							else
								if (West == West::None) return 19004;
								else if (West == West::Low) return 19005;
								else return 19006;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19007;
								else if (West == West::Low) return 19008;
								else return 19009;
							else
								if (West == West::None) return 19010;
								else if (West == West::Low) return 19011;
								else return 19012;
						else
							if (Waterlogged)
								if (West == West::None) return 19013;
								else if (West == West::Low) return 19014;
								else return 19015;
							else
								if (West == West::None) return 19016;
								else if (West == West::Low) return 19017;
								else return 19018;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19019;
								else if (West == West::Low) return 19020;
								else return 19021;
							else
								if (West == West::None) return 19022;
								else if (West == West::Low) return 19023;
								else return 19024;
						else
							if (Waterlogged)
								if (West == West::None) return 19025;
								else if (West == West::Low) return 19026;
								else return 19027;
							else
								if (West == West::None) return 19028;
								else if (West == West::Low) return 19029;
								else return 19030;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19031;
								else if (West == West::Low) return 19032;
								else return 19033;
							else
								if (West == West::None) return 19034;
								else if (West == West::Low) return 19035;
								else return 19036;
						else
							if (Waterlogged)
								if (West == West::None) return 19037;
								else if (West == West::Low) return 19038;
								else return 19039;
							else
								if (West == West::None) return 19040;
								else if (West == West::Low) return 19041;
								else return 19042;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19043;
								else if (West == West::Low) return 19044;
								else return 19045;
							else
								if (West == West::None) return 19046;
								else if (West == West::Low) return 19047;
								else return 19048;
						else
							if (Waterlogged)
								if (West == West::None) return 19049;
								else if (West == West::Low) return 19050;
								else return 19051;
							else
								if (West == West::None) return 19052;
								else if (West == West::Low) return 19053;
								else return 19054;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19055;
								else if (West == West::Low) return 19056;
								else return 19057;
							else
								if (West == West::None) return 19058;
								else if (West == West::Low) return 19059;
								else return 19060;
						else
							if (Waterlogged)
								if (West == West::None) return 19061;
								else if (West == West::Low) return 19062;
								else return 19063;
							else
								if (West == West::None) return 19064;
								else if (West == West::Low) return 19065;
								else return 19066;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19067;
								else if (West == West::Low) return 19068;
								else return 19069;
							else
								if (West == West::None) return 19070;
								else if (West == West::Low) return 19071;
								else return 19072;
						else
							if (Waterlogged)
								if (West == West::None) return 19073;
								else if (West == West::Low) return 19074;
								else return 19075;
							else
								if (West == West::None) return 19076;
								else if (West == West::Low) return 19077;
								else return 19078;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19079;
								else if (West == West::Low) return 19080;
								else return 19081;
							else
								if (West == West::None) return 19082;
								else if (West == West::Low) return 19083;
								else return 19084;
						else
							if (Waterlogged)
								if (West == West::None) return 19085;
								else if (West == West::Low) return 19086;
								else return 19087;
							else
								if (West == West::None) return 19088;
								else if (West == West::Low) return 19089;
								else return 19090;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19091;
								else if (West == West::Low) return 19092;
								else return 19093;
							else
								if (West == West::None) return 19094;
								else if (West == West::Low) return 19095;
								else return 19096;
						else
							if (Waterlogged)
								if (West == West::None) return 19097;
								else if (West == West::Low) return 19098;
								else return 19099;
							else
								if (West == West::None) return 19100;
								else if (West == West::Low) return 19101;
								else return 19102;
		}
		BlockState EndStoneBrickWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace EndStoneBricks
	{
		constexpr BlockState EndStoneBricks()
		{
			return 13517;
		}
	}
	namespace EnderChest
	{
		constexpr BlockState EnderChest(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 8297;
				else return 8298;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 8299;
				else return 8300;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 8301;
				else return 8302;
			else
				if (Waterlogged) return 8303;
				else return 8304;
		}
		BlockState EnderChest();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace ExposedChiseledCopper
	{
		constexpr BlockState ExposedChiseledCopper()
		{
			return 24010;
		}
	}
	namespace ExposedCopper
	{
		constexpr BlockState ExposedCopper()
		{
			return 23999;
		}
	}
	namespace ExposedCopperBulb
	{
		constexpr BlockState ExposedCopperBulb(const bool Lit, const bool Powered)
		{
			if (Lit)
				if (Powered) return 25756;
				else return 25757;
			else
				if (Powered) return 25758;
				else return 25759;
		}
		BlockState ExposedCopperBulb();
		bool Lit(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace ExposedCopperDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState ExposedCopperDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24776;
							else return 24777;
						else
							if (Powered) return 24778;
							else return 24779;
					else
						if (Open)
							if (Powered) return 24780;
							else return 24781;
						else
							if (Powered) return 24782;
							else return 24783;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24784;
							else return 24785;
						else
							if (Powered) return 24786;
							else return 24787;
					else
						if (Open)
							if (Powered) return 24788;
							else return 24789;
						else
							if (Powered) return 24790;
							else return 24791;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24792;
							else return 24793;
						else
							if (Powered) return 24794;
							else return 24795;
					else
						if (Open)
							if (Powered) return 24796;
							else return 24797;
						else
							if (Powered) return 24798;
							else return 24799;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24800;
							else return 24801;
						else
							if (Powered) return 24802;
							else return 24803;
					else
						if (Open)
							if (Powered) return 24804;
							else return 24805;
						else
							if (Powered) return 24806;
							else return 24807;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24808;
							else return 24809;
						else
							if (Powered) return 24810;
							else return 24811;
					else
						if (Open)
							if (Powered) return 24812;
							else return 24813;
						else
							if (Powered) return 24814;
							else return 24815;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24816;
							else return 24817;
						else
							if (Powered) return 24818;
							else return 24819;
					else
						if (Open)
							if (Powered) return 24820;
							else return 24821;
						else
							if (Powered) return 24822;
							else return 24823;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24824;
							else return 24825;
						else
							if (Powered) return 24826;
							else return 24827;
					else
						if (Open)
							if (Powered) return 24828;
							else return 24829;
						else
							if (Powered) return 24830;
							else return 24831;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24832;
							else return 24833;
						else
							if (Powered) return 24834;
							else return 24835;
					else
						if (Open)
							if (Powered) return 24836;
							else return 24837;
						else
							if (Powered) return 24838;
							else return 24839;
		}
		BlockState ExposedCopperDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace ExposedCopperGrate
	{
		constexpr BlockState ExposedCopperGrate(const bool Waterlogged)
		{
			if (Waterlogged) return 25738;
			else return 25739;
		}
		BlockState ExposedCopperGrate();
		bool Waterlogged(BlockState Block);
	}
	namespace ExposedCopperTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState ExposedCopperTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25288;
							else return 25289;
						else
							if (Waterlogged) return 25290;
							else return 25291;
					else
						if (Powered)
							if (Waterlogged) return 25292;
							else return 25293;
						else
							if (Waterlogged) return 25294;
							else return 25295;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25296;
							else return 25297;
						else
							if (Waterlogged) return 25298;
							else return 25299;
					else
						if (Powered)
							if (Waterlogged) return 25300;
							else return 25301;
						else
							if (Waterlogged) return 25302;
							else return 25303;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25304;
							else return 25305;
						else
							if (Waterlogged) return 25306;
							else return 25307;
					else
						if (Powered)
							if (Waterlogged) return 25308;
							else return 25309;
						else
							if (Waterlogged) return 25310;
							else return 25311;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25312;
							else return 25313;
						else
							if (Waterlogged) return 25314;
							else return 25315;
					else
						if (Powered)
							if (Waterlogged) return 25316;
							else return 25317;
						else
							if (Waterlogged) return 25318;
							else return 25319;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25320;
							else return 25321;
						else
							if (Waterlogged) return 25322;
							else return 25323;
					else
						if (Powered)
							if (Waterlogged) return 25324;
							else return 25325;
						else
							if (Waterlogged) return 25326;
							else return 25327;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25328;
							else return 25329;
						else
							if (Waterlogged) return 25330;
							else return 25331;
					else
						if (Powered)
							if (Waterlogged) return 25332;
							else return 25333;
						else
							if (Waterlogged) return 25334;
							else return 25335;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25336;
							else return 25337;
						else
							if (Waterlogged) return 25338;
							else return 25339;
					else
						if (Powered)
							if (Waterlogged) return 25340;
							else return 25341;
						else
							if (Waterlogged) return 25342;
							else return 25343;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25344;
							else return 25345;
						else
							if (Waterlogged) return 25346;
							else return 25347;
					else
						if (Powered)
							if (Waterlogged) return 25348;
							else return 25349;
						else
							if (Waterlogged) return 25350;
							else return 25351;
		}
		BlockState ExposedCopperTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace ExposedCutCopper
	{
		constexpr BlockState ExposedCutCopper()
		{
			return 24006;
		}
	}
	namespace ExposedCutCopperSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState ExposedCutCopperSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 24348;
				else return 24349;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 24350;
				else return 24351;
			else
				if (Waterlogged) return 24352;
				else return 24353;
		}
		BlockState ExposedCutCopperSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace ExposedCutCopperStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState ExposedCutCopperStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24176;
						else return 24177;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24178;
						else return 24179;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24180;
						else return 24181;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24182;
						else return 24183;
					else
						if (Waterlogged) return 24184;
						else return 24185;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24186;
						else return 24187;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24188;
						else return 24189;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24190;
						else return 24191;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24192;
						else return 24193;
					else
						if (Waterlogged) return 24194;
						else return 24195;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24196;
						else return 24197;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24198;
						else return 24199;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24200;
						else return 24201;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24202;
						else return 24203;
					else
						if (Waterlogged) return 24204;
						else return 24205;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24206;
						else return 24207;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24208;
						else return 24209;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24210;
						else return 24211;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24212;
						else return 24213;
					else
						if (Waterlogged) return 24214;
						else return 24215;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24216;
						else return 24217;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24218;
						else return 24219;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24220;
						else return 24221;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24222;
						else return 24223;
					else
						if (Waterlogged) return 24224;
						else return 24225;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24226;
						else return 24227;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24228;
						else return 24229;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24230;
						else return 24231;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24232;
						else return 24233;
					else
						if (Waterlogged) return 24234;
						else return 24235;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24236;
						else return 24237;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24238;
						else return 24239;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24240;
						else return 24241;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24242;
						else return 24243;
					else
						if (Waterlogged) return 24244;
						else return 24245;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24246;
						else return 24247;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24248;
						else return 24249;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24250;
						else return 24251;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24252;
						else return 24253;
					else
						if (Waterlogged) return 24254;
						else return 24255;
		}
		BlockState ExposedCutCopperStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Farmland
	{
		constexpr BlockState Farmland(const unsigned char Moisture)
		{
			if (Moisture == 0) return 4350;
			else if (Moisture == 1) return 4351;
			else if (Moisture == 2) return 4352;
			else if (Moisture == 3) return 4353;
			else if (Moisture == 4) return 4354;
			else if (Moisture == 5) return 4355;
			else if (Moisture == 6) return 4356;
			else return 4357;
		}
		BlockState Farmland();
		unsigned char Moisture(BlockState Block);
	}
	namespace Fern
	{
		constexpr BlockState Fern()
		{
			return 2049;
		}
	}
	namespace Fire
	{
		constexpr BlockState Fire(const unsigned char Age, const bool East, const bool North, const bool South, const bool Up, const bool West)
		{
			if (Age == 0)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2406;
								else return 2407;
							else
								if (West) return 2408;
								else return 2409;
						else
							if (Up)
								if (West) return 2410;
								else return 2411;
							else
								if (West) return 2412;
								else return 2413;
					else
						if (South)
							if (Up)
								if (West) return 2414;
								else return 2415;
							else
								if (West) return 2416;
								else return 2417;
						else
							if (Up)
								if (West) return 2418;
								else return 2419;
							else
								if (West) return 2420;
								else return 2421;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2422;
								else return 2423;
							else
								if (West) return 2424;
								else return 2425;
						else
							if (Up)
								if (West) return 2426;
								else return 2427;
							else
								if (West) return 2428;
								else return 2429;
					else
						if (South)
							if (Up)
								if (West) return 2430;
								else return 2431;
							else
								if (West) return 2432;
								else return 2433;
						else
							if (Up)
								if (West) return 2434;
								else return 2435;
							else
								if (West) return 2436;
								else return 2437;
			else if (Age == 1)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2438;
								else return 2439;
							else
								if (West) return 2440;
								else return 2441;
						else
							if (Up)
								if (West) return 2442;
								else return 2443;
							else
								if (West) return 2444;
								else return 2445;
					else
						if (South)
							if (Up)
								if (West) return 2446;
								else return 2447;
							else
								if (West) return 2448;
								else return 2449;
						else
							if (Up)
								if (West) return 2450;
								else return 2451;
							else
								if (West) return 2452;
								else return 2453;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2454;
								else return 2455;
							else
								if (West) return 2456;
								else return 2457;
						else
							if (Up)
								if (West) return 2458;
								else return 2459;
							else
								if (West) return 2460;
								else return 2461;
					else
						if (South)
							if (Up)
								if (West) return 2462;
								else return 2463;
							else
								if (West) return 2464;
								else return 2465;
						else
							if (Up)
								if (West) return 2466;
								else return 2467;
							else
								if (West) return 2468;
								else return 2469;
			else if (Age == 2)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2470;
								else return 2471;
							else
								if (West) return 2472;
								else return 2473;
						else
							if (Up)
								if (West) return 2474;
								else return 2475;
							else
								if (West) return 2476;
								else return 2477;
					else
						if (South)
							if (Up)
								if (West) return 2478;
								else return 2479;
							else
								if (West) return 2480;
								else return 2481;
						else
							if (Up)
								if (West) return 2482;
								else return 2483;
							else
								if (West) return 2484;
								else return 2485;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2486;
								else return 2487;
							else
								if (West) return 2488;
								else return 2489;
						else
							if (Up)
								if (West) return 2490;
								else return 2491;
							else
								if (West) return 2492;
								else return 2493;
					else
						if (South)
							if (Up)
								if (West) return 2494;
								else return 2495;
							else
								if (West) return 2496;
								else return 2497;
						else
							if (Up)
								if (West) return 2498;
								else return 2499;
							else
								if (West) return 2500;
								else return 2501;
			else if (Age == 3)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2502;
								else return 2503;
							else
								if (West) return 2504;
								else return 2505;
						else
							if (Up)
								if (West) return 2506;
								else return 2507;
							else
								if (West) return 2508;
								else return 2509;
					else
						if (South)
							if (Up)
								if (West) return 2510;
								else return 2511;
							else
								if (West) return 2512;
								else return 2513;
						else
							if (Up)
								if (West) return 2514;
								else return 2515;
							else
								if (West) return 2516;
								else return 2517;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2518;
								else return 2519;
							else
								if (West) return 2520;
								else return 2521;
						else
							if (Up)
								if (West) return 2522;
								else return 2523;
							else
								if (West) return 2524;
								else return 2525;
					else
						if (South)
							if (Up)
								if (West) return 2526;
								else return 2527;
							else
								if (West) return 2528;
								else return 2529;
						else
							if (Up)
								if (West) return 2530;
								else return 2531;
							else
								if (West) return 2532;
								else return 2533;
			else if (Age == 4)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2534;
								else return 2535;
							else
								if (West) return 2536;
								else return 2537;
						else
							if (Up)
								if (West) return 2538;
								else return 2539;
							else
								if (West) return 2540;
								else return 2541;
					else
						if (South)
							if (Up)
								if (West) return 2542;
								else return 2543;
							else
								if (West) return 2544;
								else return 2545;
						else
							if (Up)
								if (West) return 2546;
								else return 2547;
							else
								if (West) return 2548;
								else return 2549;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2550;
								else return 2551;
							else
								if (West) return 2552;
								else return 2553;
						else
							if (Up)
								if (West) return 2554;
								else return 2555;
							else
								if (West) return 2556;
								else return 2557;
					else
						if (South)
							if (Up)
								if (West) return 2558;
								else return 2559;
							else
								if (West) return 2560;
								else return 2561;
						else
							if (Up)
								if (West) return 2562;
								else return 2563;
							else
								if (West) return 2564;
								else return 2565;
			else if (Age == 5)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2566;
								else return 2567;
							else
								if (West) return 2568;
								else return 2569;
						else
							if (Up)
								if (West) return 2570;
								else return 2571;
							else
								if (West) return 2572;
								else return 2573;
					else
						if (South)
							if (Up)
								if (West) return 2574;
								else return 2575;
							else
								if (West) return 2576;
								else return 2577;
						else
							if (Up)
								if (West) return 2578;
								else return 2579;
							else
								if (West) return 2580;
								else return 2581;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2582;
								else return 2583;
							else
								if (West) return 2584;
								else return 2585;
						else
							if (Up)
								if (West) return 2586;
								else return 2587;
							else
								if (West) return 2588;
								else return 2589;
					else
						if (South)
							if (Up)
								if (West) return 2590;
								else return 2591;
							else
								if (West) return 2592;
								else return 2593;
						else
							if (Up)
								if (West) return 2594;
								else return 2595;
							else
								if (West) return 2596;
								else return 2597;
			else if (Age == 6)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2598;
								else return 2599;
							else
								if (West) return 2600;
								else return 2601;
						else
							if (Up)
								if (West) return 2602;
								else return 2603;
							else
								if (West) return 2604;
								else return 2605;
					else
						if (South)
							if (Up)
								if (West) return 2606;
								else return 2607;
							else
								if (West) return 2608;
								else return 2609;
						else
							if (Up)
								if (West) return 2610;
								else return 2611;
							else
								if (West) return 2612;
								else return 2613;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2614;
								else return 2615;
							else
								if (West) return 2616;
								else return 2617;
						else
							if (Up)
								if (West) return 2618;
								else return 2619;
							else
								if (West) return 2620;
								else return 2621;
					else
						if (South)
							if (Up)
								if (West) return 2622;
								else return 2623;
							else
								if (West) return 2624;
								else return 2625;
						else
							if (Up)
								if (West) return 2626;
								else return 2627;
							else
								if (West) return 2628;
								else return 2629;
			else if (Age == 7)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2630;
								else return 2631;
							else
								if (West) return 2632;
								else return 2633;
						else
							if (Up)
								if (West) return 2634;
								else return 2635;
							else
								if (West) return 2636;
								else return 2637;
					else
						if (South)
							if (Up)
								if (West) return 2638;
								else return 2639;
							else
								if (West) return 2640;
								else return 2641;
						else
							if (Up)
								if (West) return 2642;
								else return 2643;
							else
								if (West) return 2644;
								else return 2645;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2646;
								else return 2647;
							else
								if (West) return 2648;
								else return 2649;
						else
							if (Up)
								if (West) return 2650;
								else return 2651;
							else
								if (West) return 2652;
								else return 2653;
					else
						if (South)
							if (Up)
								if (West) return 2654;
								else return 2655;
							else
								if (West) return 2656;
								else return 2657;
						else
							if (Up)
								if (West) return 2658;
								else return 2659;
							else
								if (West) return 2660;
								else return 2661;
			else if (Age == 8)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2662;
								else return 2663;
							else
								if (West) return 2664;
								else return 2665;
						else
							if (Up)
								if (West) return 2666;
								else return 2667;
							else
								if (West) return 2668;
								else return 2669;
					else
						if (South)
							if (Up)
								if (West) return 2670;
								else return 2671;
							else
								if (West) return 2672;
								else return 2673;
						else
							if (Up)
								if (West) return 2674;
								else return 2675;
							else
								if (West) return 2676;
								else return 2677;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2678;
								else return 2679;
							else
								if (West) return 2680;
								else return 2681;
						else
							if (Up)
								if (West) return 2682;
								else return 2683;
							else
								if (West) return 2684;
								else return 2685;
					else
						if (South)
							if (Up)
								if (West) return 2686;
								else return 2687;
							else
								if (West) return 2688;
								else return 2689;
						else
							if (Up)
								if (West) return 2690;
								else return 2691;
							else
								if (West) return 2692;
								else return 2693;
			else if (Age == 9)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2694;
								else return 2695;
							else
								if (West) return 2696;
								else return 2697;
						else
							if (Up)
								if (West) return 2698;
								else return 2699;
							else
								if (West) return 2700;
								else return 2701;
					else
						if (South)
							if (Up)
								if (West) return 2702;
								else return 2703;
							else
								if (West) return 2704;
								else return 2705;
						else
							if (Up)
								if (West) return 2706;
								else return 2707;
							else
								if (West) return 2708;
								else return 2709;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2710;
								else return 2711;
							else
								if (West) return 2712;
								else return 2713;
						else
							if (Up)
								if (West) return 2714;
								else return 2715;
							else
								if (West) return 2716;
								else return 2717;
					else
						if (South)
							if (Up)
								if (West) return 2718;
								else return 2719;
							else
								if (West) return 2720;
								else return 2721;
						else
							if (Up)
								if (West) return 2722;
								else return 2723;
							else
								if (West) return 2724;
								else return 2725;
			else if (Age == 10)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2726;
								else return 2727;
							else
								if (West) return 2728;
								else return 2729;
						else
							if (Up)
								if (West) return 2730;
								else return 2731;
							else
								if (West) return 2732;
								else return 2733;
					else
						if (South)
							if (Up)
								if (West) return 2734;
								else return 2735;
							else
								if (West) return 2736;
								else return 2737;
						else
							if (Up)
								if (West) return 2738;
								else return 2739;
							else
								if (West) return 2740;
								else return 2741;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2742;
								else return 2743;
							else
								if (West) return 2744;
								else return 2745;
						else
							if (Up)
								if (West) return 2746;
								else return 2747;
							else
								if (West) return 2748;
								else return 2749;
					else
						if (South)
							if (Up)
								if (West) return 2750;
								else return 2751;
							else
								if (West) return 2752;
								else return 2753;
						else
							if (Up)
								if (West) return 2754;
								else return 2755;
							else
								if (West) return 2756;
								else return 2757;
			else if (Age == 11)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2758;
								else return 2759;
							else
								if (West) return 2760;
								else return 2761;
						else
							if (Up)
								if (West) return 2762;
								else return 2763;
							else
								if (West) return 2764;
								else return 2765;
					else
						if (South)
							if (Up)
								if (West) return 2766;
								else return 2767;
							else
								if (West) return 2768;
								else return 2769;
						else
							if (Up)
								if (West) return 2770;
								else return 2771;
							else
								if (West) return 2772;
								else return 2773;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2774;
								else return 2775;
							else
								if (West) return 2776;
								else return 2777;
						else
							if (Up)
								if (West) return 2778;
								else return 2779;
							else
								if (West) return 2780;
								else return 2781;
					else
						if (South)
							if (Up)
								if (West) return 2782;
								else return 2783;
							else
								if (West) return 2784;
								else return 2785;
						else
							if (Up)
								if (West) return 2786;
								else return 2787;
							else
								if (West) return 2788;
								else return 2789;
			else if (Age == 12)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2790;
								else return 2791;
							else
								if (West) return 2792;
								else return 2793;
						else
							if (Up)
								if (West) return 2794;
								else return 2795;
							else
								if (West) return 2796;
								else return 2797;
					else
						if (South)
							if (Up)
								if (West) return 2798;
								else return 2799;
							else
								if (West) return 2800;
								else return 2801;
						else
							if (Up)
								if (West) return 2802;
								else return 2803;
							else
								if (West) return 2804;
								else return 2805;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2806;
								else return 2807;
							else
								if (West) return 2808;
								else return 2809;
						else
							if (Up)
								if (West) return 2810;
								else return 2811;
							else
								if (West) return 2812;
								else return 2813;
					else
						if (South)
							if (Up)
								if (West) return 2814;
								else return 2815;
							else
								if (West) return 2816;
								else return 2817;
						else
							if (Up)
								if (West) return 2818;
								else return 2819;
							else
								if (West) return 2820;
								else return 2821;
			else if (Age == 13)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2822;
								else return 2823;
							else
								if (West) return 2824;
								else return 2825;
						else
							if (Up)
								if (West) return 2826;
								else return 2827;
							else
								if (West) return 2828;
								else return 2829;
					else
						if (South)
							if (Up)
								if (West) return 2830;
								else return 2831;
							else
								if (West) return 2832;
								else return 2833;
						else
							if (Up)
								if (West) return 2834;
								else return 2835;
							else
								if (West) return 2836;
								else return 2837;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2838;
								else return 2839;
							else
								if (West) return 2840;
								else return 2841;
						else
							if (Up)
								if (West) return 2842;
								else return 2843;
							else
								if (West) return 2844;
								else return 2845;
					else
						if (South)
							if (Up)
								if (West) return 2846;
								else return 2847;
							else
								if (West) return 2848;
								else return 2849;
						else
							if (Up)
								if (West) return 2850;
								else return 2851;
							else
								if (West) return 2852;
								else return 2853;
			else if (Age == 14)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2854;
								else return 2855;
							else
								if (West) return 2856;
								else return 2857;
						else
							if (Up)
								if (West) return 2858;
								else return 2859;
							else
								if (West) return 2860;
								else return 2861;
					else
						if (South)
							if (Up)
								if (West) return 2862;
								else return 2863;
							else
								if (West) return 2864;
								else return 2865;
						else
							if (Up)
								if (West) return 2866;
								else return 2867;
							else
								if (West) return 2868;
								else return 2869;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2870;
								else return 2871;
							else
								if (West) return 2872;
								else return 2873;
						else
							if (Up)
								if (West) return 2874;
								else return 2875;
							else
								if (West) return 2876;
								else return 2877;
					else
						if (South)
							if (Up)
								if (West) return 2878;
								else return 2879;
							else
								if (West) return 2880;
								else return 2881;
						else
							if (Up)
								if (West) return 2882;
								else return 2883;
							else
								if (West) return 2884;
								else return 2885;
			else
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2886;
								else return 2887;
							else
								if (West) return 2888;
								else return 2889;
						else
							if (Up)
								if (West) return 2890;
								else return 2891;
							else
								if (West) return 2892;
								else return 2893;
					else
						if (South)
							if (Up)
								if (West) return 2894;
								else return 2895;
							else
								if (West) return 2896;
								else return 2897;
						else
							if (Up)
								if (West) return 2898;
								else return 2899;
							else
								if (West) return 2900;
								else return 2901;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2902;
								else return 2903;
							else
								if (West) return 2904;
								else return 2905;
						else
							if (Up)
								if (West) return 2906;
								else return 2907;
							else
								if (West) return 2908;
								else return 2909;
					else
						if (South)
							if (Up)
								if (West) return 2910;
								else return 2911;
							else
								if (West) return 2912;
								else return 2913;
						else
							if (Up)
								if (West) return 2914;
								else return 2915;
							else
								if (West) return 2916;
								else return 2917;
		}
		BlockState Fire();
		unsigned char Age(BlockState Block);
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Up(BlockState Block);
		bool West(BlockState Block);
	}
	namespace FireCoral
	{
		constexpr BlockState FireCoral(const bool Waterlogged)
		{
			if (Waterlogged) return 13884;
			else return 13885;
		}
		BlockState FireCoral();
		bool Waterlogged(BlockState Block);
	}
	namespace FireCoralBlock
	{
		constexpr BlockState FireCoralBlock()
		{
			return 13866;
		}
	}
	namespace FireCoralFan
	{
		constexpr BlockState FireCoralFan(const bool Waterlogged)
		{
			if (Waterlogged) return 13904;
			else return 13905;
		}
		BlockState FireCoralFan();
		bool Waterlogged(BlockState Block);
	}
	namespace FireCoralWallFan
	{
		constexpr BlockState FireCoralWallFan(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 13972;
				else return 13973;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 13974;
				else return 13975;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 13976;
				else return 13977;
			else
				if (Waterlogged) return 13978;
				else return 13979;
		}
		BlockState FireCoralWallFan();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace FireflyBush
	{
		constexpr BlockState FireflyBush()
		{
			return 27945;
		}
	}
	namespace FletchingTable
	{
		constexpr BlockState FletchingTable()
		{
			return 19492;
		}
	}
	namespace FlowerPot
	{
		constexpr BlockState FlowerPot()
		{
			return 9351;
		}
	}
	namespace FloweringAzalea
	{
		constexpr BlockState FloweringAzalea()
		{
			return 25885;
		}
	}
	namespace FloweringAzaleaLeaves
	{
		constexpr BlockState FloweringAzaleaLeaves(const unsigned char Distance, const bool Persistent, const bool Waterlogged)
		{
			if (Distance == 1)
				if (Persistent)
					if (Waterlogged) return 532;
					else return 533;
				else
					if (Waterlogged) return 534;
					else return 535;
			else if (Distance == 2)
				if (Persistent)
					if (Waterlogged) return 536;
					else return 537;
				else
					if (Waterlogged) return 538;
					else return 539;
			else if (Distance == 3)
				if (Persistent)
					if (Waterlogged) return 540;
					else return 541;
				else
					if (Waterlogged) return 542;
					else return 543;
			else if (Distance == 4)
				if (Persistent)
					if (Waterlogged) return 544;
					else return 545;
				else
					if (Waterlogged) return 546;
					else return 547;
			else if (Distance == 5)
				if (Persistent)
					if (Waterlogged) return 548;
					else return 549;
				else
					if (Waterlogged) return 550;
					else return 551;
			else if (Distance == 6)
				if (Persistent)
					if (Waterlogged) return 552;
					else return 553;
				else
					if (Waterlogged) return 554;
					else return 555;
			else
				if (Persistent)
					if (Waterlogged) return 556;
					else return 557;
				else
					if (Waterlogged) return 558;
					else return 559;
		}
		BlockState FloweringAzaleaLeaves();
		unsigned char Distance(BlockState Block);
		bool Persistent(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Frogspawn
	{
		constexpr BlockState Frogspawn()
		{
			return 27664;
		}
	}
	namespace FrostedIce
	{
		constexpr BlockState FrostedIce(const unsigned char Age)
		{
			if (Age == 0) return 13562;
			else if (Age == 1) return 13563;
			else if (Age == 2) return 13564;
			else return 13565;
		}
		BlockState FrostedIce();
		unsigned char Age(BlockState Block);
	}
	namespace Furnace
	{
		constexpr BlockState Furnace(const eBlockFace Facing, const bool Lit)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Lit) return 4358;
				else return 4359;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Lit) return 4360;
				else return 4361;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Lit) return 4362;
				else return 4363;
			else
				if (Lit) return 4364;
				else return 4365;
		}
		BlockState Furnace();
		eBlockFace Facing(BlockState Block);
		bool Lit(BlockState Block);
	}
	namespace GildedBlackstone
	{
		constexpr BlockState GildedBlackstone()
		{
			return 21345;
		}
	}
	namespace Glass
	{
		constexpr BlockState Glass()
		{
			return 562;
		}
	}
	namespace GlassPane
	{
		constexpr BlockState GlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 7022;
							else return 7023;
						else
							if (West) return 7024;
							else return 7025;
					else
						if (Waterlogged)
							if (West) return 7026;
							else return 7027;
						else
							if (West) return 7028;
							else return 7029;
				else
					if (South)
						if (Waterlogged)
							if (West) return 7030;
							else return 7031;
						else
							if (West) return 7032;
							else return 7033;
					else
						if (Waterlogged)
							if (West) return 7034;
							else return 7035;
						else
							if (West) return 7036;
							else return 7037;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 7038;
							else return 7039;
						else
							if (West) return 7040;
							else return 7041;
					else
						if (Waterlogged)
							if (West) return 7042;
							else return 7043;
						else
							if (West) return 7044;
							else return 7045;
				else
					if (South)
						if (Waterlogged)
							if (West) return 7046;
							else return 7047;
						else
							if (West) return 7048;
							else return 7049;
					else
						if (Waterlogged)
							if (West) return 7050;
							else return 7051;
						else
							if (West) return 7052;
							else return 7053;
		}
		BlockState GlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace GlowLichen
	{
		constexpr BlockState GlowLichen(const bool Down, const bool East, const bool North, const bool South, const bool Up, const bool Waterlogged, const bool West)
		{
			if (Down)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 7112;
									else return 7113;
								else
									if (West) return 7114;
									else return 7115;
							else
								if (Waterlogged)
									if (West) return 7116;
									else return 7117;
								else
									if (West) return 7118;
									else return 7119;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 7120;
									else return 7121;
								else
									if (West) return 7122;
									else return 7123;
							else
								if (Waterlogged)
									if (West) return 7124;
									else return 7125;
								else
									if (West) return 7126;
									else return 7127;
					else
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 7128;
									else return 7129;
								else
									if (West) return 7130;
									else return 7131;
							else
								if (Waterlogged)
									if (West) return 7132;
									else return 7133;
								else
									if (West) return 7134;
									else return 7135;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 7136;
									else return 7137;
								else
									if (West) return 7138;
									else return 7139;
							else
								if (Waterlogged)
									if (West) return 7140;
									else return 7141;
								else
									if (West) return 7142;
									else return 7143;
				else
					if (North)
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 7144;
									else return 7145;
								else
									if (West) return 7146;
									else return 7147;
							else
								if (Waterlogged)
									if (West) return 7148;
									else return 7149;
								else
									if (West) return 7150;
									else return 7151;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 7152;
									else return 7153;
								else
									if (West) return 7154;
									else return 7155;
							else
								if (Waterlogged)
									if (West) return 7156;
									else return 7157;
								else
									if (West) return 7158;
									else return 7159;
					else
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 7160;
									else return 7161;
								else
									if (West) return 7162;
									else return 7163;
							else
								if (Waterlogged)
									if (West) return 7164;
									else return 7165;
								else
									if (West) return 7166;
									else return 7167;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 7168;
									else return 7169;
								else
									if (West) return 7170;
									else return 7171;
							else
								if (Waterlogged)
									if (West) return 7172;
									else return 7173;
								else
									if (West) return 7174;
									else return 7175;
			else
				if (East)
					if (North)
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 7176;
									else return 7177;
								else
									if (West) return 7178;
									else return 7179;
							else
								if (Waterlogged)
									if (West) return 7180;
									else return 7181;
								else
									if (West) return 7182;
									else return 7183;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 7184;
									else return 7185;
								else
									if (West) return 7186;
									else return 7187;
							else
								if (Waterlogged)
									if (West) return 7188;
									else return 7189;
								else
									if (West) return 7190;
									else return 7191;
					else
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 7192;
									else return 7193;
								else
									if (West) return 7194;
									else return 7195;
							else
								if (Waterlogged)
									if (West) return 7196;
									else return 7197;
								else
									if (West) return 7198;
									else return 7199;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 7200;
									else return 7201;
								else
									if (West) return 7202;
									else return 7203;
							else
								if (Waterlogged)
									if (West) return 7204;
									else return 7205;
								else
									if (West) return 7206;
									else return 7207;
				else
					if (North)
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 7208;
									else return 7209;
								else
									if (West) return 7210;
									else return 7211;
							else
								if (Waterlogged)
									if (West) return 7212;
									else return 7213;
								else
									if (West) return 7214;
									else return 7215;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 7216;
									else return 7217;
								else
									if (West) return 7218;
									else return 7219;
							else
								if (Waterlogged)
									if (West) return 7220;
									else return 7221;
								else
									if (West) return 7222;
									else return 7223;
					else
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 7224;
									else return 7225;
								else
									if (West) return 7226;
									else return 7227;
							else
								if (Waterlogged)
									if (West) return 7228;
									else return 7229;
								else
									if (West) return 7230;
									else return 7231;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 7232;
									else return 7233;
								else
									if (West) return 7234;
									else return 7235;
							else
								if (Waterlogged)
									if (West) return 7236;
									else return 7237;
								else
									if (West) return 7238;
									else return 7239;
		}
		BlockState GlowLichen();
		bool Down(BlockState Block);
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace Glowstone
	{
		constexpr BlockState Glowstone()
		{
			return 6042;
		}
	}
	namespace GoldBlock
	{
		constexpr BlockState GoldBlock()
		{
			return 2137;
		}
	}
	namespace GoldOre
	{
		constexpr BlockState GoldOre()
		{
			return 129;
		}
	}
	namespace Granite
	{
		constexpr BlockState Granite()
		{
			return 2;
		}
	}
	namespace GraniteSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState GraniteSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 15185;
				else return 15186;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 15187;
				else return 15188;
			else
				if (Waterlogged) return 15189;
				else return 15190;
		}
		BlockState GraniteSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace GraniteStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState GraniteStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14737;
						else return 14738;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14739;
						else return 14740;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14741;
						else return 14742;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14743;
						else return 14744;
					else
						if (Waterlogged) return 14745;
						else return 14746;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14747;
						else return 14748;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14749;
						else return 14750;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14751;
						else return 14752;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14753;
						else return 14754;
					else
						if (Waterlogged) return 14755;
						else return 14756;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14757;
						else return 14758;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14759;
						else return 14760;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14761;
						else return 14762;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14763;
						else return 14764;
					else
						if (Waterlogged) return 14765;
						else return 14766;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14767;
						else return 14768;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14769;
						else return 14770;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14771;
						else return 14772;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14773;
						else return 14774;
					else
						if (Waterlogged) return 14775;
						else return 14776;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14777;
						else return 14778;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14779;
						else return 14780;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14781;
						else return 14782;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14783;
						else return 14784;
					else
						if (Waterlogged) return 14785;
						else return 14786;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14787;
						else return 14788;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14789;
						else return 14790;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14791;
						else return 14792;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14793;
						else return 14794;
					else
						if (Waterlogged) return 14795;
						else return 14796;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14797;
						else return 14798;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14799;
						else return 14800;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14801;
						else return 14802;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14803;
						else return 14804;
					else
						if (Waterlogged) return 14805;
						else return 14806;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14807;
						else return 14808;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14809;
						else return 14810;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14811;
						else return 14812;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14813;
						else return 14814;
					else
						if (Waterlogged) return 14815;
						else return 14816;
		}
		BlockState GraniteStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace GraniteWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState GraniteWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16511;
								else if (West == West::Low) return 16512;
								else return 16513;
							else
								if (West == West::None) return 16514;
								else if (West == West::Low) return 16515;
								else return 16516;
						else
							if (Waterlogged)
								if (West == West::None) return 16517;
								else if (West == West::Low) return 16518;
								else return 16519;
							else
								if (West == West::None) return 16520;
								else if (West == West::Low) return 16521;
								else return 16522;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16523;
								else if (West == West::Low) return 16524;
								else return 16525;
							else
								if (West == West::None) return 16526;
								else if (West == West::Low) return 16527;
								else return 16528;
						else
							if (Waterlogged)
								if (West == West::None) return 16529;
								else if (West == West::Low) return 16530;
								else return 16531;
							else
								if (West == West::None) return 16532;
								else if (West == West::Low) return 16533;
								else return 16534;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16535;
								else if (West == West::Low) return 16536;
								else return 16537;
							else
								if (West == West::None) return 16538;
								else if (West == West::Low) return 16539;
								else return 16540;
						else
							if (Waterlogged)
								if (West == West::None) return 16541;
								else if (West == West::Low) return 16542;
								else return 16543;
							else
								if (West == West::None) return 16544;
								else if (West == West::Low) return 16545;
								else return 16546;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16547;
								else if (West == West::Low) return 16548;
								else return 16549;
							else
								if (West == West::None) return 16550;
								else if (West == West::Low) return 16551;
								else return 16552;
						else
							if (Waterlogged)
								if (West == West::None) return 16553;
								else if (West == West::Low) return 16554;
								else return 16555;
							else
								if (West == West::None) return 16556;
								else if (West == West::Low) return 16557;
								else return 16558;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16559;
								else if (West == West::Low) return 16560;
								else return 16561;
							else
								if (West == West::None) return 16562;
								else if (West == West::Low) return 16563;
								else return 16564;
						else
							if (Waterlogged)
								if (West == West::None) return 16565;
								else if (West == West::Low) return 16566;
								else return 16567;
							else
								if (West == West::None) return 16568;
								else if (West == West::Low) return 16569;
								else return 16570;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16571;
								else if (West == West::Low) return 16572;
								else return 16573;
							else
								if (West == West::None) return 16574;
								else if (West == West::Low) return 16575;
								else return 16576;
						else
							if (Waterlogged)
								if (West == West::None) return 16577;
								else if (West == West::Low) return 16578;
								else return 16579;
							else
								if (West == West::None) return 16580;
								else if (West == West::Low) return 16581;
								else return 16582;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16583;
								else if (West == West::Low) return 16584;
								else return 16585;
							else
								if (West == West::None) return 16586;
								else if (West == West::Low) return 16587;
								else return 16588;
						else
							if (Waterlogged)
								if (West == West::None) return 16589;
								else if (West == West::Low) return 16590;
								else return 16591;
							else
								if (West == West::None) return 16592;
								else if (West == West::Low) return 16593;
								else return 16594;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16595;
								else if (West == West::Low) return 16596;
								else return 16597;
							else
								if (West == West::None) return 16598;
								else if (West == West::Low) return 16599;
								else return 16600;
						else
							if (Waterlogged)
								if (West == West::None) return 16601;
								else if (West == West::Low) return 16602;
								else return 16603;
							else
								if (West == West::None) return 16604;
								else if (West == West::Low) return 16605;
								else return 16606;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16607;
								else if (West == West::Low) return 16608;
								else return 16609;
							else
								if (West == West::None) return 16610;
								else if (West == West::Low) return 16611;
								else return 16612;
						else
							if (Waterlogged)
								if (West == West::None) return 16613;
								else if (West == West::Low) return 16614;
								else return 16615;
							else
								if (West == West::None) return 16616;
								else if (West == West::Low) return 16617;
								else return 16618;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16619;
								else if (West == West::Low) return 16620;
								else return 16621;
							else
								if (West == West::None) return 16622;
								else if (West == West::Low) return 16623;
								else return 16624;
						else
							if (Waterlogged)
								if (West == West::None) return 16625;
								else if (West == West::Low) return 16626;
								else return 16627;
							else
								if (West == West::None) return 16628;
								else if (West == West::Low) return 16629;
								else return 16630;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16631;
								else if (West == West::Low) return 16632;
								else return 16633;
							else
								if (West == West::None) return 16634;
								else if (West == West::Low) return 16635;
								else return 16636;
						else
							if (Waterlogged)
								if (West == West::None) return 16637;
								else if (West == West::Low) return 16638;
								else return 16639;
							else
								if (West == West::None) return 16640;
								else if (West == West::Low) return 16641;
								else return 16642;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16643;
								else if (West == West::Low) return 16644;
								else return 16645;
							else
								if (West == West::None) return 16646;
								else if (West == West::Low) return 16647;
								else return 16648;
						else
							if (Waterlogged)
								if (West == West::None) return 16649;
								else if (West == West::Low) return 16650;
								else return 16651;
							else
								if (West == West::None) return 16652;
								else if (West == West::Low) return 16653;
								else return 16654;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16655;
								else if (West == West::Low) return 16656;
								else return 16657;
							else
								if (West == West::None) return 16658;
								else if (West == West::Low) return 16659;
								else return 16660;
						else
							if (Waterlogged)
								if (West == West::None) return 16661;
								else if (West == West::Low) return 16662;
								else return 16663;
							else
								if (West == West::None) return 16664;
								else if (West == West::Low) return 16665;
								else return 16666;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16667;
								else if (West == West::Low) return 16668;
								else return 16669;
							else
								if (West == West::None) return 16670;
								else if (West == West::Low) return 16671;
								else return 16672;
						else
							if (Waterlogged)
								if (West == West::None) return 16673;
								else if (West == West::Low) return 16674;
								else return 16675;
							else
								if (West == West::None) return 16676;
								else if (West == West::Low) return 16677;
								else return 16678;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16679;
								else if (West == West::Low) return 16680;
								else return 16681;
							else
								if (West == West::None) return 16682;
								else if (West == West::Low) return 16683;
								else return 16684;
						else
							if (Waterlogged)
								if (West == West::None) return 16685;
								else if (West == West::Low) return 16686;
								else return 16687;
							else
								if (West == West::None) return 16688;
								else if (West == West::Low) return 16689;
								else return 16690;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16691;
								else if (West == West::Low) return 16692;
								else return 16693;
							else
								if (West == West::None) return 16694;
								else if (West == West::Low) return 16695;
								else return 16696;
						else
							if (Waterlogged)
								if (West == West::None) return 16697;
								else if (West == West::Low) return 16698;
								else return 16699;
							else
								if (West == West::None) return 16700;
								else if (West == West::Low) return 16701;
								else return 16702;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16703;
								else if (West == West::Low) return 16704;
								else return 16705;
							else
								if (West == West::None) return 16706;
								else if (West == West::Low) return 16707;
								else return 16708;
						else
							if (Waterlogged)
								if (West == West::None) return 16709;
								else if (West == West::Low) return 16710;
								else return 16711;
							else
								if (West == West::None) return 16712;
								else if (West == West::Low) return 16713;
								else return 16714;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16715;
								else if (West == West::Low) return 16716;
								else return 16717;
							else
								if (West == West::None) return 16718;
								else if (West == West::Low) return 16719;
								else return 16720;
						else
							if (Waterlogged)
								if (West == West::None) return 16721;
								else if (West == West::Low) return 16722;
								else return 16723;
							else
								if (West == West::None) return 16724;
								else if (West == West::Low) return 16725;
								else return 16726;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16727;
								else if (West == West::Low) return 16728;
								else return 16729;
							else
								if (West == West::None) return 16730;
								else if (West == West::Low) return 16731;
								else return 16732;
						else
							if (Waterlogged)
								if (West == West::None) return 16733;
								else if (West == West::Low) return 16734;
								else return 16735;
							else
								if (West == West::None) return 16736;
								else if (West == West::Low) return 16737;
								else return 16738;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16739;
								else if (West == West::Low) return 16740;
								else return 16741;
							else
								if (West == West::None) return 16742;
								else if (West == West::Low) return 16743;
								else return 16744;
						else
							if (Waterlogged)
								if (West == West::None) return 16745;
								else if (West == West::Low) return 16746;
								else return 16747;
							else
								if (West == West::None) return 16748;
								else if (West == West::Low) return 16749;
								else return 16750;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16751;
								else if (West == West::Low) return 16752;
								else return 16753;
							else
								if (West == West::None) return 16754;
								else if (West == West::Low) return 16755;
								else return 16756;
						else
							if (Waterlogged)
								if (West == West::None) return 16757;
								else if (West == West::Low) return 16758;
								else return 16759;
							else
								if (West == West::None) return 16760;
								else if (West == West::Low) return 16761;
								else return 16762;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16763;
								else if (West == West::Low) return 16764;
								else return 16765;
							else
								if (West == West::None) return 16766;
								else if (West == West::Low) return 16767;
								else return 16768;
						else
							if (Waterlogged)
								if (West == West::None) return 16769;
								else if (West == West::Low) return 16770;
								else return 16771;
							else
								if (West == West::None) return 16772;
								else if (West == West::Low) return 16773;
								else return 16774;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16775;
								else if (West == West::Low) return 16776;
								else return 16777;
							else
								if (West == West::None) return 16778;
								else if (West == West::Low) return 16779;
								else return 16780;
						else
							if (Waterlogged)
								if (West == West::None) return 16781;
								else if (West == West::Low) return 16782;
								else return 16783;
							else
								if (West == West::None) return 16784;
								else if (West == West::Low) return 16785;
								else return 16786;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16787;
								else if (West == West::Low) return 16788;
								else return 16789;
							else
								if (West == West::None) return 16790;
								else if (West == West::Low) return 16791;
								else return 16792;
						else
							if (Waterlogged)
								if (West == West::None) return 16793;
								else if (West == West::Low) return 16794;
								else return 16795;
							else
								if (West == West::None) return 16796;
								else if (West == West::Low) return 16797;
								else return 16798;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16799;
								else if (West == West::Low) return 16800;
								else return 16801;
							else
								if (West == West::None) return 16802;
								else if (West == West::Low) return 16803;
								else return 16804;
						else
							if (Waterlogged)
								if (West == West::None) return 16805;
								else if (West == West::Low) return 16806;
								else return 16807;
							else
								if (West == West::None) return 16808;
								else if (West == West::Low) return 16809;
								else return 16810;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16811;
								else if (West == West::Low) return 16812;
								else return 16813;
							else
								if (West == West::None) return 16814;
								else if (West == West::Low) return 16815;
								else return 16816;
						else
							if (Waterlogged)
								if (West == West::None) return 16817;
								else if (West == West::Low) return 16818;
								else return 16819;
							else
								if (West == West::None) return 16820;
								else if (West == West::Low) return 16821;
								else return 16822;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16823;
								else if (West == West::Low) return 16824;
								else return 16825;
							else
								if (West == West::None) return 16826;
								else if (West == West::Low) return 16827;
								else return 16828;
						else
							if (Waterlogged)
								if (West == West::None) return 16829;
								else if (West == West::Low) return 16830;
								else return 16831;
							else
								if (West == West::None) return 16832;
								else if (West == West::Low) return 16833;
								else return 16834;
		}
		BlockState GraniteWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace GrassBlock
	{
		constexpr BlockState GrassBlock(const bool Snowy)
		{
			if (Snowy) return 8;
			else return 9;
		}
		BlockState GrassBlock();
		bool Snowy(BlockState Block);
	}
	namespace Gravel
	{
		constexpr BlockState Gravel()
		{
			return 124;
		}
	}
	namespace GrayBanner
	{
		constexpr BlockState GrayBanner(const unsigned char Rotation)
		{
			if (Rotation == 0) return 11760;
			else if (Rotation == 1) return 11761;
			else if (Rotation == 2) return 11762;
			else if (Rotation == 3) return 11763;
			else if (Rotation == 4) return 11764;
			else if (Rotation == 5) return 11765;
			else if (Rotation == 6) return 11766;
			else if (Rotation == 7) return 11767;
			else if (Rotation == 8) return 11768;
			else if (Rotation == 9) return 11769;
			else if (Rotation == 10) return 11770;
			else if (Rotation == 11) return 11771;
			else if (Rotation == 12) return 11772;
			else if (Rotation == 13) return 11773;
			else if (Rotation == 14) return 11774;
			else return 11775;
		}
		BlockState GrayBanner();
		unsigned char Rotation(BlockState Block);
	}
	namespace GrayBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState GrayBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1843;
					else return 1844;
				else
					if (Part == Part::Head) return 1845;
					else return 1846;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1847;
					else return 1848;
				else
					if (Part == Part::Head) return 1849;
					else return 1850;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1851;
					else return 1852;
				else
					if (Part == Part::Head) return 1853;
					else return 1854;
			else
				if (Occupied)
					if (Part == Part::Head) return 1855;
					else return 1856;
				else
					if (Part == Part::Head) return 1857;
					else return 1858;
		}
		BlockState GrayBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace GrayCandle
	{
		constexpr BlockState GrayCandle(const unsigned char Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 21913;
					else return 21914;
				else
					if (Waterlogged) return 21915;
					else return 21916;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 21917;
					else return 21918;
				else
					if (Waterlogged) return 21919;
					else return 21920;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 21921;
					else return 21922;
				else
					if (Waterlogged) return 21923;
					else return 21924;
			else
				if (Lit)
					if (Waterlogged) return 21925;
					else return 21926;
				else
					if (Waterlogged) return 21927;
					else return 21928;
		}
		BlockState GrayCandle();
		unsigned char Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace GrayCandleCake
	{
		constexpr BlockState GrayCandleCake(const bool Lit)
		{
			if (Lit) return 22073;
			else return 22074;
		}
		BlockState GrayCandleCake();
		bool Lit(BlockState Block);
	}
	namespace GrayCarpet
	{
		constexpr BlockState GrayCarpet()
		{
			return 11624;
		}
	}
	namespace GrayConcrete
	{
		constexpr BlockState GrayConcrete()
		{
			return 13758;
		}
	}
	namespace GrayConcretePowder
	{
		constexpr BlockState GrayConcretePowder()
		{
			return 13774;
		}
	}
	namespace GrayGlazedTerracotta
	{
		constexpr BlockState GrayGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13715;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13716;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13717;
			else return 13718;
		}
		BlockState GrayGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace GrayShulkerBox
	{
		constexpr BlockState GrayShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13633;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 13634;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13635;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13636;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 13637;
			else return 13638;
		}
		BlockState GrayShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace GrayStainedGlass
	{
		constexpr BlockState GrayStainedGlass()
		{
			return 6131;
		}
	}
	namespace GrayStainedGlassPane
	{
		constexpr BlockState GrayStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10405;
							else return 10406;
						else
							if (West) return 10407;
							else return 10408;
					else
						if (Waterlogged)
							if (West) return 10409;
							else return 10410;
						else
							if (West) return 10411;
							else return 10412;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10413;
							else return 10414;
						else
							if (West) return 10415;
							else return 10416;
					else
						if (Waterlogged)
							if (West) return 10417;
							else return 10418;
						else
							if (West) return 10419;
							else return 10420;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10421;
							else return 10422;
						else
							if (West) return 10423;
							else return 10424;
					else
						if (Waterlogged)
							if (West) return 10425;
							else return 10426;
						else
							if (West) return 10427;
							else return 10428;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10429;
							else return 10430;
						else
							if (West) return 10431;
							else return 10432;
					else
						if (Waterlogged)
							if (West) return 10433;
							else return 10434;
						else
							if (West) return 10435;
							else return 10436;
		}
		BlockState GrayStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace GrayTerracotta
	{
		constexpr BlockState GrayTerracotta()
		{
			return 10172;
		}
	}
	namespace GrayWallBanner
	{
		constexpr BlockState GrayWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11932;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11933;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11934;
			else return 11935;
		}
		BlockState GrayWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace GrayWool
	{
		constexpr BlockState GrayWool()
		{
			return 2100;
		}
	}
	namespace GreenBanner
	{
		constexpr BlockState GreenBanner(const unsigned char Rotation)
		{
			if (Rotation == 0) return 11856;
			else if (Rotation == 1) return 11857;
			else if (Rotation == 2) return 11858;
			else if (Rotation == 3) return 11859;
			else if (Rotation == 4) return 11860;
			else if (Rotation == 5) return 11861;
			else if (Rotation == 6) return 11862;
			else if (Rotation == 7) return 11863;
			else if (Rotation == 8) return 11864;
			else if (Rotation == 9) return 11865;
			else if (Rotation == 10) return 11866;
			else if (Rotation == 11) return 11867;
			else if (Rotation == 12) return 11868;
			else if (Rotation == 13) return 11869;
			else if (Rotation == 14) return 11870;
			else return 11871;
		}
		BlockState GreenBanner();
		unsigned char Rotation(BlockState Block);
	}
	namespace GreenBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState GreenBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1939;
					else return 1940;
				else
					if (Part == Part::Head) return 1941;
					else return 1942;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1943;
					else return 1944;
				else
					if (Part == Part::Head) return 1945;
					else return 1946;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1947;
					else return 1948;
				else
					if (Part == Part::Head) return 1949;
					else return 1950;
			else
				if (Occupied)
					if (Part == Part::Head) return 1951;
					else return 1952;
				else
					if (Part == Part::Head) return 1953;
					else return 1954;
		}
		BlockState GreenBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace GreenCandle
	{
		constexpr BlockState GreenCandle(const unsigned char Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 22009;
					else return 22010;
				else
					if (Waterlogged) return 22011;
					else return 22012;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 22013;
					else return 22014;
				else
					if (Waterlogged) return 22015;
					else return 22016;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 22017;
					else return 22018;
				else
					if (Waterlogged) return 22019;
					else return 22020;
			else
				if (Lit)
					if (Waterlogged) return 22021;
					else return 22022;
				else
					if (Waterlogged) return 22023;
					else return 22024;
		}
		BlockState GreenCandle();
		unsigned char Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace GreenCandleCake
	{
		constexpr BlockState GreenCandleCake(const bool Lit)
		{
			if (Lit) return 22085;
			else return 22086;
		}
		BlockState GreenCandleCake();
		bool Lit(BlockState Block);
	}
	namespace GreenCarpet
	{
		constexpr BlockState GreenCarpet()
		{
			return 11630;
		}
	}
	namespace GreenConcrete
	{
		constexpr BlockState GreenConcrete()
		{
			return 13764;
		}
	}
	namespace GreenConcretePowder
	{
		constexpr BlockState GreenConcretePowder()
		{
			return 13780;
		}
	}
	namespace GreenGlazedTerracotta
	{
		constexpr BlockState GreenGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13739;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13740;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13741;
			else return 13742;
		}
		BlockState GreenGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace GreenShulkerBox
	{
		constexpr BlockState GreenShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13669;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 13670;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13671;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13672;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 13673;
			else return 13674;
		}
		BlockState GreenShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace GreenStainedGlass
	{
		constexpr BlockState GreenStainedGlass()
		{
			return 6137;
		}
	}
	namespace GreenStainedGlassPane
	{
		constexpr BlockState GreenStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10597;
							else return 10598;
						else
							if (West) return 10599;
							else return 10600;
					else
						if (Waterlogged)
							if (West) return 10601;
							else return 10602;
						else
							if (West) return 10603;
							else return 10604;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10605;
							else return 10606;
						else
							if (West) return 10607;
							else return 10608;
					else
						if (Waterlogged)
							if (West) return 10609;
							else return 10610;
						else
							if (West) return 10611;
							else return 10612;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10613;
							else return 10614;
						else
							if (West) return 10615;
							else return 10616;
					else
						if (Waterlogged)
							if (West) return 10617;
							else return 10618;
						else
							if (West) return 10619;
							else return 10620;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10621;
							else return 10622;
						else
							if (West) return 10623;
							else return 10624;
					else
						if (Waterlogged)
							if (West) return 10625;
							else return 10626;
						else
							if (West) return 10627;
							else return 10628;
		}
		BlockState GreenStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace GreenTerracotta
	{
		constexpr BlockState GreenTerracotta()
		{
			return 10178;
		}
	}
	namespace GreenWallBanner
	{
		constexpr BlockState GreenWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11956;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11957;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11958;
			else return 11959;
		}
		BlockState GreenWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace GreenWool
	{
		constexpr BlockState GreenWool()
		{
			return 2106;
		}
	}
	namespace Grindstone
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState Grindstone(const enum Face Face, const eBlockFace Facing)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 19493;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 19494;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 19495;
				else return 19496;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 19497;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 19498;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 19499;
				else return 19500;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 19501;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 19502;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 19503;
				else return 19504;
		}
		BlockState Grindstone();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
	}
	namespace HangingRoots
	{
		constexpr BlockState HangingRoots(const bool Waterlogged)
		{
			if (Waterlogged) return 25992;
			else return 25993;
		}
		BlockState HangingRoots();
		bool Waterlogged(BlockState Block);
	}
	namespace HayBlock
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState HayBlock(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 11614;
			else if (Axis == Axis::Y) return 11615;
			else return 11616;
		}
		BlockState HayBlock();
		enum Axis Axis(BlockState Block);
	}
	namespace HeavyCore
	{
		constexpr BlockState HeavyCore(const bool Waterlogged)
		{
			if (Waterlogged) return 27774;
			else return 27775;
		}
		BlockState HeavyCore();
		bool Waterlogged(BlockState Block);
	}
	namespace HeavyWeightedPressurePlate
	{
		constexpr BlockState HeavyWeightedPressurePlate(const unsigned char Power)
		{
			if (Power == 0) return 9968;
			else if (Power == 1) return 9969;
			else if (Power == 2) return 9970;
			else if (Power == 3) return 9971;
			else if (Power == 4) return 9972;
			else if (Power == 5) return 9973;
			else if (Power == 6) return 9974;
			else if (Power == 7) return 9975;
			else if (Power == 8) return 9976;
			else if (Power == 9) return 9977;
			else if (Power == 10) return 9978;
			else if (Power == 11) return 9979;
			else if (Power == 12) return 9980;
			else if (Power == 13) return 9981;
			else if (Power == 14) return 9982;
			else return 9983;
		}
		BlockState HeavyWeightedPressurePlate();
		unsigned char Power(BlockState Block);
	}
	namespace HoneyBlock
	{
		constexpr BlockState HoneyBlock()
		{
			return 20505;
		}
	}
	namespace HoneycombBlock
	{
		constexpr BlockState HoneycombBlock()
		{
			return 20506;
		}
	}
	namespace Hopper
	{
		constexpr BlockState Hopper(const bool Enabled, const eBlockFace Facing)
		{
			if (Enabled)
				if (Facing == eBlockFace::BLOCK_FACE_YM) return 10034;
				else if (Facing == eBlockFace::BLOCK_FACE_ZM) return 10035;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 10036;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 10037;
				else return 10038;
			else
				if (Facing == eBlockFace::BLOCK_FACE_YM) return 10039;
				else if (Facing == eBlockFace::BLOCK_FACE_ZM) return 10040;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 10041;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 10042;
				else return 10043;
		}
		BlockState Hopper();
		bool Enabled(BlockState Block);
		eBlockFace Facing(BlockState Block);
	}
	namespace HornCoral
	{
		constexpr BlockState HornCoral(const bool Waterlogged)
		{
			if (Waterlogged) return 13886;
			else return 13887;
		}
		BlockState HornCoral();
		bool Waterlogged(BlockState Block);
	}
	namespace HornCoralBlock
	{
		constexpr BlockState HornCoralBlock()
		{
			return 13867;
		}
	}
	namespace HornCoralFan
	{
		constexpr BlockState HornCoralFan(const bool Waterlogged)
		{
			if (Waterlogged) return 13906;
			else return 13907;
		}
		BlockState HornCoralFan();
		bool Waterlogged(BlockState Block);
	}
	namespace HornCoralWallFan
	{
		constexpr BlockState HornCoralWallFan(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 13980;
				else return 13981;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 13982;
				else return 13983;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 13984;
				else return 13985;
			else
				if (Waterlogged) return 13986;
				else return 13987;
		}
		BlockState HornCoralWallFan();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Ice
	{
		constexpr BlockState Ice()
		{
			return 5958;
		}
	}
	namespace InfestedChiseledStoneBricks
	{
		constexpr BlockState InfestedChiseledStoneBricks()
		{
			return 6791;
		}
	}
	namespace InfestedCobblestone
	{
		constexpr BlockState InfestedCobblestone()
		{
			return 6787;
		}
	}
	namespace InfestedCrackedStoneBricks
	{
		constexpr BlockState InfestedCrackedStoneBricks()
		{
			return 6790;
		}
	}
	namespace InfestedDeepslate
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState InfestedDeepslate(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 27646;
			else if (Axis == Axis::Y) return 27647;
			else return 27648;
		}
		BlockState InfestedDeepslate();
		enum Axis Axis(BlockState Block);
	}
	namespace InfestedMossyStoneBricks
	{
		constexpr BlockState InfestedMossyStoneBricks()
		{
			return 6789;
		}
	}
	namespace InfestedStone
	{
		constexpr BlockState InfestedStone()
		{
			return 6786;
		}
	}
	namespace InfestedStoneBricks
	{
		constexpr BlockState InfestedStoneBricks()
		{
			return 6788;
		}
	}
	namespace IronBars
	{
		constexpr BlockState IronBars(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 6984;
							else return 6985;
						else
							if (West) return 6986;
							else return 6987;
					else
						if (Waterlogged)
							if (West) return 6988;
							else return 6989;
						else
							if (West) return 6990;
							else return 6991;
				else
					if (South)
						if (Waterlogged)
							if (West) return 6992;
							else return 6993;
						else
							if (West) return 6994;
							else return 6995;
					else
						if (Waterlogged)
							if (West) return 6996;
							else return 6997;
						else
							if (West) return 6998;
							else return 6999;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 7000;
							else return 7001;
						else
							if (West) return 7002;
							else return 7003;
					else
						if (Waterlogged)
							if (West) return 7004;
							else return 7005;
						else
							if (West) return 7006;
							else return 7007;
				else
					if (South)
						if (Waterlogged)
							if (West) return 7008;
							else return 7009;
						else
							if (West) return 7010;
							else return 7011;
					else
						if (Waterlogged)
							if (West) return 7012;
							else return 7013;
						else
							if (West) return 7014;
							else return 7015;
		}
		BlockState IronBars();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace IronBlock
	{
		constexpr BlockState IronBlock()
		{
			return 2138;
		}
	}
	namespace IronDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState IronDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 5828;
							else return 5829;
						else
							if (Powered) return 5830;
							else return 5831;
					else
						if (Open)
							if (Powered) return 5832;
							else return 5833;
						else
							if (Powered) return 5834;
							else return 5835;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 5836;
							else return 5837;
						else
							if (Powered) return 5838;
							else return 5839;
					else
						if (Open)
							if (Powered) return 5840;
							else return 5841;
						else
							if (Powered) return 5842;
							else return 5843;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 5844;
							else return 5845;
						else
							if (Powered) return 5846;
							else return 5847;
					else
						if (Open)
							if (Powered) return 5848;
							else return 5849;
						else
							if (Powered) return 5850;
							else return 5851;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 5852;
							else return 5853;
						else
							if (Powered) return 5854;
							else return 5855;
					else
						if (Open)
							if (Powered) return 5856;
							else return 5857;
						else
							if (Powered) return 5858;
							else return 5859;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 5860;
							else return 5861;
						else
							if (Powered) return 5862;
							else return 5863;
					else
						if (Open)
							if (Powered) return 5864;
							else return 5865;
						else
							if (Powered) return 5866;
							else return 5867;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 5868;
							else return 5869;
						else
							if (Powered) return 5870;
							else return 5871;
					else
						if (Open)
							if (Powered) return 5872;
							else return 5873;
						else
							if (Powered) return 5874;
							else return 5875;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 5876;
							else return 5877;
						else
							if (Powered) return 5878;
							else return 5879;
					else
						if (Open)
							if (Powered) return 5880;
							else return 5881;
						else
							if (Powered) return 5882;
							else return 5883;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 5884;
							else return 5885;
						else
							if (Powered) return 5886;
							else return 5887;
					else
						if (Open)
							if (Powered) return 5888;
							else return 5889;
						else
							if (Powered) return 5890;
							else return 5891;
		}
		BlockState IronDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace IronOre
	{
		constexpr BlockState IronOre()
		{
			return 131;
		}
	}
	namespace IronTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState IronTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 11288;
							else return 11289;
						else
							if (Waterlogged) return 11290;
							else return 11291;
					else
						if (Powered)
							if (Waterlogged) return 11292;
							else return 11293;
						else
							if (Waterlogged) return 11294;
							else return 11295;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 11296;
							else return 11297;
						else
							if (Waterlogged) return 11298;
							else return 11299;
					else
						if (Powered)
							if (Waterlogged) return 11300;
							else return 11301;
						else
							if (Waterlogged) return 11302;
							else return 11303;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 11304;
							else return 11305;
						else
							if (Waterlogged) return 11306;
							else return 11307;
					else
						if (Powered)
							if (Waterlogged) return 11308;
							else return 11309;
						else
							if (Waterlogged) return 11310;
							else return 11311;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 11312;
							else return 11313;
						else
							if (Waterlogged) return 11314;
							else return 11315;
					else
						if (Powered)
							if (Waterlogged) return 11316;
							else return 11317;
						else
							if (Waterlogged) return 11318;
							else return 11319;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 11320;
							else return 11321;
						else
							if (Waterlogged) return 11322;
							else return 11323;
					else
						if (Powered)
							if (Waterlogged) return 11324;
							else return 11325;
						else
							if (Waterlogged) return 11326;
							else return 11327;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 11328;
							else return 11329;
						else
							if (Waterlogged) return 11330;
							else return 11331;
					else
						if (Powered)
							if (Waterlogged) return 11332;
							else return 11333;
						else
							if (Waterlogged) return 11334;
							else return 11335;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 11336;
							else return 11337;
						else
							if (Waterlogged) return 11338;
							else return 11339;
					else
						if (Powered)
							if (Waterlogged) return 11340;
							else return 11341;
						else
							if (Waterlogged) return 11342;
							else return 11343;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 11344;
							else return 11345;
						else
							if (Waterlogged) return 11346;
							else return 11347;
					else
						if (Powered)
							if (Waterlogged) return 11348;
							else return 11349;
						else
							if (Waterlogged) return 11350;
							else return 11351;
		}
		BlockState IronTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace JackOLantern
	{
		constexpr BlockState JackOLantern(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 6049;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 6050;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 6051;
			else return 6052;
		}
		BlockState JackOLantern();
		eBlockFace Facing(BlockState Block);
	}
	namespace Jigsaw
	{
		enum class Orientation
		{
			DownEast,
			DownNorth,
			DownSouth,
			DownWest,
			UpEast,
			UpNorth,
			UpSouth,
			UpWest,
			WestUp,
			EastUp,
			NorthUp,
			SouthUp,
		};
		constexpr BlockState Jigsaw(const enum Orientation Orientation)
		{
			if (Orientation == Orientation::DownEast) return 20415;
			else if (Orientation == Orientation::DownNorth) return 20416;
			else if (Orientation == Orientation::DownSouth) return 20417;
			else if (Orientation == Orientation::DownWest) return 20418;
			else if (Orientation == Orientation::UpEast) return 20419;
			else if (Orientation == Orientation::UpNorth) return 20420;
			else if (Orientation == Orientation::UpSouth) return 20421;
			else if (Orientation == Orientation::UpWest) return 20422;
			else if (Orientation == Orientation::WestUp) return 20423;
			else if (Orientation == Orientation::EastUp) return 20424;
			else if (Orientation == Orientation::NorthUp) return 20425;
			else return 20426;
		}
		BlockState Jigsaw();
		enum Orientation Orientation(BlockState Block);
	}
	namespace Jukebox
	{
		constexpr BlockState Jukebox(const bool HasRecord)
		{
			if (HasRecord) return 5994;
			else return 5995;
		}
		BlockState Jukebox();
		bool HasRecord(BlockState Block);
	}
	namespace JungleButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState JungleButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9468;
					else return 9469;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9470;
					else return 9471;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9472;
					else return 9473;
				else
					if (Powered) return 9474;
					else return 9475;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9476;
					else return 9477;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9478;
					else return 9479;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9480;
					else return 9481;
				else
					if (Powered) return 9482;
					else return 9483;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9484;
					else return 9485;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9486;
					else return 9487;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9488;
					else return 9489;
				else
					if (Powered) return 9490;
					else return 9491;
		}
		BlockState JungleButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace JungleDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState JungleDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12909;
							else return 12910;
						else
							if (Powered) return 12911;
							else return 12912;
					else
						if (Open)
							if (Powered) return 12913;
							else return 12914;
						else
							if (Powered) return 12915;
							else return 12916;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12917;
							else return 12918;
						else
							if (Powered) return 12919;
							else return 12920;
					else
						if (Open)
							if (Powered) return 12921;
							else return 12922;
						else
							if (Powered) return 12923;
							else return 12924;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12925;
							else return 12926;
						else
							if (Powered) return 12927;
							else return 12928;
					else
						if (Open)
							if (Powered) return 12929;
							else return 12930;
						else
							if (Powered) return 12931;
							else return 12932;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12933;
							else return 12934;
						else
							if (Powered) return 12935;
							else return 12936;
					else
						if (Open)
							if (Powered) return 12937;
							else return 12938;
						else
							if (Powered) return 12939;
							else return 12940;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12941;
							else return 12942;
						else
							if (Powered) return 12943;
							else return 12944;
					else
						if (Open)
							if (Powered) return 12945;
							else return 12946;
						else
							if (Powered) return 12947;
							else return 12948;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12949;
							else return 12950;
						else
							if (Powered) return 12951;
							else return 12952;
					else
						if (Open)
							if (Powered) return 12953;
							else return 12954;
						else
							if (Powered) return 12955;
							else return 12956;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12957;
							else return 12958;
						else
							if (Powered) return 12959;
							else return 12960;
					else
						if (Open)
							if (Powered) return 12961;
							else return 12962;
						else
							if (Powered) return 12963;
							else return 12964;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12965;
							else return 12966;
						else
							if (Powered) return 12967;
							else return 12968;
					else
						if (Open)
							if (Powered) return 12969;
							else return 12970;
						else
							if (Powered) return 12971;
							else return 12972;
		}
		BlockState JungleDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace JungleFence
	{
		constexpr BlockState JungleFence(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 12557;
							else return 12558;
						else
							if (West) return 12559;
							else return 12560;
					else
						if (Waterlogged)
							if (West) return 12561;
							else return 12562;
						else
							if (West) return 12563;
							else return 12564;
				else
					if (South)
						if (Waterlogged)
							if (West) return 12565;
							else return 12566;
						else
							if (West) return 12567;
							else return 12568;
					else
						if (Waterlogged)
							if (West) return 12569;
							else return 12570;
						else
							if (West) return 12571;
							else return 12572;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 12573;
							else return 12574;
						else
							if (West) return 12575;
							else return 12576;
					else
						if (Waterlogged)
							if (West) return 12577;
							else return 12578;
						else
							if (West) return 12579;
							else return 12580;
				else
					if (South)
						if (Waterlogged)
							if (West) return 12581;
							else return 12582;
						else
							if (West) return 12583;
							else return 12584;
					else
						if (Waterlogged)
							if (West) return 12585;
							else return 12586;
						else
							if (West) return 12587;
							else return 12588;
		}
		BlockState JungleFence();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace JungleFenceGate
	{
		constexpr BlockState JungleFenceGate(const eBlockFace Facing, const bool InWall, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (InWall)
					if (Open)
						if (Powered) return 12269;
						else return 12270;
					else
						if (Powered) return 12271;
						else return 12272;
				else
					if (Open)
						if (Powered) return 12273;
						else return 12274;
					else
						if (Powered) return 12275;
						else return 12276;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (InWall)
					if (Open)
						if (Powered) return 12277;
						else return 12278;
					else
						if (Powered) return 12279;
						else return 12280;
				else
					if (Open)
						if (Powered) return 12281;
						else return 12282;
					else
						if (Powered) return 12283;
						else return 12284;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (InWall)
					if (Open)
						if (Powered) return 12285;
						else return 12286;
					else
						if (Powered) return 12287;
						else return 12288;
				else
					if (Open)
						if (Powered) return 12289;
						else return 12290;
					else
						if (Powered) return 12291;
						else return 12292;
			else
				if (InWall)
					if (Open)
						if (Powered) return 12293;
						else return 12294;
					else
						if (Powered) return 12295;
						else return 12296;
				else
					if (Open)
						if (Powered) return 12297;
						else return 12298;
					else
						if (Powered) return 12299;
						else return 12300;
		}
		BlockState JungleFenceGate();
		eBlockFace Facing(BlockState Block);
		bool InWall(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace JungleHangingSign
	{
		constexpr BlockState JungleHangingSign(const bool Attached, const unsigned char Rotation, const bool Waterlogged)
		{
			if (Attached)
				if (Rotation == 0)
					if (Waterlogged) return 5258;
					else return 5259;
				else if (Rotation == 1)
					if (Waterlogged) return 5260;
					else return 5261;
				else if (Rotation == 2)
					if (Waterlogged) return 5262;
					else return 5263;
				else if (Rotation == 3)
					if (Waterlogged) return 5264;
					else return 5265;
				else if (Rotation == 4)
					if (Waterlogged) return 5266;
					else return 5267;
				else if (Rotation == 5)
					if (Waterlogged) return 5268;
					else return 5269;
				else if (Rotation == 6)
					if (Waterlogged) return 5270;
					else return 5271;
				else if (Rotation == 7)
					if (Waterlogged) return 5272;
					else return 5273;
				else if (Rotation == 8)
					if (Waterlogged) return 5274;
					else return 5275;
				else if (Rotation == 9)
					if (Waterlogged) return 5276;
					else return 5277;
				else if (Rotation == 10)
					if (Waterlogged) return 5278;
					else return 5279;
				else if (Rotation == 11)
					if (Waterlogged) return 5280;
					else return 5281;
				else if (Rotation == 12)
					if (Waterlogged) return 5282;
					else return 5283;
				else if (Rotation == 13)
					if (Waterlogged) return 5284;
					else return 5285;
				else if (Rotation == 14)
					if (Waterlogged) return 5286;
					else return 5287;
				else
					if (Waterlogged) return 5288;
					else return 5289;
			else
				if (Rotation == 0)
					if (Waterlogged) return 5290;
					else return 5291;
				else if (Rotation == 1)
					if (Waterlogged) return 5292;
					else return 5293;
				else if (Rotation == 2)
					if (Waterlogged) return 5294;
					else return 5295;
				else if (Rotation == 3)
					if (Waterlogged) return 5296;
					else return 5297;
				else if (Rotation == 4)
					if (Waterlogged) return 5298;
					else return 5299;
				else if (Rotation == 5)
					if (Waterlogged) return 5300;
					else return 5301;
				else if (Rotation == 6)
					if (Waterlogged) return 5302;
					else return 5303;
				else if (Rotation == 7)
					if (Waterlogged) return 5304;
					else return 5305;
				else if (Rotation == 8)
					if (Waterlogged) return 5306;
					else return 5307;
				else if (Rotation == 9)
					if (Waterlogged) return 5308;
					else return 5309;
				else if (Rotation == 10)
					if (Waterlogged) return 5310;
					else return 5311;
				else if (Rotation == 11)
					if (Waterlogged) return 5312;
					else return 5313;
				else if (Rotation == 12)
					if (Waterlogged) return 5314;
					else return 5315;
				else if (Rotation == 13)
					if (Waterlogged) return 5316;
					else return 5317;
				else if (Rotation == 14)
					if (Waterlogged) return 5318;
					else return 5319;
				else
					if (Waterlogged) return 5320;
					else return 5321;
		}
		BlockState JungleHangingSign();
		bool Attached(BlockState Block);
		unsigned char Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace JungleLeaves
	{
		constexpr BlockState JungleLeaves(const unsigned char Distance, const bool Persistent, const bool Waterlogged)
		{
			if (Distance == 1)
				if (Persistent)
					if (Waterlogged) return 336;
					else return 337;
				else
					if (Waterlogged) return 338;
					else return 339;
			else if (Distance == 2)
				if (Persistent)
					if (Waterlogged) return 340;
					else return 341;
				else
					if (Waterlogged) return 342;
					else return 343;
			else if (Distance == 3)
				if (Persistent)
					if (Waterlogged) return 344;
					else return 345;
				else
					if (Waterlogged) return 346;
					else return 347;
			else if (Distance == 4)
				if (Persistent)
					if (Waterlogged) return 348;
					else return 349;
				else
					if (Waterlogged) return 350;
					else return 351;
			else if (Distance == 5)
				if (Persistent)
					if (Waterlogged) return 352;
					else return 353;
				else
					if (Waterlogged) return 354;
					else return 355;
			else if (Distance == 6)
				if (Persistent)
					if (Waterlogged) return 356;
					else return 357;
				else
					if (Waterlogged) return 358;
					else return 359;
			else
				if (Persistent)
					if (Waterlogged) return 360;
					else return 361;
				else
					if (Waterlogged) return 362;
					else return 363;
		}
		BlockState JungleLeaves();
		unsigned char Distance(BlockState Block);
		bool Persistent(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace JungleLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState JungleLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 145;
			else if (Axis == Axis::Y) return 146;
			else return 147;
		}
		BlockState JungleLog();
		enum Axis Axis(BlockState Block);
	}
	namespace JunglePlanks
	{
		constexpr BlockState JunglePlanks()
		{
			return 18;
		}
	}
	namespace JunglePressurePlate
	{
		constexpr BlockState JunglePressurePlate(const bool Powered)
		{
			if (Powered) return 5898;
			else return 5899;
		}
		BlockState JunglePressurePlate();
		bool Powered(BlockState Block);
	}
	namespace JungleSapling
	{
		constexpr BlockState JungleSapling(const unsigned char Stage)
		{
			if (Stage == 0) return 35;
			else return 36;
		}
		BlockState JungleSapling();
		unsigned char Stage(BlockState Block);
	}
	namespace JungleSign
	{
		constexpr BlockState JungleSign(const unsigned char Rotation, const bool Waterlogged)
		{
			if (Rotation == 0)
				if (Waterlogged) return 4526;
				else return 4527;
			else if (Rotation == 1)
				if (Waterlogged) return 4528;
				else return 4529;
			else if (Rotation == 2)
				if (Waterlogged) return 4530;
				else return 4531;
			else if (Rotation == 3)
				if (Waterlogged) return 4532;
				else return 4533;
			else if (Rotation == 4)
				if (Waterlogged) return 4534;
				else return 4535;
			else if (Rotation == 5)
				if (Waterlogged) return 4536;
				else return 4537;
			else if (Rotation == 6)
				if (Waterlogged) return 4538;
				else return 4539;
			else if (Rotation == 7)
				if (Waterlogged) return 4540;
				else return 4541;
			else if (Rotation == 8)
				if (Waterlogged) return 4542;
				else return 4543;
			else if (Rotation == 9)
				if (Waterlogged) return 4544;
				else return 4545;
			else if (Rotation == 10)
				if (Waterlogged) return 4546;
				else return 4547;
			else if (Rotation == 11)
				if (Waterlogged) return 4548;
				else return 4549;
			else if (Rotation == 12)
				if (Waterlogged) return 4550;
				else return 4551;
			else if (Rotation == 13)
				if (Waterlogged) return 4552;
				else return 4553;
			else if (Rotation == 14)
				if (Waterlogged) return 4554;
				else return 4555;
			else
				if (Waterlogged) return 4556;
				else return 4557;
		}
		BlockState JungleSign();
		unsigned char Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace JungleSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState JungleSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 12069;
				else return 12070;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 12071;
				else return 12072;
			else
				if (Waterlogged) return 12073;
				else return 12074;
		}
		BlockState JungleSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace JungleStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState JungleStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8610;
						else return 8611;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8612;
						else return 8613;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8614;
						else return 8615;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8616;
						else return 8617;
					else
						if (Waterlogged) return 8618;
						else return 8619;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8620;
						else return 8621;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8622;
						else return 8623;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8624;
						else return 8625;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8626;
						else return 8627;
					else
						if (Waterlogged) return 8628;
						else return 8629;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8630;
						else return 8631;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8632;
						else return 8633;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8634;
						else return 8635;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8636;
						else return 8637;
					else
						if (Waterlogged) return 8638;
						else return 8639;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8640;
						else return 8641;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8642;
						else return 8643;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8644;
						else return 8645;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8646;
						else return 8647;
					else
						if (Waterlogged) return 8648;
						else return 8649;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8650;
						else return 8651;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8652;
						else return 8653;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8654;
						else return 8655;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8656;
						else return 8657;
					else
						if (Waterlogged) return 8658;
						else return 8659;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8660;
						else return 8661;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8662;
						else return 8663;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8664;
						else return 8665;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8666;
						else return 8667;
					else
						if (Waterlogged) return 8668;
						else return 8669;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8670;
						else return 8671;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8672;
						else return 8673;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8674;
						else return 8675;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8676;
						else return 8677;
					else
						if (Waterlogged) return 8678;
						else return 8679;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8680;
						else return 8681;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8682;
						else return 8683;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8684;
						else return 8685;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8686;
						else return 8687;
					else
						if (Waterlogged) return 8688;
						else return 8689;
		}
		BlockState JungleStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace JungleTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState JungleTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6332;
							else return 6333;
						else
							if (Waterlogged) return 6334;
							else return 6335;
					else
						if (Powered)
							if (Waterlogged) return 6336;
							else return 6337;
						else
							if (Waterlogged) return 6338;
							else return 6339;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6340;
							else return 6341;
						else
							if (Waterlogged) return 6342;
							else return 6343;
					else
						if (Powered)
							if (Waterlogged) return 6344;
							else return 6345;
						else
							if (Waterlogged) return 6346;
							else return 6347;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6348;
							else return 6349;
						else
							if (Waterlogged) return 6350;
							else return 6351;
					else
						if (Powered)
							if (Waterlogged) return 6352;
							else return 6353;
						else
							if (Waterlogged) return 6354;
							else return 6355;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6356;
							else return 6357;
						else
							if (Waterlogged) return 6358;
							else return 6359;
					else
						if (Powered)
							if (Waterlogged) return 6360;
							else return 6361;
						else
							if (Waterlogged) return 6362;
							else return 6363;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6364;
							else return 6365;
						else
							if (Waterlogged) return 6366;
							else return 6367;
					else
						if (Powered)
							if (Waterlogged) return 6368;
							else return 6369;
						else
							if (Waterlogged) return 6370;
							else return 6371;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6372;
							else return 6373;
						else
							if (Waterlogged) return 6374;
							else return 6375;
					else
						if (Powered)
							if (Waterlogged) return 6376;
							else return 6377;
						else
							if (Waterlogged) return 6378;
							else return 6379;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6380;
							else return 6381;
						else
							if (Waterlogged) return 6382;
							else return 6383;
					else
						if (Powered)
							if (Waterlogged) return 6384;
							else return 6385;
						else
							if (Waterlogged) return 6386;
							else return 6387;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6388;
							else return 6389;
						else
							if (Waterlogged) return 6390;
							else return 6391;
					else
						if (Powered)
							if (Waterlogged) return 6392;
							else return 6393;
						else
							if (Waterlogged) return 6394;
							else return 6395;
		}
		BlockState JungleTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace JungleWallHangingSign
	{
		constexpr BlockState JungleWallHangingSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 5746;
				else return 5747;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 5748;
				else return 5749;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 5750;
				else return 5751;
			else
				if (Waterlogged) return 5752;
				else return 5753;
		}
		BlockState JungleWallHangingSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace JungleWallSign
	{
		constexpr BlockState JungleWallSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 4898;
				else return 4899;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 4900;
				else return 4901;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 4902;
				else return 4903;
			else
				if (Waterlogged) return 4904;
				else return 4905;
		}
		BlockState JungleWallSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace JungleWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState JungleWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 210;
			else if (Axis == Axis::Y) return 211;
			else return 212;
		}
		BlockState JungleWood();
		enum Axis Axis(BlockState Block);
	}
	namespace Kelp
	{
		constexpr BlockState Kelp(const unsigned char Age)
		{
			if (Age == 0) return 13783;
			else if (Age == 1) return 13784;
			else if (Age == 2) return 13785;
			else if (Age == 3) return 13786;
			else if (Age == 4) return 13787;
			else if (Age == 5) return 13788;
			else if (Age == 6) return 13789;
			else if (Age == 7) return 13790;
			else if (Age == 8) return 13791;
			else if (Age == 9) return 13792;
			else if (Age == 10) return 13793;
			else if (Age == 11) return 13794;
			else if (Age == 12) return 13795;
			else if (Age == 13) return 13796;
			else if (Age == 14) return 13797;
			else if (Age == 15) return 13798;
			else if (Age == 16) return 13799;
			else if (Age == 17) return 13800;
			else if (Age == 18) return 13801;
			else if (Age == 19) return 13802;
			else if (Age == 20) return 13803;
			else if (Age == 21) return 13804;
			else if (Age == 22) return 13805;
			else if (Age == 23) return 13806;
			else if (Age == 24) return 13807;
			else return 13808;
		}
		BlockState Kelp();
		unsigned char Age(BlockState Block);
	}
	namespace KelpPlant
	{
		constexpr BlockState KelpPlant()
		{
			return 13809;
		}
	}
	namespace Ladder
	{
		constexpr BlockState Ladder(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 4750;
				else return 4751;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 4752;
				else return 4753;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 4754;
				else return 4755;
			else
				if (Waterlogged) return 4756;
				else return 4757;
		}
		BlockState Ladder();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Lantern
	{
		constexpr BlockState Lantern(const bool Hanging, const bool Waterlogged)
		{
			if (Hanging)
				if (Waterlogged) return 19558;
				else return 19559;
			else
				if (Waterlogged) return 19560;
				else return 19561;
		}
		BlockState Lantern();
		bool Hanging(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace LapisBlock
	{
		constexpr BlockState LapisBlock()
		{
			return 565;
		}
	}
	namespace LapisOre
	{
		constexpr BlockState LapisOre()
		{
			return 563;
		}
	}
	namespace LargeAmethystBud
	{
		constexpr BlockState LargeAmethystBud(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 22105;
				else return 22106;
			else if (Facing == eBlockFace::BLOCK_FACE_XP)
				if (Waterlogged) return 22107;
				else return 22108;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 22109;
				else return 22110;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 22111;
				else return 22112;
			else if (Facing == eBlockFace::BLOCK_FACE_YP)
				if (Waterlogged) return 22113;
				else return 22114;
			else
				if (Waterlogged) return 22115;
				else return 22116;
		}
		BlockState LargeAmethystBud();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace LargeFern
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		constexpr BlockState LargeFern(const enum Half Half)
		{
			if (Half == Half::Upper) return 11646;
			else return 11647;
		}
		BlockState LargeFern();
		enum Half Half(BlockState Block);
	}
	namespace Lava
	{
		constexpr BlockState Lava(const unsigned char Level)
		{
			if (Level == 0) return 102;
			else if (Level == 1) return 103;
			else if (Level == 2) return 104;
			else if (Level == 3) return 105;
			else if (Level == 4) return 106;
			else if (Level == 5) return 107;
			else if (Level == 6) return 108;
			else if (Level == 7) return 109;
			else if (Level == 8) return 110;
			else if (Level == 9) return 111;
			else if (Level == 10) return 112;
			else if (Level == 11) return 113;
			else if (Level == 12) return 114;
			else if (Level == 13) return 115;
			else if (Level == 14) return 116;
			else return 117;
		}
		BlockState Lava();
		unsigned char Level(BlockState Block);
	}
	namespace LavaCauldron
	{
		constexpr BlockState LavaCauldron()
		{
			return 8186;
		}
	}
	namespace LeafLitter
	{
		constexpr BlockState LeafLitter(const eBlockFace Facing, const unsigned char SegmentAmount)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (SegmentAmount == 1) return 25919;
				else if (SegmentAmount == 2) return 25920;
				else if (SegmentAmount == 3) return 25921;
				else return 25922;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (SegmentAmount == 1) return 25923;
				else if (SegmentAmount == 2) return 25924;
				else if (SegmentAmount == 3) return 25925;
				else return 25926;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (SegmentAmount == 1) return 25927;
				else if (SegmentAmount == 2) return 25928;
				else if (SegmentAmount == 3) return 25929;
				else return 25930;
			else
				if (SegmentAmount == 1) return 25931;
				else if (SegmentAmount == 2) return 25932;
				else if (SegmentAmount == 3) return 25933;
				else return 25934;
		}
		BlockState LeafLitter();
		eBlockFace Facing(BlockState Block);
		unsigned char SegmentAmount(BlockState Block);
	}
	namespace Lectern
	{
		constexpr BlockState Lectern(const eBlockFace Facing, const bool HasBook, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (HasBook)
					if (Powered) return 19505;
					else return 19506;
				else
					if (Powered) return 19507;
					else return 19508;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (HasBook)
					if (Powered) return 19509;
					else return 19510;
				else
					if (Powered) return 19511;
					else return 19512;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (HasBook)
					if (Powered) return 19513;
					else return 19514;
				else
					if (Powered) return 19515;
					else return 19516;
			else
				if (HasBook)
					if (Powered) return 19517;
					else return 19518;
				else
					if (Powered) return 19519;
					else return 19520;
		}
		BlockState Lectern();
		eBlockFace Facing(BlockState Block);
		bool HasBook(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace Lever
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState Lever(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 5802;
					else return 5803;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 5804;
					else return 5805;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 5806;
					else return 5807;
				else
					if (Powered) return 5808;
					else return 5809;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 5810;
					else return 5811;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 5812;
					else return 5813;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 5814;
					else return 5815;
				else
					if (Powered) return 5816;
					else return 5817;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 5818;
					else return 5819;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 5820;
					else return 5821;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 5822;
					else return 5823;
				else
					if (Powered) return 5824;
					else return 5825;
		}
		BlockState Lever();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace Light
	{
		constexpr BlockState Light(const unsigned char Level, const bool Waterlogged)
		{
			if (Level == 0)
				if (Waterlogged) return 11256;
				else return 11257;
			else if (Level == 1)
				if (Waterlogged) return 11258;
				else return 11259;
			else if (Level == 2)
				if (Waterlogged) return 11260;
				else return 11261;
			else if (Level == 3)
				if (Waterlogged) return 11262;
				else return 11263;
			else if (Level == 4)
				if (Waterlogged) return 11264;
				else return 11265;
			else if (Level == 5)
				if (Waterlogged) return 11266;
				else return 11267;
			else if (Level == 6)
				if (Waterlogged) return 11268;
				else return 11269;
			else if (Level == 7)
				if (Waterlogged) return 11270;
				else return 11271;
			else if (Level == 8)
				if (Waterlogged) return 11272;
				else return 11273;
			else if (Level == 9)
				if (Waterlogged) return 11274;
				else return 11275;
			else if (Level == 10)
				if (Waterlogged) return 11276;
				else return 11277;
			else if (Level == 11)
				if (Waterlogged) return 11278;
				else return 11279;
			else if (Level == 12)
				if (Waterlogged) return 11280;
				else return 11281;
			else if (Level == 13)
				if (Waterlogged) return 11282;
				else return 11283;
			else if (Level == 14)
				if (Waterlogged) return 11284;
				else return 11285;
			else
				if (Waterlogged) return 11286;
				else return 11287;
		}
		BlockState Light();
		unsigned char Level(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace LightBlueBanner
	{
		constexpr BlockState LightBlueBanner(const unsigned char Rotation)
		{
			if (Rotation == 0) return 11696;
			else if (Rotation == 1) return 11697;
			else if (Rotation == 2) return 11698;
			else if (Rotation == 3) return 11699;
			else if (Rotation == 4) return 11700;
			else if (Rotation == 5) return 11701;
			else if (Rotation == 6) return 11702;
			else if (Rotation == 7) return 11703;
			else if (Rotation == 8) return 11704;
			else if (Rotation == 9) return 11705;
			else if (Rotation == 10) return 11706;
			else if (Rotation == 11) return 11707;
			else if (Rotation == 12) return 11708;
			else if (Rotation == 13) return 11709;
			else if (Rotation == 14) return 11710;
			else return 11711;
		}
		BlockState LightBlueBanner();
		unsigned char Rotation(BlockState Block);
	}
	namespace LightBlueBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState LightBlueBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1779;
					else return 1780;
				else
					if (Part == Part::Head) return 1781;
					else return 1782;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1783;
					else return 1784;
				else
					if (Part == Part::Head) return 1785;
					else return 1786;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1787;
					else return 1788;
				else
					if (Part == Part::Head) return 1789;
					else return 1790;
			else
				if (Occupied)
					if (Part == Part::Head) return 1791;
					else return 1792;
				else
					if (Part == Part::Head) return 1793;
					else return 1794;
		}
		BlockState LightBlueBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace LightBlueCandle
	{
		constexpr BlockState LightBlueCandle(const unsigned char Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 21849;
					else return 21850;
				else
					if (Waterlogged) return 21851;
					else return 21852;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 21853;
					else return 21854;
				else
					if (Waterlogged) return 21855;
					else return 21856;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 21857;
					else return 21858;
				else
					if (Waterlogged) return 21859;
					else return 21860;
			else
				if (Lit)
					if (Waterlogged) return 21861;
					else return 21862;
				else
					if (Waterlogged) return 21863;
					else return 21864;
		}
		BlockState LightBlueCandle();
		unsigned char Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace LightBlueCandleCake
	{
		constexpr BlockState LightBlueCandleCake(const bool Lit)
		{
			if (Lit) return 22065;
			else return 22066;
		}
		BlockState LightBlueCandleCake();
		bool Lit(BlockState Block);
	}
	namespace LightBlueCarpet
	{
		constexpr BlockState LightBlueCarpet()
		{
			return 11620;
		}
	}
	namespace LightBlueConcrete
	{
		constexpr BlockState LightBlueConcrete()
		{
			return 13754;
		}
	}
	namespace LightBlueConcretePowder
	{
		constexpr BlockState LightBlueConcretePowder()
		{
			return 13770;
		}
	}
	namespace LightBlueGlazedTerracotta
	{
		constexpr BlockState LightBlueGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13699;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13700;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13701;
			else return 13702;
		}
		BlockState LightBlueGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace LightBlueShulkerBox
	{
		constexpr BlockState LightBlueShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13609;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 13610;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13611;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13612;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 13613;
			else return 13614;
		}
		BlockState LightBlueShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace LightBlueStainedGlass
	{
		constexpr BlockState LightBlueStainedGlass()
		{
			return 6127;
		}
	}
	namespace LightBlueStainedGlassPane
	{
		constexpr BlockState LightBlueStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10277;
							else return 10278;
						else
							if (West) return 10279;
							else return 10280;
					else
						if (Waterlogged)
							if (West) return 10281;
							else return 10282;
						else
							if (West) return 10283;
							else return 10284;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10285;
							else return 10286;
						else
							if (West) return 10287;
							else return 10288;
					else
						if (Waterlogged)
							if (West) return 10289;
							else return 10290;
						else
							if (West) return 10291;
							else return 10292;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10293;
							else return 10294;
						else
							if (West) return 10295;
							else return 10296;
					else
						if (Waterlogged)
							if (West) return 10297;
							else return 10298;
						else
							if (West) return 10299;
							else return 10300;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10301;
							else return 10302;
						else
							if (West) return 10303;
							else return 10304;
					else
						if (Waterlogged)
							if (West) return 10305;
							else return 10306;
						else
							if (West) return 10307;
							else return 10308;
		}
		BlockState LightBlueStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace LightBlueTerracotta
	{
		constexpr BlockState LightBlueTerracotta()
		{
			return 10168;
		}
	}
	namespace LightBlueWallBanner
	{
		constexpr BlockState LightBlueWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11916;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11917;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11918;
			else return 11919;
		}
		BlockState LightBlueWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace LightBlueWool
	{
		constexpr BlockState LightBlueWool()
		{
			return 2096;
		}
	}
	namespace LightGrayBanner
	{
		constexpr BlockState LightGrayBanner(const unsigned char Rotation)
		{
			if (Rotation == 0) return 11776;
			else if (Rotation == 1) return 11777;
			else if (Rotation == 2) return 11778;
			else if (Rotation == 3) return 11779;
			else if (Rotation == 4) return 11780;
			else if (Rotation == 5) return 11781;
			else if (Rotation == 6) return 11782;
			else if (Rotation == 7) return 11783;
			else if (Rotation == 8) return 11784;
			else if (Rotation == 9) return 11785;
			else if (Rotation == 10) return 11786;
			else if (Rotation == 11) return 11787;
			else if (Rotation == 12) return 11788;
			else if (Rotation == 13) return 11789;
			else if (Rotation == 14) return 11790;
			else return 11791;
		}
		BlockState LightGrayBanner();
		unsigned char Rotation(BlockState Block);
	}
	namespace LightGrayBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState LightGrayBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1859;
					else return 1860;
				else
					if (Part == Part::Head) return 1861;
					else return 1862;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1863;
					else return 1864;
				else
					if (Part == Part::Head) return 1865;
					else return 1866;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1867;
					else return 1868;
				else
					if (Part == Part::Head) return 1869;
					else return 1870;
			else
				if (Occupied)
					if (Part == Part::Head) return 1871;
					else return 1872;
				else
					if (Part == Part::Head) return 1873;
					else return 1874;
		}
		BlockState LightGrayBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace LightGrayCandle
	{
		constexpr BlockState LightGrayCandle(const unsigned char Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 21929;
					else return 21930;
				else
					if (Waterlogged) return 21931;
					else return 21932;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 21933;
					else return 21934;
				else
					if (Waterlogged) return 21935;
					else return 21936;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 21937;
					else return 21938;
				else
					if (Waterlogged) return 21939;
					else return 21940;
			else
				if (Lit)
					if (Waterlogged) return 21941;
					else return 21942;
				else
					if (Waterlogged) return 21943;
					else return 21944;
		}
		BlockState LightGrayCandle();
		unsigned char Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace LightGrayCandleCake
	{
		constexpr BlockState LightGrayCandleCake(const bool Lit)
		{
			if (Lit) return 22075;
			else return 22076;
		}
		BlockState LightGrayCandleCake();
		bool Lit(BlockState Block);
	}
	namespace LightGrayCarpet
	{
		constexpr BlockState LightGrayCarpet()
		{
			return 11625;
		}
	}
	namespace LightGrayConcrete
	{
		constexpr BlockState LightGrayConcrete()
		{
			return 13759;
		}
	}
	namespace LightGrayConcretePowder
	{
		constexpr BlockState LightGrayConcretePowder()
		{
			return 13775;
		}
	}
	namespace LightGrayGlazedTerracotta
	{
		constexpr BlockState LightGrayGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13719;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13720;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13721;
			else return 13722;
		}
		BlockState LightGrayGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace LightGrayShulkerBox
	{
		constexpr BlockState LightGrayShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13639;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 13640;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13641;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13642;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 13643;
			else return 13644;
		}
		BlockState LightGrayShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace LightGrayStainedGlass
	{
		constexpr BlockState LightGrayStainedGlass()
		{
			return 6132;
		}
	}
	namespace LightGrayStainedGlassPane
	{
		constexpr BlockState LightGrayStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10437;
							else return 10438;
						else
							if (West) return 10439;
							else return 10440;
					else
						if (Waterlogged)
							if (West) return 10441;
							else return 10442;
						else
							if (West) return 10443;
							else return 10444;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10445;
							else return 10446;
						else
							if (West) return 10447;
							else return 10448;
					else
						if (Waterlogged)
							if (West) return 10449;
							else return 10450;
						else
							if (West) return 10451;
							else return 10452;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10453;
							else return 10454;
						else
							if (West) return 10455;
							else return 10456;
					else
						if (Waterlogged)
							if (West) return 10457;
							else return 10458;
						else
							if (West) return 10459;
							else return 10460;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10461;
							else return 10462;
						else
							if (West) return 10463;
							else return 10464;
					else
						if (Waterlogged)
							if (West) return 10465;
							else return 10466;
						else
							if (West) return 10467;
							else return 10468;
		}
		BlockState LightGrayStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace LightGrayTerracotta
	{
		constexpr BlockState LightGrayTerracotta()
		{
			return 10173;
		}
	}
	namespace LightGrayWallBanner
	{
		constexpr BlockState LightGrayWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11936;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11937;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11938;
			else return 11939;
		}
		BlockState LightGrayWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace LightGrayWool
	{
		constexpr BlockState LightGrayWool()
		{
			return 2101;
		}
	}
	namespace LightWeightedPressurePlate
	{
		constexpr BlockState LightWeightedPressurePlate(const unsigned char Power)
		{
			if (Power == 0) return 9952;
			else if (Power == 1) return 9953;
			else if (Power == 2) return 9954;
			else if (Power == 3) return 9955;
			else if (Power == 4) return 9956;
			else if (Power == 5) return 9957;
			else if (Power == 6) return 9958;
			else if (Power == 7) return 9959;
			else if (Power == 8) return 9960;
			else if (Power == 9) return 9961;
			else if (Power == 10) return 9962;
			else if (Power == 11) return 9963;
			else if (Power == 12) return 9964;
			else if (Power == 13) return 9965;
			else if (Power == 14) return 9966;
			else return 9967;
		}
		BlockState LightWeightedPressurePlate();
		unsigned char Power(BlockState Block);
	}
	namespace LightningRod
	{
		constexpr BlockState LightningRod(const eBlockFace Facing, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Powered)
					if (Waterlogged) return 25784;
					else return 25785;
				else
					if (Waterlogged) return 25786;
					else return 25787;
			else if (Facing == eBlockFace::BLOCK_FACE_XP)
				if (Powered)
					if (Waterlogged) return 25788;
					else return 25789;
				else
					if (Waterlogged) return 25790;
					else return 25791;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Powered)
					if (Waterlogged) return 25792;
					else return 25793;
				else
					if (Waterlogged) return 25794;
					else return 25795;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Powered)
					if (Waterlogged) return 25796;
					else return 25797;
				else
					if (Waterlogged) return 25798;
					else return 25799;
			else if (Facing == eBlockFace::BLOCK_FACE_YP)
				if (Powered)
					if (Waterlogged) return 25800;
					else return 25801;
				else
					if (Waterlogged) return 25802;
					else return 25803;
			else
				if (Powered)
					if (Waterlogged) return 25804;
					else return 25805;
				else
					if (Waterlogged) return 25806;
					else return 25807;
		}
		BlockState LightningRod();
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Lilac
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		constexpr BlockState Lilac(const enum Half Half)
		{
			if (Half == Half::Upper) return 11638;
			else return 11639;
		}
		BlockState Lilac();
		enum Half Half(BlockState Block);
	}
	namespace LilyOfTheValley
	{
		constexpr BlockState LilyOfTheValley()
		{
			return 2134;
		}
	}
	namespace LilyPad
	{
		constexpr BlockState LilyPad()
		{
			return 7642;
		}
	}
	namespace LimeBanner
	{
		constexpr BlockState LimeBanner(const unsigned char Rotation)
		{
			if (Rotation == 0) return 11728;
			else if (Rotation == 1) return 11729;
			else if (Rotation == 2) return 11730;
			else if (Rotation == 3) return 11731;
			else if (Rotation == 4) return 11732;
			else if (Rotation == 5) return 11733;
			else if (Rotation == 6) return 11734;
			else if (Rotation == 7) return 11735;
			else if (Rotation == 8) return 11736;
			else if (Rotation == 9) return 11737;
			else if (Rotation == 10) return 11738;
			else if (Rotation == 11) return 11739;
			else if (Rotation == 12) return 11740;
			else if (Rotation == 13) return 11741;
			else if (Rotation == 14) return 11742;
			else return 11743;
		}
		BlockState LimeBanner();
		unsigned char Rotation(BlockState Block);
	}
	namespace LimeBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState LimeBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1811;
					else return 1812;
				else
					if (Part == Part::Head) return 1813;
					else return 1814;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1815;
					else return 1816;
				else
					if (Part == Part::Head) return 1817;
					else return 1818;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1819;
					else return 1820;
				else
					if (Part == Part::Head) return 1821;
					else return 1822;
			else
				if (Occupied)
					if (Part == Part::Head) return 1823;
					else return 1824;
				else
					if (Part == Part::Head) return 1825;
					else return 1826;
		}
		BlockState LimeBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace LimeCandle
	{
		constexpr BlockState LimeCandle(const unsigned char Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 21881;
					else return 21882;
				else
					if (Waterlogged) return 21883;
					else return 21884;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 21885;
					else return 21886;
				else
					if (Waterlogged) return 21887;
					else return 21888;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 21889;
					else return 21890;
				else
					if (Waterlogged) return 21891;
					else return 21892;
			else
				if (Lit)
					if (Waterlogged) return 21893;
					else return 21894;
				else
					if (Waterlogged) return 21895;
					else return 21896;
		}
		BlockState LimeCandle();
		unsigned char Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace LimeCandleCake
	{
		constexpr BlockState LimeCandleCake(const bool Lit)
		{
			if (Lit) return 22069;
			else return 22070;
		}
		BlockState LimeCandleCake();
		bool Lit(BlockState Block);
	}
	namespace LimeCarpet
	{
		constexpr BlockState LimeCarpet()
		{
			return 11622;
		}
	}
	namespace LimeConcrete
	{
		constexpr BlockState LimeConcrete()
		{
			return 13756;
		}
	}
	namespace LimeConcretePowder
	{
		constexpr BlockState LimeConcretePowder()
		{
			return 13772;
		}
	}
	namespace LimeGlazedTerracotta
	{
		constexpr BlockState LimeGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13707;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13708;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13709;
			else return 13710;
		}
		BlockState LimeGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace LimeShulkerBox
	{
		constexpr BlockState LimeShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13621;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 13622;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13623;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13624;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 13625;
			else return 13626;
		}
		BlockState LimeShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace LimeStainedGlass
	{
		constexpr BlockState LimeStainedGlass()
		{
			return 6129;
		}
	}
	namespace LimeStainedGlassPane
	{
		constexpr BlockState LimeStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10341;
							else return 10342;
						else
							if (West) return 10343;
							else return 10344;
					else
						if (Waterlogged)
							if (West) return 10345;
							else return 10346;
						else
							if (West) return 10347;
							else return 10348;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10349;
							else return 10350;
						else
							if (West) return 10351;
							else return 10352;
					else
						if (Waterlogged)
							if (West) return 10353;
							else return 10354;
						else
							if (West) return 10355;
							else return 10356;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10357;
							else return 10358;
						else
							if (West) return 10359;
							else return 10360;
					else
						if (Waterlogged)
							if (West) return 10361;
							else return 10362;
						else
							if (West) return 10363;
							else return 10364;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10365;
							else return 10366;
						else
							if (West) return 10367;
							else return 10368;
					else
						if (Waterlogged)
							if (West) return 10369;
							else return 10370;
						else
							if (West) return 10371;
							else return 10372;
		}
		BlockState LimeStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace LimeTerracotta
	{
		constexpr BlockState LimeTerracotta()
		{
			return 10170;
		}
	}
	namespace LimeWallBanner
	{
		constexpr BlockState LimeWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11924;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11925;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11926;
			else return 11927;
		}
		BlockState LimeWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace LimeWool
	{
		constexpr BlockState LimeWool()
		{
			return 2098;
		}
	}
	namespace Lodestone
	{
		constexpr BlockState Lodestone()
		{
			return 20519;
		}
	}
	namespace Loom
	{
		constexpr BlockState Loom(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 19459;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 19460;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 19461;
			else return 19462;
		}
		BlockState Loom();
		eBlockFace Facing(BlockState Block);
	}
	namespace MagentaBanner
	{
		constexpr BlockState MagentaBanner(const unsigned char Rotation)
		{
			if (Rotation == 0) return 11680;
			else if (Rotation == 1) return 11681;
			else if (Rotation == 2) return 11682;
			else if (Rotation == 3) return 11683;
			else if (Rotation == 4) return 11684;
			else if (Rotation == 5) return 11685;
			else if (Rotation == 6) return 11686;
			else if (Rotation == 7) return 11687;
			else if (Rotation == 8) return 11688;
			else if (Rotation == 9) return 11689;
			else if (Rotation == 10) return 11690;
			else if (Rotation == 11) return 11691;
			else if (Rotation == 12) return 11692;
			else if (Rotation == 13) return 11693;
			else if (Rotation == 14) return 11694;
			else return 11695;
		}
		BlockState MagentaBanner();
		unsigned char Rotation(BlockState Block);
	}
	namespace MagentaBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState MagentaBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1763;
					else return 1764;
				else
					if (Part == Part::Head) return 1765;
					else return 1766;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1767;
					else return 1768;
				else
					if (Part == Part::Head) return 1769;
					else return 1770;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1771;
					else return 1772;
				else
					if (Part == Part::Head) return 1773;
					else return 1774;
			else
				if (Occupied)
					if (Part == Part::Head) return 1775;
					else return 1776;
				else
					if (Part == Part::Head) return 1777;
					else return 1778;
		}
		BlockState MagentaBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace MagentaCandle
	{
		constexpr BlockState MagentaCandle(const unsigned char Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 21833;
					else return 21834;
				else
					if (Waterlogged) return 21835;
					else return 21836;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 21837;
					else return 21838;
				else
					if (Waterlogged) return 21839;
					else return 21840;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 21841;
					else return 21842;
				else
					if (Waterlogged) return 21843;
					else return 21844;
			else
				if (Lit)
					if (Waterlogged) return 21845;
					else return 21846;
				else
					if (Waterlogged) return 21847;
					else return 21848;
		}
		BlockState MagentaCandle();
		unsigned char Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MagentaCandleCake
	{
		constexpr BlockState MagentaCandleCake(const bool Lit)
		{
			if (Lit) return 22063;
			else return 22064;
		}
		BlockState MagentaCandleCake();
		bool Lit(BlockState Block);
	}
	namespace MagentaCarpet
	{
		constexpr BlockState MagentaCarpet()
		{
			return 11619;
		}
	}
	namespace MagentaConcrete
	{
		constexpr BlockState MagentaConcrete()
		{
			return 13753;
		}
	}
	namespace MagentaConcretePowder
	{
		constexpr BlockState MagentaConcretePowder()
		{
			return 13769;
		}
	}
	namespace MagentaGlazedTerracotta
	{
		constexpr BlockState MagentaGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13695;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13696;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13697;
			else return 13698;
		}
		BlockState MagentaGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace MagentaShulkerBox
	{
		constexpr BlockState MagentaShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13603;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 13604;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13605;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13606;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 13607;
			else return 13608;
		}
		BlockState MagentaShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace MagentaStainedGlass
	{
		constexpr BlockState MagentaStainedGlass()
		{
			return 6126;
		}
	}
	namespace MagentaStainedGlassPane
	{
		constexpr BlockState MagentaStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10245;
							else return 10246;
						else
							if (West) return 10247;
							else return 10248;
					else
						if (Waterlogged)
							if (West) return 10249;
							else return 10250;
						else
							if (West) return 10251;
							else return 10252;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10253;
							else return 10254;
						else
							if (West) return 10255;
							else return 10256;
					else
						if (Waterlogged)
							if (West) return 10257;
							else return 10258;
						else
							if (West) return 10259;
							else return 10260;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10261;
							else return 10262;
						else
							if (West) return 10263;
							else return 10264;
					else
						if (Waterlogged)
							if (West) return 10265;
							else return 10266;
						else
							if (West) return 10267;
							else return 10268;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10269;
							else return 10270;
						else
							if (West) return 10271;
							else return 10272;
					else
						if (Waterlogged)
							if (West) return 10273;
							else return 10274;
						else
							if (West) return 10275;
							else return 10276;
		}
		BlockState MagentaStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace MagentaTerracotta
	{
		constexpr BlockState MagentaTerracotta()
		{
			return 10167;
		}
	}
	namespace MagentaWallBanner
	{
		constexpr BlockState MagentaWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11912;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11913;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11914;
			else return 11915;
		}
		BlockState MagentaWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace MagentaWool
	{
		constexpr BlockState MagentaWool()
		{
			return 2095;
		}
	}
	namespace MagmaBlock
	{
		constexpr BlockState MagmaBlock()
		{
			return 13566;
		}
	}
	namespace MangroveButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState MangroveButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9588;
					else return 9589;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9590;
					else return 9591;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9592;
					else return 9593;
				else
					if (Powered) return 9594;
					else return 9595;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9596;
					else return 9597;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9598;
					else return 9599;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9600;
					else return 9601;
				else
					if (Powered) return 9602;
					else return 9603;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9604;
					else return 9605;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9606;
					else return 9607;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9608;
					else return 9609;
				else
					if (Powered) return 9610;
					else return 9611;
		}
		BlockState MangroveButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace MangroveDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState MangroveDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13229;
							else return 13230;
						else
							if (Powered) return 13231;
							else return 13232;
					else
						if (Open)
							if (Powered) return 13233;
							else return 13234;
						else
							if (Powered) return 13235;
							else return 13236;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13237;
							else return 13238;
						else
							if (Powered) return 13239;
							else return 13240;
					else
						if (Open)
							if (Powered) return 13241;
							else return 13242;
						else
							if (Powered) return 13243;
							else return 13244;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13245;
							else return 13246;
						else
							if (Powered) return 13247;
							else return 13248;
					else
						if (Open)
							if (Powered) return 13249;
							else return 13250;
						else
							if (Powered) return 13251;
							else return 13252;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13253;
							else return 13254;
						else
							if (Powered) return 13255;
							else return 13256;
					else
						if (Open)
							if (Powered) return 13257;
							else return 13258;
						else
							if (Powered) return 13259;
							else return 13260;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13261;
							else return 13262;
						else
							if (Powered) return 13263;
							else return 13264;
					else
						if (Open)
							if (Powered) return 13265;
							else return 13266;
						else
							if (Powered) return 13267;
							else return 13268;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13269;
							else return 13270;
						else
							if (Powered) return 13271;
							else return 13272;
					else
						if (Open)
							if (Powered) return 13273;
							else return 13274;
						else
							if (Powered) return 13275;
							else return 13276;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13277;
							else return 13278;
						else
							if (Powered) return 13279;
							else return 13280;
					else
						if (Open)
							if (Powered) return 13281;
							else return 13282;
						else
							if (Powered) return 13283;
							else return 13284;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13285;
							else return 13286;
						else
							if (Powered) return 13287;
							else return 13288;
					else
						if (Open)
							if (Powered) return 13289;
							else return 13290;
						else
							if (Powered) return 13291;
							else return 13292;
		}
		BlockState MangroveDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace MangroveFence
	{
		constexpr BlockState MangroveFence(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 12717;
							else return 12718;
						else
							if (West) return 12719;
							else return 12720;
					else
						if (Waterlogged)
							if (West) return 12721;
							else return 12722;
						else
							if (West) return 12723;
							else return 12724;
				else
					if (South)
						if (Waterlogged)
							if (West) return 12725;
							else return 12726;
						else
							if (West) return 12727;
							else return 12728;
					else
						if (Waterlogged)
							if (West) return 12729;
							else return 12730;
						else
							if (West) return 12731;
							else return 12732;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 12733;
							else return 12734;
						else
							if (West) return 12735;
							else return 12736;
					else
						if (Waterlogged)
							if (West) return 12737;
							else return 12738;
						else
							if (West) return 12739;
							else return 12740;
				else
					if (South)
						if (Waterlogged)
							if (West) return 12741;
							else return 12742;
						else
							if (West) return 12743;
							else return 12744;
					else
						if (Waterlogged)
							if (West) return 12745;
							else return 12746;
						else
							if (West) return 12747;
							else return 12748;
		}
		BlockState MangroveFence();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace MangroveFenceGate
	{
		constexpr BlockState MangroveFenceGate(const eBlockFace Facing, const bool InWall, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (InWall)
					if (Open)
						if (Powered) return 12429;
						else return 12430;
					else
						if (Powered) return 12431;
						else return 12432;
				else
					if (Open)
						if (Powered) return 12433;
						else return 12434;
					else
						if (Powered) return 12435;
						else return 12436;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (InWall)
					if (Open)
						if (Powered) return 12437;
						else return 12438;
					else
						if (Powered) return 12439;
						else return 12440;
				else
					if (Open)
						if (Powered) return 12441;
						else return 12442;
					else
						if (Powered) return 12443;
						else return 12444;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (InWall)
					if (Open)
						if (Powered) return 12445;
						else return 12446;
					else
						if (Powered) return 12447;
						else return 12448;
				else
					if (Open)
						if (Powered) return 12449;
						else return 12450;
					else
						if (Powered) return 12451;
						else return 12452;
			else
				if (InWall)
					if (Open)
						if (Powered) return 12453;
						else return 12454;
					else
						if (Powered) return 12455;
						else return 12456;
				else
					if (Open)
						if (Powered) return 12457;
						else return 12458;
					else
						if (Powered) return 12459;
						else return 12460;
		}
		BlockState MangroveFenceGate();
		eBlockFace Facing(BlockState Block);
		bool InWall(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace MangroveHangingSign
	{
		constexpr BlockState MangroveHangingSign(const bool Attached, const unsigned char Rotation, const bool Waterlogged)
		{
			if (Attached)
				if (Rotation == 0)
					if (Waterlogged) return 5578;
					else return 5579;
				else if (Rotation == 1)
					if (Waterlogged) return 5580;
					else return 5581;
				else if (Rotation == 2)
					if (Waterlogged) return 5582;
					else return 5583;
				else if (Rotation == 3)
					if (Waterlogged) return 5584;
					else return 5585;
				else if (Rotation == 4)
					if (Waterlogged) return 5586;
					else return 5587;
				else if (Rotation == 5)
					if (Waterlogged) return 5588;
					else return 5589;
				else if (Rotation == 6)
					if (Waterlogged) return 5590;
					else return 5591;
				else if (Rotation == 7)
					if (Waterlogged) return 5592;
					else return 5593;
				else if (Rotation == 8)
					if (Waterlogged) return 5594;
					else return 5595;
				else if (Rotation == 9)
					if (Waterlogged) return 5596;
					else return 5597;
				else if (Rotation == 10)
					if (Waterlogged) return 5598;
					else return 5599;
				else if (Rotation == 11)
					if (Waterlogged) return 5600;
					else return 5601;
				else if (Rotation == 12)
					if (Waterlogged) return 5602;
					else return 5603;
				else if (Rotation == 13)
					if (Waterlogged) return 5604;
					else return 5605;
				else if (Rotation == 14)
					if (Waterlogged) return 5606;
					else return 5607;
				else
					if (Waterlogged) return 5608;
					else return 5609;
			else
				if (Rotation == 0)
					if (Waterlogged) return 5610;
					else return 5611;
				else if (Rotation == 1)
					if (Waterlogged) return 5612;
					else return 5613;
				else if (Rotation == 2)
					if (Waterlogged) return 5614;
					else return 5615;
				else if (Rotation == 3)
					if (Waterlogged) return 5616;
					else return 5617;
				else if (Rotation == 4)
					if (Waterlogged) return 5618;
					else return 5619;
				else if (Rotation == 5)
					if (Waterlogged) return 5620;
					else return 5621;
				else if (Rotation == 6)
					if (Waterlogged) return 5622;
					else return 5623;
				else if (Rotation == 7)
					if (Waterlogged) return 5624;
					else return 5625;
				else if (Rotation == 8)
					if (Waterlogged) return 5626;
					else return 5627;
				else if (Rotation == 9)
					if (Waterlogged) return 5628;
					else return 5629;
				else if (Rotation == 10)
					if (Waterlogged) return 5630;
					else return 5631;
				else if (Rotation == 11)
					if (Waterlogged) return 5632;
					else return 5633;
				else if (Rotation == 12)
					if (Waterlogged) return 5634;
					else return 5635;
				else if (Rotation == 13)
					if (Waterlogged) return 5636;
					else return 5637;
				else if (Rotation == 14)
					if (Waterlogged) return 5638;
					else return 5639;
				else
					if (Waterlogged) return 5640;
					else return 5641;
		}
		BlockState MangroveHangingSign();
		bool Attached(BlockState Block);
		unsigned char Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MangroveLeaves
	{
		constexpr BlockState MangroveLeaves(const unsigned char Distance, const bool Persistent, const bool Waterlogged)
		{
			if (Distance == 1)
				if (Persistent)
					if (Waterlogged) return 476;
					else return 477;
				else
					if (Waterlogged) return 478;
					else return 479;
			else if (Distance == 2)
				if (Persistent)
					if (Waterlogged) return 480;
					else return 481;
				else
					if (Waterlogged) return 482;
					else return 483;
			else if (Distance == 3)
				if (Persistent)
					if (Waterlogged) return 484;
					else return 485;
				else
					if (Waterlogged) return 486;
					else return 487;
			else if (Distance == 4)
				if (Persistent)
					if (Waterlogged) return 488;
					else return 489;
				else
					if (Waterlogged) return 490;
					else return 491;
			else if (Distance == 5)
				if (Persistent)
					if (Waterlogged) return 492;
					else return 493;
				else
					if (Waterlogged) return 494;
					else return 495;
			else if (Distance == 6)
				if (Persistent)
					if (Waterlogged) return 496;
					else return 497;
				else
					if (Waterlogged) return 498;
					else return 499;
			else
				if (Persistent)
					if (Waterlogged) return 500;
					else return 501;
				else
					if (Waterlogged) return 502;
					else return 503;
		}
		BlockState MangroveLeaves();
		unsigned char Distance(BlockState Block);
		bool Persistent(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MangroveLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState MangroveLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 160;
			else if (Axis == Axis::Y) return 161;
			else return 162;
		}
		BlockState MangroveLog();
		enum Axis Axis(BlockState Block);
	}
	namespace MangrovePlanks
	{
		constexpr BlockState MangrovePlanks()
		{
			return 26;
		}
	}
	namespace MangrovePressurePlate
	{
		constexpr BlockState MangrovePressurePlate(const bool Powered)
		{
			if (Powered) return 5908;
			else return 5909;
		}
		BlockState MangrovePressurePlate();
		bool Powered(BlockState Block);
	}
	namespace MangrovePropagule
	{
		constexpr BlockState MangrovePropagule(const unsigned char Age, const bool Hanging, const unsigned char Stage, const bool Waterlogged)
		{
			if (Age == 0)
				if (Hanging)
					if (Stage == 0)
						if (Waterlogged) return 45;
						else return 46;
					else
						if (Waterlogged) return 47;
						else return 48;
				else
					if (Stage == 0)
						if (Waterlogged) return 49;
						else return 50;
					else
						if (Waterlogged) return 51;
						else return 52;
			else if (Age == 1)
				if (Hanging)
					if (Stage == 0)
						if (Waterlogged) return 53;
						else return 54;
					else
						if (Waterlogged) return 55;
						else return 56;
				else
					if (Stage == 0)
						if (Waterlogged) return 57;
						else return 58;
					else
						if (Waterlogged) return 59;
						else return 60;
			else if (Age == 2)
				if (Hanging)
					if (Stage == 0)
						if (Waterlogged) return 61;
						else return 62;
					else
						if (Waterlogged) return 63;
						else return 64;
				else
					if (Stage == 0)
						if (Waterlogged) return 65;
						else return 66;
					else
						if (Waterlogged) return 67;
						else return 68;
			else if (Age == 3)
				if (Hanging)
					if (Stage == 0)
						if (Waterlogged) return 69;
						else return 70;
					else
						if (Waterlogged) return 71;
						else return 72;
				else
					if (Stage == 0)
						if (Waterlogged) return 73;
						else return 74;
					else
						if (Waterlogged) return 75;
						else return 76;
			else
				if (Hanging)
					if (Stage == 0)
						if (Waterlogged) return 77;
						else return 78;
					else
						if (Waterlogged) return 79;
						else return 80;
				else
					if (Stage == 0)
						if (Waterlogged) return 81;
						else return 82;
					else
						if (Waterlogged) return 83;
						else return 84;
		}
		BlockState MangrovePropagule();
		unsigned char Age(BlockState Block);
		bool Hanging(BlockState Block);
		unsigned char Stage(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MangroveRoots
	{
		constexpr BlockState MangroveRoots(const bool Waterlogged)
		{
			if (Waterlogged) return 163;
			else return 164;
		}
		BlockState MangroveRoots();
		bool Waterlogged(BlockState Block);
	}
	namespace MangroveSign
	{
		constexpr BlockState MangroveSign(const unsigned char Rotation, const bool Waterlogged)
		{
			if (Rotation == 0)
				if (Waterlogged) return 4622;
				else return 4623;
			else if (Rotation == 1)
				if (Waterlogged) return 4624;
				else return 4625;
			else if (Rotation == 2)
				if (Waterlogged) return 4626;
				else return 4627;
			else if (Rotation == 3)
				if (Waterlogged) return 4628;
				else return 4629;
			else if (Rotation == 4)
				if (Waterlogged) return 4630;
				else return 4631;
			else if (Rotation == 5)
				if (Waterlogged) return 4632;
				else return 4633;
			else if (Rotation == 6)
				if (Waterlogged) return 4634;
				else return 4635;
			else if (Rotation == 7)
				if (Waterlogged) return 4636;
				else return 4637;
			else if (Rotation == 8)
				if (Waterlogged) return 4638;
				else return 4639;
			else if (Rotation == 9)
				if (Waterlogged) return 4640;
				else return 4641;
			else if (Rotation == 10)
				if (Waterlogged) return 4642;
				else return 4643;
			else if (Rotation == 11)
				if (Waterlogged) return 4644;
				else return 4645;
			else if (Rotation == 12)
				if (Waterlogged) return 4646;
				else return 4647;
			else if (Rotation == 13)
				if (Waterlogged) return 4648;
				else return 4649;
			else if (Rotation == 14)
				if (Waterlogged) return 4650;
				else return 4651;
			else
				if (Waterlogged) return 4652;
				else return 4653;
		}
		BlockState MangroveSign();
		unsigned char Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MangroveSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState MangroveSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 12099;
				else return 12100;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 12101;
				else return 12102;
			else
				if (Waterlogged) return 12103;
				else return 12104;
		}
		BlockState MangroveSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MangroveStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState MangroveStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11013;
						else return 11014;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11015;
						else return 11016;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11017;
						else return 11018;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11019;
						else return 11020;
					else
						if (Waterlogged) return 11021;
						else return 11022;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11023;
						else return 11024;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11025;
						else return 11026;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11027;
						else return 11028;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11029;
						else return 11030;
					else
						if (Waterlogged) return 11031;
						else return 11032;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11033;
						else return 11034;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11035;
						else return 11036;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11037;
						else return 11038;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11039;
						else return 11040;
					else
						if (Waterlogged) return 11041;
						else return 11042;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11043;
						else return 11044;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11045;
						else return 11046;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11047;
						else return 11048;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11049;
						else return 11050;
					else
						if (Waterlogged) return 11051;
						else return 11052;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11053;
						else return 11054;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11055;
						else return 11056;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11057;
						else return 11058;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11059;
						else return 11060;
					else
						if (Waterlogged) return 11061;
						else return 11062;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11063;
						else return 11064;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11065;
						else return 11066;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11067;
						else return 11068;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11069;
						else return 11070;
					else
						if (Waterlogged) return 11071;
						else return 11072;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11073;
						else return 11074;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11075;
						else return 11076;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11077;
						else return 11078;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11079;
						else return 11080;
					else
						if (Waterlogged) return 11081;
						else return 11082;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11083;
						else return 11084;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11085;
						else return 11086;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11087;
						else return 11088;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11089;
						else return 11090;
					else
						if (Waterlogged) return 11091;
						else return 11092;
		}
		BlockState MangroveStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MangroveTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState MangroveTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6652;
							else return 6653;
						else
							if (Waterlogged) return 6654;
							else return 6655;
					else
						if (Powered)
							if (Waterlogged) return 6656;
							else return 6657;
						else
							if (Waterlogged) return 6658;
							else return 6659;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6660;
							else return 6661;
						else
							if (Waterlogged) return 6662;
							else return 6663;
					else
						if (Powered)
							if (Waterlogged) return 6664;
							else return 6665;
						else
							if (Waterlogged) return 6666;
							else return 6667;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6668;
							else return 6669;
						else
							if (Waterlogged) return 6670;
							else return 6671;
					else
						if (Powered)
							if (Waterlogged) return 6672;
							else return 6673;
						else
							if (Waterlogged) return 6674;
							else return 6675;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6676;
							else return 6677;
						else
							if (Waterlogged) return 6678;
							else return 6679;
					else
						if (Powered)
							if (Waterlogged) return 6680;
							else return 6681;
						else
							if (Waterlogged) return 6682;
							else return 6683;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6684;
							else return 6685;
						else
							if (Waterlogged) return 6686;
							else return 6687;
					else
						if (Powered)
							if (Waterlogged) return 6688;
							else return 6689;
						else
							if (Waterlogged) return 6690;
							else return 6691;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6692;
							else return 6693;
						else
							if (Waterlogged) return 6694;
							else return 6695;
					else
						if (Powered)
							if (Waterlogged) return 6696;
							else return 6697;
						else
							if (Waterlogged) return 6698;
							else return 6699;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6700;
							else return 6701;
						else
							if (Waterlogged) return 6702;
							else return 6703;
					else
						if (Powered)
							if (Waterlogged) return 6704;
							else return 6705;
						else
							if (Waterlogged) return 6706;
							else return 6707;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6708;
							else return 6709;
						else
							if (Waterlogged) return 6710;
							else return 6711;
					else
						if (Powered)
							if (Waterlogged) return 6712;
							else return 6713;
						else
							if (Waterlogged) return 6714;
							else return 6715;
		}
		BlockState MangroveTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MangroveWallHangingSign
	{
		constexpr BlockState MangroveWallHangingSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 5770;
				else return 5771;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 5772;
				else return 5773;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 5774;
				else return 5775;
			else
				if (Waterlogged) return 5776;
				else return 5777;
		}
		BlockState MangroveWallHangingSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MangroveWallSign
	{
		constexpr BlockState MangroveWallSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 4922;
				else return 4923;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 4924;
				else return 4925;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 4926;
				else return 4927;
			else
				if (Waterlogged) return 4928;
				else return 4929;
		}
		BlockState MangroveWallSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MangroveWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState MangroveWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 222;
			else if (Axis == Axis::Y) return 223;
			else return 224;
		}
		BlockState MangroveWood();
		enum Axis Axis(BlockState Block);
	}
	namespace MediumAmethystBud
	{
		constexpr BlockState MediumAmethystBud(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 22117;
				else return 22118;
			else if (Facing == eBlockFace::BLOCK_FACE_XP)
				if (Waterlogged) return 22119;
				else return 22120;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 22121;
				else return 22122;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 22123;
				else return 22124;
			else if (Facing == eBlockFace::BLOCK_FACE_YP)
				if (Waterlogged) return 22125;
				else return 22126;
			else
				if (Waterlogged) return 22127;
				else return 22128;
		}
		BlockState MediumAmethystBud();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Melon
	{
		constexpr BlockState Melon()
		{
			return 7055;
		}
	}
	namespace MelonStem
	{
		constexpr BlockState MelonStem(const unsigned char Age)
		{
			if (Age == 0) return 7072;
			else if (Age == 1) return 7073;
			else if (Age == 2) return 7074;
			else if (Age == 3) return 7075;
			else if (Age == 4) return 7076;
			else if (Age == 5) return 7077;
			else if (Age == 6) return 7078;
			else return 7079;
		}
		BlockState MelonStem();
		unsigned char Age(BlockState Block);
	}
	namespace MossBlock
	{
		constexpr BlockState MossBlock()
		{
			return 25935;
		}
	}
	namespace MossCarpet
	{
		constexpr BlockState MossCarpet()
		{
			return 25886;
		}
	}
	namespace MossyCobblestone
	{
		constexpr BlockState MossyCobblestone()
		{
			return 2399;
		}
	}
	namespace MossyCobblestoneSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState MossyCobblestoneSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 15161;
				else return 15162;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 15163;
				else return 15164;
			else
				if (Waterlogged) return 15165;
				else return 15166;
		}
		BlockState MossyCobblestoneSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MossyCobblestoneStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState MossyCobblestoneStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14337;
						else return 14338;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14339;
						else return 14340;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14341;
						else return 14342;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14343;
						else return 14344;
					else
						if (Waterlogged) return 14345;
						else return 14346;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14347;
						else return 14348;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14349;
						else return 14350;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14351;
						else return 14352;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14353;
						else return 14354;
					else
						if (Waterlogged) return 14355;
						else return 14356;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14357;
						else return 14358;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14359;
						else return 14360;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14361;
						else return 14362;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14363;
						else return 14364;
					else
						if (Waterlogged) return 14365;
						else return 14366;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14367;
						else return 14368;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14369;
						else return 14370;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14371;
						else return 14372;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14373;
						else return 14374;
					else
						if (Waterlogged) return 14375;
						else return 14376;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14377;
						else return 14378;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14379;
						else return 14380;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14381;
						else return 14382;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14383;
						else return 14384;
					else
						if (Waterlogged) return 14385;
						else return 14386;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14387;
						else return 14388;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14389;
						else return 14390;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14391;
						else return 14392;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14393;
						else return 14394;
					else
						if (Waterlogged) return 14395;
						else return 14396;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14397;
						else return 14398;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14399;
						else return 14400;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14401;
						else return 14402;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14403;
						else return 14404;
					else
						if (Waterlogged) return 14405;
						else return 14406;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14407;
						else return 14408;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14409;
						else return 14410;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14411;
						else return 14412;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14413;
						else return 14414;
					else
						if (Waterlogged) return 14415;
						else return 14416;
		}
		BlockState MossyCobblestoneStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MossyCobblestoneWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState MossyCobblestoneWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9027;
								else if (West == West::Low) return 9028;
								else return 9029;
							else
								if (West == West::None) return 9030;
								else if (West == West::Low) return 9031;
								else return 9032;
						else
							if (Waterlogged)
								if (West == West::None) return 9033;
								else if (West == West::Low) return 9034;
								else return 9035;
							else
								if (West == West::None) return 9036;
								else if (West == West::Low) return 9037;
								else return 9038;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9039;
								else if (West == West::Low) return 9040;
								else return 9041;
							else
								if (West == West::None) return 9042;
								else if (West == West::Low) return 9043;
								else return 9044;
						else
							if (Waterlogged)
								if (West == West::None) return 9045;
								else if (West == West::Low) return 9046;
								else return 9047;
							else
								if (West == West::None) return 9048;
								else if (West == West::Low) return 9049;
								else return 9050;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9051;
								else if (West == West::Low) return 9052;
								else return 9053;
							else
								if (West == West::None) return 9054;
								else if (West == West::Low) return 9055;
								else return 9056;
						else
							if (Waterlogged)
								if (West == West::None) return 9057;
								else if (West == West::Low) return 9058;
								else return 9059;
							else
								if (West == West::None) return 9060;
								else if (West == West::Low) return 9061;
								else return 9062;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9063;
								else if (West == West::Low) return 9064;
								else return 9065;
							else
								if (West == West::None) return 9066;
								else if (West == West::Low) return 9067;
								else return 9068;
						else
							if (Waterlogged)
								if (West == West::None) return 9069;
								else if (West == West::Low) return 9070;
								else return 9071;
							else
								if (West == West::None) return 9072;
								else if (West == West::Low) return 9073;
								else return 9074;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9075;
								else if (West == West::Low) return 9076;
								else return 9077;
							else
								if (West == West::None) return 9078;
								else if (West == West::Low) return 9079;
								else return 9080;
						else
							if (Waterlogged)
								if (West == West::None) return 9081;
								else if (West == West::Low) return 9082;
								else return 9083;
							else
								if (West == West::None) return 9084;
								else if (West == West::Low) return 9085;
								else return 9086;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9087;
								else if (West == West::Low) return 9088;
								else return 9089;
							else
								if (West == West::None) return 9090;
								else if (West == West::Low) return 9091;
								else return 9092;
						else
							if (Waterlogged)
								if (West == West::None) return 9093;
								else if (West == West::Low) return 9094;
								else return 9095;
							else
								if (West == West::None) return 9096;
								else if (West == West::Low) return 9097;
								else return 9098;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9099;
								else if (West == West::Low) return 9100;
								else return 9101;
							else
								if (West == West::None) return 9102;
								else if (West == West::Low) return 9103;
								else return 9104;
						else
							if (Waterlogged)
								if (West == West::None) return 9105;
								else if (West == West::Low) return 9106;
								else return 9107;
							else
								if (West == West::None) return 9108;
								else if (West == West::Low) return 9109;
								else return 9110;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9111;
								else if (West == West::Low) return 9112;
								else return 9113;
							else
								if (West == West::None) return 9114;
								else if (West == West::Low) return 9115;
								else return 9116;
						else
							if (Waterlogged)
								if (West == West::None) return 9117;
								else if (West == West::Low) return 9118;
								else return 9119;
							else
								if (West == West::None) return 9120;
								else if (West == West::Low) return 9121;
								else return 9122;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9123;
								else if (West == West::Low) return 9124;
								else return 9125;
							else
								if (West == West::None) return 9126;
								else if (West == West::Low) return 9127;
								else return 9128;
						else
							if (Waterlogged)
								if (West == West::None) return 9129;
								else if (West == West::Low) return 9130;
								else return 9131;
							else
								if (West == West::None) return 9132;
								else if (West == West::Low) return 9133;
								else return 9134;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9135;
								else if (West == West::Low) return 9136;
								else return 9137;
							else
								if (West == West::None) return 9138;
								else if (West == West::Low) return 9139;
								else return 9140;
						else
							if (Waterlogged)
								if (West == West::None) return 9141;
								else if (West == West::Low) return 9142;
								else return 9143;
							else
								if (West == West::None) return 9144;
								else if (West == West::Low) return 9145;
								else return 9146;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9147;
								else if (West == West::Low) return 9148;
								else return 9149;
							else
								if (West == West::None) return 9150;
								else if (West == West::Low) return 9151;
								else return 9152;
						else
							if (Waterlogged)
								if (West == West::None) return 9153;
								else if (West == West::Low) return 9154;
								else return 9155;
							else
								if (West == West::None) return 9156;
								else if (West == West::Low) return 9157;
								else return 9158;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9159;
								else if (West == West::Low) return 9160;
								else return 9161;
							else
								if (West == West::None) return 9162;
								else if (West == West::Low) return 9163;
								else return 9164;
						else
							if (Waterlogged)
								if (West == West::None) return 9165;
								else if (West == West::Low) return 9166;
								else return 9167;
							else
								if (West == West::None) return 9168;
								else if (West == West::Low) return 9169;
								else return 9170;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9171;
								else if (West == West::Low) return 9172;
								else return 9173;
							else
								if (West == West::None) return 9174;
								else if (West == West::Low) return 9175;
								else return 9176;
						else
							if (Waterlogged)
								if (West == West::None) return 9177;
								else if (West == West::Low) return 9178;
								else return 9179;
							else
								if (West == West::None) return 9180;
								else if (West == West::Low) return 9181;
								else return 9182;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9183;
								else if (West == West::Low) return 9184;
								else return 9185;
							else
								if (West == West::None) return 9186;
								else if (West == West::Low) return 9187;
								else return 9188;
						else
							if (Waterlogged)
								if (West == West::None) return 9189;
								else if (West == West::Low) return 9190;
								else return 9191;
							else
								if (West == West::None) return 9192;
								else if (West == West::Low) return 9193;
								else return 9194;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9195;
								else if (West == West::Low) return 9196;
								else return 9197;
							else
								if (West == West::None) return 9198;
								else if (West == West::Low) return 9199;
								else return 9200;
						else
							if (Waterlogged)
								if (West == West::None) return 9201;
								else if (West == West::Low) return 9202;
								else return 9203;
							else
								if (West == West::None) return 9204;
								else if (West == West::Low) return 9205;
								else return 9206;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9207;
								else if (West == West::Low) return 9208;
								else return 9209;
							else
								if (West == West::None) return 9210;
								else if (West == West::Low) return 9211;
								else return 9212;
						else
							if (Waterlogged)
								if (West == West::None) return 9213;
								else if (West == West::Low) return 9214;
								else return 9215;
							else
								if (West == West::None) return 9216;
								else if (West == West::Low) return 9217;
								else return 9218;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9219;
								else if (West == West::Low) return 9220;
								else return 9221;
							else
								if (West == West::None) return 9222;
								else if (West == West::Low) return 9223;
								else return 9224;
						else
							if (Waterlogged)
								if (West == West::None) return 9225;
								else if (West == West::Low) return 9226;
								else return 9227;
							else
								if (West == West::None) return 9228;
								else if (West == West::Low) return 9229;
								else return 9230;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9231;
								else if (West == West::Low) return 9232;
								else return 9233;
							else
								if (West == West::None) return 9234;
								else if (West == West::Low) return 9235;
								else return 9236;
						else
							if (Waterlogged)
								if (West == West::None) return 9237;
								else if (West == West::Low) return 9238;
								else return 9239;
							else
								if (West == West::None) return 9240;
								else if (West == West::Low) return 9241;
								else return 9242;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9243;
								else if (West == West::Low) return 9244;
								else return 9245;
							else
								if (West == West::None) return 9246;
								else if (West == West::Low) return 9247;
								else return 9248;
						else
							if (Waterlogged)
								if (West == West::None) return 9249;
								else if (West == West::Low) return 9250;
								else return 9251;
							else
								if (West == West::None) return 9252;
								else if (West == West::Low) return 9253;
								else return 9254;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9255;
								else if (West == West::Low) return 9256;
								else return 9257;
							else
								if (West == West::None) return 9258;
								else if (West == West::Low) return 9259;
								else return 9260;
						else
							if (Waterlogged)
								if (West == West::None) return 9261;
								else if (West == West::Low) return 9262;
								else return 9263;
							else
								if (West == West::None) return 9264;
								else if (West == West::Low) return 9265;
								else return 9266;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9267;
								else if (West == West::Low) return 9268;
								else return 9269;
							else
								if (West == West::None) return 9270;
								else if (West == West::Low) return 9271;
								else return 9272;
						else
							if (Waterlogged)
								if (West == West::None) return 9273;
								else if (West == West::Low) return 9274;
								else return 9275;
							else
								if (West == West::None) return 9276;
								else if (West == West::Low) return 9277;
								else return 9278;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9279;
								else if (West == West::Low) return 9280;
								else return 9281;
							else
								if (West == West::None) return 9282;
								else if (West == West::Low) return 9283;
								else return 9284;
						else
							if (Waterlogged)
								if (West == West::None) return 9285;
								else if (West == West::Low) return 9286;
								else return 9287;
							else
								if (West == West::None) return 9288;
								else if (West == West::Low) return 9289;
								else return 9290;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9291;
								else if (West == West::Low) return 9292;
								else return 9293;
							else
								if (West == West::None) return 9294;
								else if (West == West::Low) return 9295;
								else return 9296;
						else
							if (Waterlogged)
								if (West == West::None) return 9297;
								else if (West == West::Low) return 9298;
								else return 9299;
							else
								if (West == West::None) return 9300;
								else if (West == West::Low) return 9301;
								else return 9302;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9303;
								else if (West == West::Low) return 9304;
								else return 9305;
							else
								if (West == West::None) return 9306;
								else if (West == West::Low) return 9307;
								else return 9308;
						else
							if (Waterlogged)
								if (West == West::None) return 9309;
								else if (West == West::Low) return 9310;
								else return 9311;
							else
								if (West == West::None) return 9312;
								else if (West == West::Low) return 9313;
								else return 9314;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9315;
								else if (West == West::Low) return 9316;
								else return 9317;
							else
								if (West == West::None) return 9318;
								else if (West == West::Low) return 9319;
								else return 9320;
						else
							if (Waterlogged)
								if (West == West::None) return 9321;
								else if (West == West::Low) return 9322;
								else return 9323;
							else
								if (West == West::None) return 9324;
								else if (West == West::Low) return 9325;
								else return 9326;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9327;
								else if (West == West::Low) return 9328;
								else return 9329;
							else
								if (West == West::None) return 9330;
								else if (West == West::Low) return 9331;
								else return 9332;
						else
							if (Waterlogged)
								if (West == West::None) return 9333;
								else if (West == West::Low) return 9334;
								else return 9335;
							else
								if (West == West::None) return 9336;
								else if (West == West::Low) return 9337;
								else return 9338;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 9339;
								else if (West == West::Low) return 9340;
								else return 9341;
							else
								if (West == West::None) return 9342;
								else if (West == West::Low) return 9343;
								else return 9344;
						else
							if (Waterlogged)
								if (West == West::None) return 9345;
								else if (West == West::Low) return 9346;
								else return 9347;
							else
								if (West == West::None) return 9348;
								else if (West == West::Low) return 9349;
								else return 9350;
		}
		BlockState MossyCobblestoneWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace MossyStoneBrickSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState MossyStoneBrickSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 15149;
				else return 15150;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 15151;
				else return 15152;
			else
				if (Waterlogged) return 15153;
				else return 15154;
		}
		BlockState MossyStoneBrickSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MossyStoneBrickStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState MossyStoneBrickStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14177;
						else return 14178;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14179;
						else return 14180;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14181;
						else return 14182;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14183;
						else return 14184;
					else
						if (Waterlogged) return 14185;
						else return 14186;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14187;
						else return 14188;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14189;
						else return 14190;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14191;
						else return 14192;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14193;
						else return 14194;
					else
						if (Waterlogged) return 14195;
						else return 14196;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14197;
						else return 14198;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14199;
						else return 14200;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14201;
						else return 14202;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14203;
						else return 14204;
					else
						if (Waterlogged) return 14205;
						else return 14206;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14207;
						else return 14208;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14209;
						else return 14210;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14211;
						else return 14212;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14213;
						else return 14214;
					else
						if (Waterlogged) return 14215;
						else return 14216;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14217;
						else return 14218;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14219;
						else return 14220;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14221;
						else return 14222;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14223;
						else return 14224;
					else
						if (Waterlogged) return 14225;
						else return 14226;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14227;
						else return 14228;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14229;
						else return 14230;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14231;
						else return 14232;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14233;
						else return 14234;
					else
						if (Waterlogged) return 14235;
						else return 14236;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14237;
						else return 14238;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14239;
						else return 14240;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14241;
						else return 14242;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14243;
						else return 14244;
					else
						if (Waterlogged) return 14245;
						else return 14246;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14247;
						else return 14248;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14249;
						else return 14250;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14251;
						else return 14252;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14253;
						else return 14254;
					else
						if (Waterlogged) return 14255;
						else return 14256;
		}
		BlockState MossyStoneBrickStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MossyStoneBrickWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState MossyStoneBrickWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16187;
								else if (West == West::Low) return 16188;
								else return 16189;
							else
								if (West == West::None) return 16190;
								else if (West == West::Low) return 16191;
								else return 16192;
						else
							if (Waterlogged)
								if (West == West::None) return 16193;
								else if (West == West::Low) return 16194;
								else return 16195;
							else
								if (West == West::None) return 16196;
								else if (West == West::Low) return 16197;
								else return 16198;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16199;
								else if (West == West::Low) return 16200;
								else return 16201;
							else
								if (West == West::None) return 16202;
								else if (West == West::Low) return 16203;
								else return 16204;
						else
							if (Waterlogged)
								if (West == West::None) return 16205;
								else if (West == West::Low) return 16206;
								else return 16207;
							else
								if (West == West::None) return 16208;
								else if (West == West::Low) return 16209;
								else return 16210;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16211;
								else if (West == West::Low) return 16212;
								else return 16213;
							else
								if (West == West::None) return 16214;
								else if (West == West::Low) return 16215;
								else return 16216;
						else
							if (Waterlogged)
								if (West == West::None) return 16217;
								else if (West == West::Low) return 16218;
								else return 16219;
							else
								if (West == West::None) return 16220;
								else if (West == West::Low) return 16221;
								else return 16222;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16223;
								else if (West == West::Low) return 16224;
								else return 16225;
							else
								if (West == West::None) return 16226;
								else if (West == West::Low) return 16227;
								else return 16228;
						else
							if (Waterlogged)
								if (West == West::None) return 16229;
								else if (West == West::Low) return 16230;
								else return 16231;
							else
								if (West == West::None) return 16232;
								else if (West == West::Low) return 16233;
								else return 16234;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16235;
								else if (West == West::Low) return 16236;
								else return 16237;
							else
								if (West == West::None) return 16238;
								else if (West == West::Low) return 16239;
								else return 16240;
						else
							if (Waterlogged)
								if (West == West::None) return 16241;
								else if (West == West::Low) return 16242;
								else return 16243;
							else
								if (West == West::None) return 16244;
								else if (West == West::Low) return 16245;
								else return 16246;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16247;
								else if (West == West::Low) return 16248;
								else return 16249;
							else
								if (West == West::None) return 16250;
								else if (West == West::Low) return 16251;
								else return 16252;
						else
							if (Waterlogged)
								if (West == West::None) return 16253;
								else if (West == West::Low) return 16254;
								else return 16255;
							else
								if (West == West::None) return 16256;
								else if (West == West::Low) return 16257;
								else return 16258;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16259;
								else if (West == West::Low) return 16260;
								else return 16261;
							else
								if (West == West::None) return 16262;
								else if (West == West::Low) return 16263;
								else return 16264;
						else
							if (Waterlogged)
								if (West == West::None) return 16265;
								else if (West == West::Low) return 16266;
								else return 16267;
							else
								if (West == West::None) return 16268;
								else if (West == West::Low) return 16269;
								else return 16270;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16271;
								else if (West == West::Low) return 16272;
								else return 16273;
							else
								if (West == West::None) return 16274;
								else if (West == West::Low) return 16275;
								else return 16276;
						else
							if (Waterlogged)
								if (West == West::None) return 16277;
								else if (West == West::Low) return 16278;
								else return 16279;
							else
								if (West == West::None) return 16280;
								else if (West == West::Low) return 16281;
								else return 16282;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16283;
								else if (West == West::Low) return 16284;
								else return 16285;
							else
								if (West == West::None) return 16286;
								else if (West == West::Low) return 16287;
								else return 16288;
						else
							if (Waterlogged)
								if (West == West::None) return 16289;
								else if (West == West::Low) return 16290;
								else return 16291;
							else
								if (West == West::None) return 16292;
								else if (West == West::Low) return 16293;
								else return 16294;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16295;
								else if (West == West::Low) return 16296;
								else return 16297;
							else
								if (West == West::None) return 16298;
								else if (West == West::Low) return 16299;
								else return 16300;
						else
							if (Waterlogged)
								if (West == West::None) return 16301;
								else if (West == West::Low) return 16302;
								else return 16303;
							else
								if (West == West::None) return 16304;
								else if (West == West::Low) return 16305;
								else return 16306;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16307;
								else if (West == West::Low) return 16308;
								else return 16309;
							else
								if (West == West::None) return 16310;
								else if (West == West::Low) return 16311;
								else return 16312;
						else
							if (Waterlogged)
								if (West == West::None) return 16313;
								else if (West == West::Low) return 16314;
								else return 16315;
							else
								if (West == West::None) return 16316;
								else if (West == West::Low) return 16317;
								else return 16318;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16319;
								else if (West == West::Low) return 16320;
								else return 16321;
							else
								if (West == West::None) return 16322;
								else if (West == West::Low) return 16323;
								else return 16324;
						else
							if (Waterlogged)
								if (West == West::None) return 16325;
								else if (West == West::Low) return 16326;
								else return 16327;
							else
								if (West == West::None) return 16328;
								else if (West == West::Low) return 16329;
								else return 16330;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16331;
								else if (West == West::Low) return 16332;
								else return 16333;
							else
								if (West == West::None) return 16334;
								else if (West == West::Low) return 16335;
								else return 16336;
						else
							if (Waterlogged)
								if (West == West::None) return 16337;
								else if (West == West::Low) return 16338;
								else return 16339;
							else
								if (West == West::None) return 16340;
								else if (West == West::Low) return 16341;
								else return 16342;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16343;
								else if (West == West::Low) return 16344;
								else return 16345;
							else
								if (West == West::None) return 16346;
								else if (West == West::Low) return 16347;
								else return 16348;
						else
							if (Waterlogged)
								if (West == West::None) return 16349;
								else if (West == West::Low) return 16350;
								else return 16351;
							else
								if (West == West::None) return 16352;
								else if (West == West::Low) return 16353;
								else return 16354;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16355;
								else if (West == West::Low) return 16356;
								else return 16357;
							else
								if (West == West::None) return 16358;
								else if (West == West::Low) return 16359;
								else return 16360;
						else
							if (Waterlogged)
								if (West == West::None) return 16361;
								else if (West == West::Low) return 16362;
								else return 16363;
							else
								if (West == West::None) return 16364;
								else if (West == West::Low) return 16365;
								else return 16366;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16367;
								else if (West == West::Low) return 16368;
								else return 16369;
							else
								if (West == West::None) return 16370;
								else if (West == West::Low) return 16371;
								else return 16372;
						else
							if (Waterlogged)
								if (West == West::None) return 16373;
								else if (West == West::Low) return 16374;
								else return 16375;
							else
								if (West == West::None) return 16376;
								else if (West == West::Low) return 16377;
								else return 16378;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16379;
								else if (West == West::Low) return 16380;
								else return 16381;
							else
								if (West == West::None) return 16382;
								else if (West == West::Low) return 16383;
								else return 16384;
						else
							if (Waterlogged)
								if (West == West::None) return 16385;
								else if (West == West::Low) return 16386;
								else return 16387;
							else
								if (West == West::None) return 16388;
								else if (West == West::Low) return 16389;
								else return 16390;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16391;
								else if (West == West::Low) return 16392;
								else return 16393;
							else
								if (West == West::None) return 16394;
								else if (West == West::Low) return 16395;
								else return 16396;
						else
							if (Waterlogged)
								if (West == West::None) return 16397;
								else if (West == West::Low) return 16398;
								else return 16399;
							else
								if (West == West::None) return 16400;
								else if (West == West::Low) return 16401;
								else return 16402;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16403;
								else if (West == West::Low) return 16404;
								else return 16405;
							else
								if (West == West::None) return 16406;
								else if (West == West::Low) return 16407;
								else return 16408;
						else
							if (Waterlogged)
								if (West == West::None) return 16409;
								else if (West == West::Low) return 16410;
								else return 16411;
							else
								if (West == West::None) return 16412;
								else if (West == West::Low) return 16413;
								else return 16414;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16415;
								else if (West == West::Low) return 16416;
								else return 16417;
							else
								if (West == West::None) return 16418;
								else if (West == West::Low) return 16419;
								else return 16420;
						else
							if (Waterlogged)
								if (West == West::None) return 16421;
								else if (West == West::Low) return 16422;
								else return 16423;
							else
								if (West == West::None) return 16424;
								else if (West == West::Low) return 16425;
								else return 16426;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16427;
								else if (West == West::Low) return 16428;
								else return 16429;
							else
								if (West == West::None) return 16430;
								else if (West == West::Low) return 16431;
								else return 16432;
						else
							if (Waterlogged)
								if (West == West::None) return 16433;
								else if (West == West::Low) return 16434;
								else return 16435;
							else
								if (West == West::None) return 16436;
								else if (West == West::Low) return 16437;
								else return 16438;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16439;
								else if (West == West::Low) return 16440;
								else return 16441;
							else
								if (West == West::None) return 16442;
								else if (West == West::Low) return 16443;
								else return 16444;
						else
							if (Waterlogged)
								if (West == West::None) return 16445;
								else if (West == West::Low) return 16446;
								else return 16447;
							else
								if (West == West::None) return 16448;
								else if (West == West::Low) return 16449;
								else return 16450;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16451;
								else if (West == West::Low) return 16452;
								else return 16453;
							else
								if (West == West::None) return 16454;
								else if (West == West::Low) return 16455;
								else return 16456;
						else
							if (Waterlogged)
								if (West == West::None) return 16457;
								else if (West == West::Low) return 16458;
								else return 16459;
							else
								if (West == West::None) return 16460;
								else if (West == West::Low) return 16461;
								else return 16462;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16463;
								else if (West == West::Low) return 16464;
								else return 16465;
							else
								if (West == West::None) return 16466;
								else if (West == West::Low) return 16467;
								else return 16468;
						else
							if (Waterlogged)
								if (West == West::None) return 16469;
								else if (West == West::Low) return 16470;
								else return 16471;
							else
								if (West == West::None) return 16472;
								else if (West == West::Low) return 16473;
								else return 16474;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16475;
								else if (West == West::Low) return 16476;
								else return 16477;
							else
								if (West == West::None) return 16478;
								else if (West == West::Low) return 16479;
								else return 16480;
						else
							if (Waterlogged)
								if (West == West::None) return 16481;
								else if (West == West::Low) return 16482;
								else return 16483;
							else
								if (West == West::None) return 16484;
								else if (West == West::Low) return 16485;
								else return 16486;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16487;
								else if (West == West::Low) return 16488;
								else return 16489;
							else
								if (West == West::None) return 16490;
								else if (West == West::Low) return 16491;
								else return 16492;
						else
							if (Waterlogged)
								if (West == West::None) return 16493;
								else if (West == West::Low) return 16494;
								else return 16495;
							else
								if (West == West::None) return 16496;
								else if (West == West::Low) return 16497;
								else return 16498;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16499;
								else if (West == West::Low) return 16500;
								else return 16501;
							else
								if (West == West::None) return 16502;
								else if (West == West::Low) return 16503;
								else return 16504;
						else
							if (Waterlogged)
								if (West == West::None) return 16505;
								else if (West == West::Low) return 16506;
								else return 16507;
							else
								if (West == West::None) return 16508;
								else if (West == West::Low) return 16509;
								else return 16510;
		}
		BlockState MossyStoneBrickWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace MossyStoneBricks
	{
		constexpr BlockState MossyStoneBricks()
		{
			return 6781;
		}
	}
	namespace MovingPiston
	{
		enum class Type
		{
			Normal,
			Sticky,
		};
		constexpr BlockState MovingPiston(const eBlockFace Facing, const enum Type Type)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Type == Type::Normal) return 2109;
				else return 2110;
			else if (Facing == eBlockFace::BLOCK_FACE_XP)
				if (Type == Type::Normal) return 2111;
				else return 2112;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Type == Type::Normal) return 2113;
				else return 2114;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Type == Type::Normal) return 2115;
				else return 2116;
			else if (Facing == eBlockFace::BLOCK_FACE_YP)
				if (Type == Type::Normal) return 2117;
				else return 2118;
			else
				if (Type == Type::Normal) return 2119;
				else return 2120;
		}
		BlockState MovingPiston();
		eBlockFace Facing(BlockState Block);
		enum Type Type(BlockState Block);
	}
	namespace Mud
	{
		constexpr BlockState Mud()
		{
			return 25995;
		}
	}
	namespace MudBrickSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState MudBrickSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 12165;
				else return 12166;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 12167;
				else return 12168;
			else
				if (Waterlogged) return 12169;
				else return 12170;
		}
		BlockState MudBrickSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MudBrickStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState MudBrickStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7560;
						else return 7561;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7562;
						else return 7563;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7564;
						else return 7565;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7566;
						else return 7567;
					else
						if (Waterlogged) return 7568;
						else return 7569;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7570;
						else return 7571;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7572;
						else return 7573;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7574;
						else return 7575;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7576;
						else return 7577;
					else
						if (Waterlogged) return 7578;
						else return 7579;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7580;
						else return 7581;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7582;
						else return 7583;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7584;
						else return 7585;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7586;
						else return 7587;
					else
						if (Waterlogged) return 7588;
						else return 7589;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7590;
						else return 7591;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7592;
						else return 7593;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7594;
						else return 7595;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7596;
						else return 7597;
					else
						if (Waterlogged) return 7598;
						else return 7599;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7600;
						else return 7601;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7602;
						else return 7603;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7604;
						else return 7605;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7606;
						else return 7607;
					else
						if (Waterlogged) return 7608;
						else return 7609;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7610;
						else return 7611;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7612;
						else return 7613;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7614;
						else return 7615;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7616;
						else return 7617;
					else
						if (Waterlogged) return 7618;
						else return 7619;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7620;
						else return 7621;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7622;
						else return 7623;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7624;
						else return 7625;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7626;
						else return 7627;
					else
						if (Waterlogged) return 7628;
						else return 7629;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7630;
						else return 7631;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7632;
						else return 7633;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7634;
						else return 7635;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7636;
						else return 7637;
					else
						if (Waterlogged) return 7638;
						else return 7639;
		}
		BlockState MudBrickStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MudBrickWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState MudBrickWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17159;
								else if (West == West::Low) return 17160;
								else return 17161;
							else
								if (West == West::None) return 17162;
								else if (West == West::Low) return 17163;
								else return 17164;
						else
							if (Waterlogged)
								if (West == West::None) return 17165;
								else if (West == West::Low) return 17166;
								else return 17167;
							else
								if (West == West::None) return 17168;
								else if (West == West::Low) return 17169;
								else return 17170;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17171;
								else if (West == West::Low) return 17172;
								else return 17173;
							else
								if (West == West::None) return 17174;
								else if (West == West::Low) return 17175;
								else return 17176;
						else
							if (Waterlogged)
								if (West == West::None) return 17177;
								else if (West == West::Low) return 17178;
								else return 17179;
							else
								if (West == West::None) return 17180;
								else if (West == West::Low) return 17181;
								else return 17182;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17183;
								else if (West == West::Low) return 17184;
								else return 17185;
							else
								if (West == West::None) return 17186;
								else if (West == West::Low) return 17187;
								else return 17188;
						else
							if (Waterlogged)
								if (West == West::None) return 17189;
								else if (West == West::Low) return 17190;
								else return 17191;
							else
								if (West == West::None) return 17192;
								else if (West == West::Low) return 17193;
								else return 17194;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17195;
								else if (West == West::Low) return 17196;
								else return 17197;
							else
								if (West == West::None) return 17198;
								else if (West == West::Low) return 17199;
								else return 17200;
						else
							if (Waterlogged)
								if (West == West::None) return 17201;
								else if (West == West::Low) return 17202;
								else return 17203;
							else
								if (West == West::None) return 17204;
								else if (West == West::Low) return 17205;
								else return 17206;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17207;
								else if (West == West::Low) return 17208;
								else return 17209;
							else
								if (West == West::None) return 17210;
								else if (West == West::Low) return 17211;
								else return 17212;
						else
							if (Waterlogged)
								if (West == West::None) return 17213;
								else if (West == West::Low) return 17214;
								else return 17215;
							else
								if (West == West::None) return 17216;
								else if (West == West::Low) return 17217;
								else return 17218;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17219;
								else if (West == West::Low) return 17220;
								else return 17221;
							else
								if (West == West::None) return 17222;
								else if (West == West::Low) return 17223;
								else return 17224;
						else
							if (Waterlogged)
								if (West == West::None) return 17225;
								else if (West == West::Low) return 17226;
								else return 17227;
							else
								if (West == West::None) return 17228;
								else if (West == West::Low) return 17229;
								else return 17230;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17231;
								else if (West == West::Low) return 17232;
								else return 17233;
							else
								if (West == West::None) return 17234;
								else if (West == West::Low) return 17235;
								else return 17236;
						else
							if (Waterlogged)
								if (West == West::None) return 17237;
								else if (West == West::Low) return 17238;
								else return 17239;
							else
								if (West == West::None) return 17240;
								else if (West == West::Low) return 17241;
								else return 17242;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17243;
								else if (West == West::Low) return 17244;
								else return 17245;
							else
								if (West == West::None) return 17246;
								else if (West == West::Low) return 17247;
								else return 17248;
						else
							if (Waterlogged)
								if (West == West::None) return 17249;
								else if (West == West::Low) return 17250;
								else return 17251;
							else
								if (West == West::None) return 17252;
								else if (West == West::Low) return 17253;
								else return 17254;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17255;
								else if (West == West::Low) return 17256;
								else return 17257;
							else
								if (West == West::None) return 17258;
								else if (West == West::Low) return 17259;
								else return 17260;
						else
							if (Waterlogged)
								if (West == West::None) return 17261;
								else if (West == West::Low) return 17262;
								else return 17263;
							else
								if (West == West::None) return 17264;
								else if (West == West::Low) return 17265;
								else return 17266;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17267;
								else if (West == West::Low) return 17268;
								else return 17269;
							else
								if (West == West::None) return 17270;
								else if (West == West::Low) return 17271;
								else return 17272;
						else
							if (Waterlogged)
								if (West == West::None) return 17273;
								else if (West == West::Low) return 17274;
								else return 17275;
							else
								if (West == West::None) return 17276;
								else if (West == West::Low) return 17277;
								else return 17278;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17279;
								else if (West == West::Low) return 17280;
								else return 17281;
							else
								if (West == West::None) return 17282;
								else if (West == West::Low) return 17283;
								else return 17284;
						else
							if (Waterlogged)
								if (West == West::None) return 17285;
								else if (West == West::Low) return 17286;
								else return 17287;
							else
								if (West == West::None) return 17288;
								else if (West == West::Low) return 17289;
								else return 17290;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17291;
								else if (West == West::Low) return 17292;
								else return 17293;
							else
								if (West == West::None) return 17294;
								else if (West == West::Low) return 17295;
								else return 17296;
						else
							if (Waterlogged)
								if (West == West::None) return 17297;
								else if (West == West::Low) return 17298;
								else return 17299;
							else
								if (West == West::None) return 17300;
								else if (West == West::Low) return 17301;
								else return 17302;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17303;
								else if (West == West::Low) return 17304;
								else return 17305;
							else
								if (West == West::None) return 17306;
								else if (West == West::Low) return 17307;
								else return 17308;
						else
							if (Waterlogged)
								if (West == West::None) return 17309;
								else if (West == West::Low) return 17310;
								else return 17311;
							else
								if (West == West::None) return 17312;
								else if (West == West::Low) return 17313;
								else return 17314;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17315;
								else if (West == West::Low) return 17316;
								else return 17317;
							else
								if (West == West::None) return 17318;
								else if (West == West::Low) return 17319;
								else return 17320;
						else
							if (Waterlogged)
								if (West == West::None) return 17321;
								else if (West == West::Low) return 17322;
								else return 17323;
							else
								if (West == West::None) return 17324;
								else if (West == West::Low) return 17325;
								else return 17326;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17327;
								else if (West == West::Low) return 17328;
								else return 17329;
							else
								if (West == West::None) return 17330;
								else if (West == West::Low) return 17331;
								else return 17332;
						else
							if (Waterlogged)
								if (West == West::None) return 17333;
								else if (West == West::Low) return 17334;
								else return 17335;
							else
								if (West == West::None) return 17336;
								else if (West == West::Low) return 17337;
								else return 17338;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17339;
								else if (West == West::Low) return 17340;
								else return 17341;
							else
								if (West == West::None) return 17342;
								else if (West == West::Low) return 17343;
								else return 17344;
						else
							if (Waterlogged)
								if (West == West::None) return 17345;
								else if (West == West::Low) return 17346;
								else return 17347;
							else
								if (West == West::None) return 17348;
								else if (West == West::Low) return 17349;
								else return 17350;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17351;
								else if (West == West::Low) return 17352;
								else return 17353;
							else
								if (West == West::None) return 17354;
								else if (West == West::Low) return 17355;
								else return 17356;
						else
							if (Waterlogged)
								if (West == West::None) return 17357;
								else if (West == West::Low) return 17358;
								else return 17359;
							else
								if (West == West::None) return 17360;
								else if (West == West::Low) return 17361;
								else return 17362;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17363;
								else if (West == West::Low) return 17364;
								else return 17365;
							else
								if (West == West::None) return 17366;
								else if (West == West::Low) return 17367;
								else return 17368;
						else
							if (Waterlogged)
								if (West == West::None) return 17369;
								else if (West == West::Low) return 17370;
								else return 17371;
							else
								if (West == West::None) return 17372;
								else if (West == West::Low) return 17373;
								else return 17374;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17375;
								else if (West == West::Low) return 17376;
								else return 17377;
							else
								if (West == West::None) return 17378;
								else if (West == West::Low) return 17379;
								else return 17380;
						else
							if (Waterlogged)
								if (West == West::None) return 17381;
								else if (West == West::Low) return 17382;
								else return 17383;
							else
								if (West == West::None) return 17384;
								else if (West == West::Low) return 17385;
								else return 17386;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17387;
								else if (West == West::Low) return 17388;
								else return 17389;
							else
								if (West == West::None) return 17390;
								else if (West == West::Low) return 17391;
								else return 17392;
						else
							if (Waterlogged)
								if (West == West::None) return 17393;
								else if (West == West::Low) return 17394;
								else return 17395;
							else
								if (West == West::None) return 17396;
								else if (West == West::Low) return 17397;
								else return 17398;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17399;
								else if (West == West::Low) return 17400;
								else return 17401;
							else
								if (West == West::None) return 17402;
								else if (West == West::Low) return 17403;
								else return 17404;
						else
							if (Waterlogged)
								if (West == West::None) return 17405;
								else if (West == West::Low) return 17406;
								else return 17407;
							else
								if (West == West::None) return 17408;
								else if (West == West::Low) return 17409;
								else return 17410;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17411;
								else if (West == West::Low) return 17412;
								else return 17413;
							else
								if (West == West::None) return 17414;
								else if (West == West::Low) return 17415;
								else return 17416;
						else
							if (Waterlogged)
								if (West == West::None) return 17417;
								else if (West == West::Low) return 17418;
								else return 17419;
							else
								if (West == West::None) return 17420;
								else if (West == West::Low) return 17421;
								else return 17422;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17423;
								else if (West == West::Low) return 17424;
								else return 17425;
							else
								if (West == West::None) return 17426;
								else if (West == West::Low) return 17427;
								else return 17428;
						else
							if (Waterlogged)
								if (West == West::None) return 17429;
								else if (West == West::Low) return 17430;
								else return 17431;
							else
								if (West == West::None) return 17432;
								else if (West == West::Low) return 17433;
								else return 17434;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17435;
								else if (West == West::Low) return 17436;
								else return 17437;
							else
								if (West == West::None) return 17438;
								else if (West == West::Low) return 17439;
								else return 17440;
						else
							if (Waterlogged)
								if (West == West::None) return 17441;
								else if (West == West::Low) return 17442;
								else return 17443;
							else
								if (West == West::None) return 17444;
								else if (West == West::Low) return 17445;
								else return 17446;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17447;
								else if (West == West::Low) return 17448;
								else return 17449;
							else
								if (West == West::None) return 17450;
								else if (West == West::Low) return 17451;
								else return 17452;
						else
							if (Waterlogged)
								if (West == West::None) return 17453;
								else if (West == West::Low) return 17454;
								else return 17455;
							else
								if (West == West::None) return 17456;
								else if (West == West::Low) return 17457;
								else return 17458;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17459;
								else if (West == West::Low) return 17460;
								else return 17461;
							else
								if (West == West::None) return 17462;
								else if (West == West::Low) return 17463;
								else return 17464;
						else
							if (Waterlogged)
								if (West == West::None) return 17465;
								else if (West == West::Low) return 17466;
								else return 17467;
							else
								if (West == West::None) return 17468;
								else if (West == West::Low) return 17469;
								else return 17470;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17471;
								else if (West == West::Low) return 17472;
								else return 17473;
							else
								if (West == West::None) return 17474;
								else if (West == West::Low) return 17475;
								else return 17476;
						else
							if (Waterlogged)
								if (West == West::None) return 17477;
								else if (West == West::Low) return 17478;
								else return 17479;
							else
								if (West == West::None) return 17480;
								else if (West == West::Low) return 17481;
								else return 17482;
		}
		BlockState MudBrickWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace MudBricks
	{
		constexpr BlockState MudBricks()
		{
			return 6785;
		}
	}
	namespace MuddyMangroveRoots
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState MuddyMangroveRoots(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 165;
			else if (Axis == Axis::Y) return 166;
			else return 167;
		}
		BlockState MuddyMangroveRoots();
		enum Axis Axis(BlockState Block);
	}
	namespace MushroomStem
	{
		constexpr BlockState MushroomStem(const bool Down, const bool East, const bool North, const bool South, const bool Up, const bool West)
		{
			if (Down)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 6920;
								else return 6921;
							else
								if (West) return 6922;
								else return 6923;
						else
							if (Up)
								if (West) return 6924;
								else return 6925;
							else
								if (West) return 6926;
								else return 6927;
					else
						if (South)
							if (Up)
								if (West) return 6928;
								else return 6929;
							else
								if (West) return 6930;
								else return 6931;
						else
							if (Up)
								if (West) return 6932;
								else return 6933;
							else
								if (West) return 6934;
								else return 6935;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 6936;
								else return 6937;
							else
								if (West) return 6938;
								else return 6939;
						else
							if (Up)
								if (West) return 6940;
								else return 6941;
							else
								if (West) return 6942;
								else return 6943;
					else
						if (South)
							if (Up)
								if (West) return 6944;
								else return 6945;
							else
								if (West) return 6946;
								else return 6947;
						else
							if (Up)
								if (West) return 6948;
								else return 6949;
							else
								if (West) return 6950;
								else return 6951;
			else
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 6952;
								else return 6953;
							else
								if (West) return 6954;
								else return 6955;
						else
							if (Up)
								if (West) return 6956;
								else return 6957;
							else
								if (West) return 6958;
								else return 6959;
					else
						if (South)
							if (Up)
								if (West) return 6960;
								else return 6961;
							else
								if (West) return 6962;
								else return 6963;
						else
							if (Up)
								if (West) return 6964;
								else return 6965;
							else
								if (West) return 6966;
								else return 6967;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 6968;
								else return 6969;
							else
								if (West) return 6970;
								else return 6971;
						else
							if (Up)
								if (West) return 6972;
								else return 6973;
							else
								if (West) return 6974;
								else return 6975;
					else
						if (South)
							if (Up)
								if (West) return 6976;
								else return 6977;
							else
								if (West) return 6978;
								else return 6979;
						else
							if (Up)
								if (West) return 6980;
								else return 6981;
							else
								if (West) return 6982;
								else return 6983;
		}
		BlockState MushroomStem();
		bool Down(BlockState Block);
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Up(BlockState Block);
		bool West(BlockState Block);
	}
	namespace Mycelium
	{
		constexpr BlockState Mycelium(const bool Snowy)
		{
			if (Snowy) return 7640;
			else return 7641;
		}
		BlockState Mycelium();
		bool Snowy(BlockState Block);
	}
	namespace NetherBrickFence
	{
		constexpr BlockState NetherBrickFence(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 8057;
							else return 8058;
						else
							if (West) return 8059;
							else return 8060;
					else
						if (Waterlogged)
							if (West) return 8061;
							else return 8062;
						else
							if (West) return 8063;
							else return 8064;
				else
					if (South)
						if (Waterlogged)
							if (West) return 8065;
							else return 8066;
						else
							if (West) return 8067;
							else return 8068;
					else
						if (Waterlogged)
							if (West) return 8069;
							else return 8070;
						else
							if (West) return 8071;
							else return 8072;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 8073;
							else return 8074;
						else
							if (West) return 8075;
							else return 8076;
					else
						if (Waterlogged)
							if (West) return 8077;
							else return 8078;
						else
							if (West) return 8079;
							else return 8080;
				else
					if (South)
						if (Waterlogged)
							if (West) return 8081;
							else return 8082;
						else
							if (West) return 8083;
							else return 8084;
					else
						if (Waterlogged)
							if (West) return 8085;
							else return 8086;
						else
							if (West) return 8087;
							else return 8088;
		}
		BlockState NetherBrickFence();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace NetherBrickSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState NetherBrickSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 12171;
				else return 12172;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 12173;
				else return 12174;
			else
				if (Waterlogged) return 12175;
				else return 12176;
		}
		BlockState NetherBrickSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace NetherBrickStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState NetherBrickStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8089;
						else return 8090;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8091;
						else return 8092;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8093;
						else return 8094;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8095;
						else return 8096;
					else
						if (Waterlogged) return 8097;
						else return 8098;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8099;
						else return 8100;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8101;
						else return 8102;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8103;
						else return 8104;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8105;
						else return 8106;
					else
						if (Waterlogged) return 8107;
						else return 8108;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8109;
						else return 8110;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8111;
						else return 8112;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8113;
						else return 8114;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8115;
						else return 8116;
					else
						if (Waterlogged) return 8117;
						else return 8118;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8119;
						else return 8120;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8121;
						else return 8122;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8123;
						else return 8124;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8125;
						else return 8126;
					else
						if (Waterlogged) return 8127;
						else return 8128;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8129;
						else return 8130;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8131;
						else return 8132;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8133;
						else return 8134;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8135;
						else return 8136;
					else
						if (Waterlogged) return 8137;
						else return 8138;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8139;
						else return 8140;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8141;
						else return 8142;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8143;
						else return 8144;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8145;
						else return 8146;
					else
						if (Waterlogged) return 8147;
						else return 8148;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8149;
						else return 8150;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8151;
						else return 8152;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8153;
						else return 8154;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8155;
						else return 8156;
					else
						if (Waterlogged) return 8157;
						else return 8158;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8159;
						else return 8160;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8161;
						else return 8162;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8163;
						else return 8164;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8165;
						else return 8166;
					else
						if (Waterlogged) return 8167;
						else return 8168;
		}
		BlockState NetherBrickStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace NetherBrickWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState NetherBrickWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17483;
								else if (West == West::Low) return 17484;
								else return 17485;
							else
								if (West == West::None) return 17486;
								else if (West == West::Low) return 17487;
								else return 17488;
						else
							if (Waterlogged)
								if (West == West::None) return 17489;
								else if (West == West::Low) return 17490;
								else return 17491;
							else
								if (West == West::None) return 17492;
								else if (West == West::Low) return 17493;
								else return 17494;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17495;
								else if (West == West::Low) return 17496;
								else return 17497;
							else
								if (West == West::None) return 17498;
								else if (West == West::Low) return 17499;
								else return 17500;
						else
							if (Waterlogged)
								if (West == West::None) return 17501;
								else if (West == West::Low) return 17502;
								else return 17503;
							else
								if (West == West::None) return 17504;
								else if (West == West::Low) return 17505;
								else return 17506;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17507;
								else if (West == West::Low) return 17508;
								else return 17509;
							else
								if (West == West::None) return 17510;
								else if (West == West::Low) return 17511;
								else return 17512;
						else
							if (Waterlogged)
								if (West == West::None) return 17513;
								else if (West == West::Low) return 17514;
								else return 17515;
							else
								if (West == West::None) return 17516;
								else if (West == West::Low) return 17517;
								else return 17518;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17519;
								else if (West == West::Low) return 17520;
								else return 17521;
							else
								if (West == West::None) return 17522;
								else if (West == West::Low) return 17523;
								else return 17524;
						else
							if (Waterlogged)
								if (West == West::None) return 17525;
								else if (West == West::Low) return 17526;
								else return 17527;
							else
								if (West == West::None) return 17528;
								else if (West == West::Low) return 17529;
								else return 17530;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17531;
								else if (West == West::Low) return 17532;
								else return 17533;
							else
								if (West == West::None) return 17534;
								else if (West == West::Low) return 17535;
								else return 17536;
						else
							if (Waterlogged)
								if (West == West::None) return 17537;
								else if (West == West::Low) return 17538;
								else return 17539;
							else
								if (West == West::None) return 17540;
								else if (West == West::Low) return 17541;
								else return 17542;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17543;
								else if (West == West::Low) return 17544;
								else return 17545;
							else
								if (West == West::None) return 17546;
								else if (West == West::Low) return 17547;
								else return 17548;
						else
							if (Waterlogged)
								if (West == West::None) return 17549;
								else if (West == West::Low) return 17550;
								else return 17551;
							else
								if (West == West::None) return 17552;
								else if (West == West::Low) return 17553;
								else return 17554;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17555;
								else if (West == West::Low) return 17556;
								else return 17557;
							else
								if (West == West::None) return 17558;
								else if (West == West::Low) return 17559;
								else return 17560;
						else
							if (Waterlogged)
								if (West == West::None) return 17561;
								else if (West == West::Low) return 17562;
								else return 17563;
							else
								if (West == West::None) return 17564;
								else if (West == West::Low) return 17565;
								else return 17566;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17567;
								else if (West == West::Low) return 17568;
								else return 17569;
							else
								if (West == West::None) return 17570;
								else if (West == West::Low) return 17571;
								else return 17572;
						else
							if (Waterlogged)
								if (West == West::None) return 17573;
								else if (West == West::Low) return 17574;
								else return 17575;
							else
								if (West == West::None) return 17576;
								else if (West == West::Low) return 17577;
								else return 17578;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17579;
								else if (West == West::Low) return 17580;
								else return 17581;
							else
								if (West == West::None) return 17582;
								else if (West == West::Low) return 17583;
								else return 17584;
						else
							if (Waterlogged)
								if (West == West::None) return 17585;
								else if (West == West::Low) return 17586;
								else return 17587;
							else
								if (West == West::None) return 17588;
								else if (West == West::Low) return 17589;
								else return 17590;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17591;
								else if (West == West::Low) return 17592;
								else return 17593;
							else
								if (West == West::None) return 17594;
								else if (West == West::Low) return 17595;
								else return 17596;
						else
							if (Waterlogged)
								if (West == West::None) return 17597;
								else if (West == West::Low) return 17598;
								else return 17599;
							else
								if (West == West::None) return 17600;
								else if (West == West::Low) return 17601;
								else return 17602;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17603;
								else if (West == West::Low) return 17604;
								else return 17605;
							else
								if (West == West::None) return 17606;
								else if (West == West::Low) return 17607;
								else return 17608;
						else
							if (Waterlogged)
								if (West == West::None) return 17609;
								else if (West == West::Low) return 17610;
								else return 17611;
							else
								if (West == West::None) return 17612;
								else if (West == West::Low) return 17613;
								else return 17614;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17615;
								else if (West == West::Low) return 17616;
								else return 17617;
							else
								if (West == West::None) return 17618;
								else if (West == West::Low) return 17619;
								else return 17620;
						else
							if (Waterlogged)
								if (West == West::None) return 17621;
								else if (West == West::Low) return 17622;
								else return 17623;
							else
								if (West == West::None) return 17624;
								else if (West == West::Low) return 17625;
								else return 17626;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17627;
								else if (West == West::Low) return 17628;
								else return 17629;
							else
								if (West == West::None) return 17630;
								else if (West == West::Low) return 17631;
								else return 17632;
						else
							if (Waterlogged)
								if (West == West::None) return 17633;
								else if (West == West::Low) return 17634;
								else return 17635;
							else
								if (West == West::None) return 17636;
								else if (West == West::Low) return 17637;
								else return 17638;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17639;
								else if (West == West::Low) return 17640;
								else return 17641;
							else
								if (West == West::None) return 17642;
								else if (West == West::Low) return 17643;
								else return 17644;
						else
							if (Waterlogged)
								if (West == West::None) return 17645;
								else if (West == West::Low) return 17646;
								else return 17647;
							else
								if (West == West::None) return 17648;
								else if (West == West::Low) return 17649;
								else return 17650;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17651;
								else if (West == West::Low) return 17652;
								else return 17653;
							else
								if (West == West::None) return 17654;
								else if (West == West::Low) return 17655;
								else return 17656;
						else
							if (Waterlogged)
								if (West == West::None) return 17657;
								else if (West == West::Low) return 17658;
								else return 17659;
							else
								if (West == West::None) return 17660;
								else if (West == West::Low) return 17661;
								else return 17662;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17663;
								else if (West == West::Low) return 17664;
								else return 17665;
							else
								if (West == West::None) return 17666;
								else if (West == West::Low) return 17667;
								else return 17668;
						else
							if (Waterlogged)
								if (West == West::None) return 17669;
								else if (West == West::Low) return 17670;
								else return 17671;
							else
								if (West == West::None) return 17672;
								else if (West == West::Low) return 17673;
								else return 17674;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17675;
								else if (West == West::Low) return 17676;
								else return 17677;
							else
								if (West == West::None) return 17678;
								else if (West == West::Low) return 17679;
								else return 17680;
						else
							if (Waterlogged)
								if (West == West::None) return 17681;
								else if (West == West::Low) return 17682;
								else return 17683;
							else
								if (West == West::None) return 17684;
								else if (West == West::Low) return 17685;
								else return 17686;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17687;
								else if (West == West::Low) return 17688;
								else return 17689;
							else
								if (West == West::None) return 17690;
								else if (West == West::Low) return 17691;
								else return 17692;
						else
							if (Waterlogged)
								if (West == West::None) return 17693;
								else if (West == West::Low) return 17694;
								else return 17695;
							else
								if (West == West::None) return 17696;
								else if (West == West::Low) return 17697;
								else return 17698;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17699;
								else if (West == West::Low) return 17700;
								else return 17701;
							else
								if (West == West::None) return 17702;
								else if (West == West::Low) return 17703;
								else return 17704;
						else
							if (Waterlogged)
								if (West == West::None) return 17705;
								else if (West == West::Low) return 17706;
								else return 17707;
							else
								if (West == West::None) return 17708;
								else if (West == West::Low) return 17709;
								else return 17710;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17711;
								else if (West == West::Low) return 17712;
								else return 17713;
							else
								if (West == West::None) return 17714;
								else if (West == West::Low) return 17715;
								else return 17716;
						else
							if (Waterlogged)
								if (West == West::None) return 17717;
								else if (West == West::Low) return 17718;
								else return 17719;
							else
								if (West == West::None) return 17720;
								else if (West == West::Low) return 17721;
								else return 17722;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17723;
								else if (West == West::Low) return 17724;
								else return 17725;
							else
								if (West == West::None) return 17726;
								else if (West == West::Low) return 17727;
								else return 17728;
						else
							if (Waterlogged)
								if (West == West::None) return 17729;
								else if (West == West::Low) return 17730;
								else return 17731;
							else
								if (West == West::None) return 17732;
								else if (West == West::Low) return 17733;
								else return 17734;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17735;
								else if (West == West::Low) return 17736;
								else return 17737;
							else
								if (West == West::None) return 17738;
								else if (West == West::Low) return 17739;
								else return 17740;
						else
							if (Waterlogged)
								if (West == West::None) return 17741;
								else if (West == West::Low) return 17742;
								else return 17743;
							else
								if (West == West::None) return 17744;
								else if (West == West::Low) return 17745;
								else return 17746;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17747;
								else if (West == West::Low) return 17748;
								else return 17749;
							else
								if (West == West::None) return 17750;
								else if (West == West::Low) return 17751;
								else return 17752;
						else
							if (Waterlogged)
								if (West == West::None) return 17753;
								else if (West == West::Low) return 17754;
								else return 17755;
							else
								if (West == West::None) return 17756;
								else if (West == West::Low) return 17757;
								else return 17758;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17759;
								else if (West == West::Low) return 17760;
								else return 17761;
							else
								if (West == West::None) return 17762;
								else if (West == West::Low) return 17763;
								else return 17764;
						else
							if (Waterlogged)
								if (West == West::None) return 17765;
								else if (West == West::Low) return 17766;
								else return 17767;
							else
								if (West == West::None) return 17768;
								else if (West == West::Low) return 17769;
								else return 17770;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17771;
								else if (West == West::Low) return 17772;
								else return 17773;
							else
								if (West == West::None) return 17774;
								else if (West == West::Low) return 17775;
								else return 17776;
						else
							if (Waterlogged)
								if (West == West::None) return 17777;
								else if (West == West::Low) return 17778;
								else return 17779;
							else
								if (West == West::None) return 17780;
								else if (West == West::Low) return 17781;
								else return 17782;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17783;
								else if (West == West::Low) return 17784;
								else return 17785;
							else
								if (West == West::None) return 17786;
								else if (West == West::Low) return 17787;
								else return 17788;
						else
							if (Waterlogged)
								if (West == West::None) return 17789;
								else if (West == West::Low) return 17790;
								else return 17791;
							else
								if (West == West::None) return 17792;
								else if (West == West::Low) return 17793;
								else return 17794;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17795;
								else if (West == West::Low) return 17796;
								else return 17797;
							else
								if (West == West::None) return 17798;
								else if (West == West::Low) return 17799;
								else return 17800;
						else
							if (Waterlogged)
								if (West == West::None) return 17801;
								else if (West == West::Low) return 17802;
								else return 17803;
							else
								if (West == West::None) return 17804;
								else if (West == West::Low) return 17805;
								else return 17806;
		}
		BlockState NetherBrickWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace NetherBricks
	{
		constexpr BlockState NetherBricks()
		{
			return 8056;
		}
	}
	namespace NetherGoldOre
	{
		constexpr BlockState NetherGoldOre()
		{
			return 135;
		}
	}
	namespace NetherPortal
	{
		enum class Axis
		{
			X,
			Z,
		};
		constexpr BlockState NetherPortal(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 6043;
			else return 6044;
		}
		BlockState NetherPortal();
		enum Axis Axis(BlockState Block);
	}
	namespace NetherQuartzOre
	{
		constexpr BlockState NetherQuartzOre()
		{
			return 10033;
		}
	}
	namespace NetherSprouts
	{
		constexpr BlockState NetherSprouts()
		{
			return 19650;
		}
	}
	namespace NetherWart
	{
		constexpr BlockState NetherWart(const unsigned char Age)
		{
			if (Age == 0) return 8169;
			else if (Age == 1) return 8170;
			else if (Age == 2) return 8171;
			else return 8172;
		}
		BlockState NetherWart();
		unsigned char Age(BlockState Block);
	}
	namespace NetherWartBlock
	{
		constexpr BlockState NetherWartBlock()
		{
			return 13567;
		}
	}
	namespace NetheriteBlock
	{
		constexpr BlockState NetheriteBlock()
		{
			return 20507;
		}
	}
	namespace Netherrack
	{
		constexpr BlockState Netherrack()
		{
			return 6028;
		}
	}
	namespace NoteBlock
	{
		enum class Instrument
		{
			Harp,
			Basedrum,
			Snare,
			Hat,
			Bass,
			Flute,
			Bell,
			Guitar,
			Chime,
			Xylophone,
			IronXylophone,
			CowBell,
			Didgeridoo,
			Bit,
			Banjo,
			Pling,
			Zombie,
			Skeleton,
			Creeper,
			Dragon,
			WitherSkeleton,
			Piglin,
			CustomHead,
		};
		constexpr BlockState NoteBlock(const enum Instrument Instrument, const unsigned char Note, const bool Powered)
		{
			if (Instrument == Instrument::Harp)
				if (Note == 0)
					if (Powered) return 581;
					else return 582;
				else if (Note == 1)
					if (Powered) return 583;
					else return 584;
				else if (Note == 2)
					if (Powered) return 585;
					else return 586;
				else if (Note == 3)
					if (Powered) return 587;
					else return 588;
				else if (Note == 4)
					if (Powered) return 589;
					else return 590;
				else if (Note == 5)
					if (Powered) return 591;
					else return 592;
				else if (Note == 6)
					if (Powered) return 593;
					else return 594;
				else if (Note == 7)
					if (Powered) return 595;
					else return 596;
				else if (Note == 8)
					if (Powered) return 597;
					else return 598;
				else if (Note == 9)
					if (Powered) return 599;
					else return 600;
				else if (Note == 10)
					if (Powered) return 601;
					else return 602;
				else if (Note == 11)
					if (Powered) return 603;
					else return 604;
				else if (Note == 12)
					if (Powered) return 605;
					else return 606;
				else if (Note == 13)
					if (Powered) return 607;
					else return 608;
				else if (Note == 14)
					if (Powered) return 609;
					else return 610;
				else if (Note == 15)
					if (Powered) return 611;
					else return 612;
				else if (Note == 16)
					if (Powered) return 613;
					else return 614;
				else if (Note == 17)
					if (Powered) return 615;
					else return 616;
				else if (Note == 18)
					if (Powered) return 617;
					else return 618;
				else if (Note == 19)
					if (Powered) return 619;
					else return 620;
				else if (Note == 20)
					if (Powered) return 621;
					else return 622;
				else if (Note == 21)
					if (Powered) return 623;
					else return 624;
				else if (Note == 22)
					if (Powered) return 625;
					else return 626;
				else if (Note == 23)
					if (Powered) return 627;
					else return 628;
				else
					if (Powered) return 629;
					else return 630;
			else if (Instrument == Instrument::Basedrum)
				if (Note == 0)
					if (Powered) return 631;
					else return 632;
				else if (Note == 1)
					if (Powered) return 633;
					else return 634;
				else if (Note == 2)
					if (Powered) return 635;
					else return 636;
				else if (Note == 3)
					if (Powered) return 637;
					else return 638;
				else if (Note == 4)
					if (Powered) return 639;
					else return 640;
				else if (Note == 5)
					if (Powered) return 641;
					else return 642;
				else if (Note == 6)
					if (Powered) return 643;
					else return 644;
				else if (Note == 7)
					if (Powered) return 645;
					else return 646;
				else if (Note == 8)
					if (Powered) return 647;
					else return 648;
				else if (Note == 9)
					if (Powered) return 649;
					else return 650;
				else if (Note == 10)
					if (Powered) return 651;
					else return 652;
				else if (Note == 11)
					if (Powered) return 653;
					else return 654;
				else if (Note == 12)
					if (Powered) return 655;
					else return 656;
				else if (Note == 13)
					if (Powered) return 657;
					else return 658;
				else if (Note == 14)
					if (Powered) return 659;
					else return 660;
				else if (Note == 15)
					if (Powered) return 661;
					else return 662;
				else if (Note == 16)
					if (Powered) return 663;
					else return 664;
				else if (Note == 17)
					if (Powered) return 665;
					else return 666;
				else if (Note == 18)
					if (Powered) return 667;
					else return 668;
				else if (Note == 19)
					if (Powered) return 669;
					else return 670;
				else if (Note == 20)
					if (Powered) return 671;
					else return 672;
				else if (Note == 21)
					if (Powered) return 673;
					else return 674;
				else if (Note == 22)
					if (Powered) return 675;
					else return 676;
				else if (Note == 23)
					if (Powered) return 677;
					else return 678;
				else
					if (Powered) return 679;
					else return 680;
			else if (Instrument == Instrument::Snare)
				if (Note == 0)
					if (Powered) return 681;
					else return 682;
				else if (Note == 1)
					if (Powered) return 683;
					else return 684;
				else if (Note == 2)
					if (Powered) return 685;
					else return 686;
				else if (Note == 3)
					if (Powered) return 687;
					else return 688;
				else if (Note == 4)
					if (Powered) return 689;
					else return 690;
				else if (Note == 5)
					if (Powered) return 691;
					else return 692;
				else if (Note == 6)
					if (Powered) return 693;
					else return 694;
				else if (Note == 7)
					if (Powered) return 695;
					else return 696;
				else if (Note == 8)
					if (Powered) return 697;
					else return 698;
				else if (Note == 9)
					if (Powered) return 699;
					else return 700;
				else if (Note == 10)
					if (Powered) return 701;
					else return 702;
				else if (Note == 11)
					if (Powered) return 703;
					else return 704;
				else if (Note == 12)
					if (Powered) return 705;
					else return 706;
				else if (Note == 13)
					if (Powered) return 707;
					else return 708;
				else if (Note == 14)
					if (Powered) return 709;
					else return 710;
				else if (Note == 15)
					if (Powered) return 711;
					else return 712;
				else if (Note == 16)
					if (Powered) return 713;
					else return 714;
				else if (Note == 17)
					if (Powered) return 715;
					else return 716;
				else if (Note == 18)
					if (Powered) return 717;
					else return 718;
				else if (Note == 19)
					if (Powered) return 719;
					else return 720;
				else if (Note == 20)
					if (Powered) return 721;
					else return 722;
				else if (Note == 21)
					if (Powered) return 723;
					else return 724;
				else if (Note == 22)
					if (Powered) return 725;
					else return 726;
				else if (Note == 23)
					if (Powered) return 727;
					else return 728;
				else
					if (Powered) return 729;
					else return 730;
			else if (Instrument == Instrument::Hat)
				if (Note == 0)
					if (Powered) return 731;
					else return 732;
				else if (Note == 1)
					if (Powered) return 733;
					else return 734;
				else if (Note == 2)
					if (Powered) return 735;
					else return 736;
				else if (Note == 3)
					if (Powered) return 737;
					else return 738;
				else if (Note == 4)
					if (Powered) return 739;
					else return 740;
				else if (Note == 5)
					if (Powered) return 741;
					else return 742;
				else if (Note == 6)
					if (Powered) return 743;
					else return 744;
				else if (Note == 7)
					if (Powered) return 745;
					else return 746;
				else if (Note == 8)
					if (Powered) return 747;
					else return 748;
				else if (Note == 9)
					if (Powered) return 749;
					else return 750;
				else if (Note == 10)
					if (Powered) return 751;
					else return 752;
				else if (Note == 11)
					if (Powered) return 753;
					else return 754;
				else if (Note == 12)
					if (Powered) return 755;
					else return 756;
				else if (Note == 13)
					if (Powered) return 757;
					else return 758;
				else if (Note == 14)
					if (Powered) return 759;
					else return 760;
				else if (Note == 15)
					if (Powered) return 761;
					else return 762;
				else if (Note == 16)
					if (Powered) return 763;
					else return 764;
				else if (Note == 17)
					if (Powered) return 765;
					else return 766;
				else if (Note == 18)
					if (Powered) return 767;
					else return 768;
				else if (Note == 19)
					if (Powered) return 769;
					else return 770;
				else if (Note == 20)
					if (Powered) return 771;
					else return 772;
				else if (Note == 21)
					if (Powered) return 773;
					else return 774;
				else if (Note == 22)
					if (Powered) return 775;
					else return 776;
				else if (Note == 23)
					if (Powered) return 777;
					else return 778;
				else
					if (Powered) return 779;
					else return 780;
			else if (Instrument == Instrument::Bass)
				if (Note == 0)
					if (Powered) return 781;
					else return 782;
				else if (Note == 1)
					if (Powered) return 783;
					else return 784;
				else if (Note == 2)
					if (Powered) return 785;
					else return 786;
				else if (Note == 3)
					if (Powered) return 787;
					else return 788;
				else if (Note == 4)
					if (Powered) return 789;
					else return 790;
				else if (Note == 5)
					if (Powered) return 791;
					else return 792;
				else if (Note == 6)
					if (Powered) return 793;
					else return 794;
				else if (Note == 7)
					if (Powered) return 795;
					else return 796;
				else if (Note == 8)
					if (Powered) return 797;
					else return 798;
				else if (Note == 9)
					if (Powered) return 799;
					else return 800;
				else if (Note == 10)
					if (Powered) return 801;
					else return 802;
				else if (Note == 11)
					if (Powered) return 803;
					else return 804;
				else if (Note == 12)
					if (Powered) return 805;
					else return 806;
				else if (Note == 13)
					if (Powered) return 807;
					else return 808;
				else if (Note == 14)
					if (Powered) return 809;
					else return 810;
				else if (Note == 15)
					if (Powered) return 811;
					else return 812;
				else if (Note == 16)
					if (Powered) return 813;
					else return 814;
				else if (Note == 17)
					if (Powered) return 815;
					else return 816;
				else if (Note == 18)
					if (Powered) return 817;
					else return 818;
				else if (Note == 19)
					if (Powered) return 819;
					else return 820;
				else if (Note == 20)
					if (Powered) return 821;
					else return 822;
				else if (Note == 21)
					if (Powered) return 823;
					else return 824;
				else if (Note == 22)
					if (Powered) return 825;
					else return 826;
				else if (Note == 23)
					if (Powered) return 827;
					else return 828;
				else
					if (Powered) return 829;
					else return 830;
			else if (Instrument == Instrument::Flute)
				if (Note == 0)
					if (Powered) return 831;
					else return 832;
				else if (Note == 1)
					if (Powered) return 833;
					else return 834;
				else if (Note == 2)
					if (Powered) return 835;
					else return 836;
				else if (Note == 3)
					if (Powered) return 837;
					else return 838;
				else if (Note == 4)
					if (Powered) return 839;
					else return 840;
				else if (Note == 5)
					if (Powered) return 841;
					else return 842;
				else if (Note == 6)
					if (Powered) return 843;
					else return 844;
				else if (Note == 7)
					if (Powered) return 845;
					else return 846;
				else if (Note == 8)
					if (Powered) return 847;
					else return 848;
				else if (Note == 9)
					if (Powered) return 849;
					else return 850;
				else if (Note == 10)
					if (Powered) return 851;
					else return 852;
				else if (Note == 11)
					if (Powered) return 853;
					else return 854;
				else if (Note == 12)
					if (Powered) return 855;
					else return 856;
				else if (Note == 13)
					if (Powered) return 857;
					else return 858;
				else if (Note == 14)
					if (Powered) return 859;
					else return 860;
				else if (Note == 15)
					if (Powered) return 861;
					else return 862;
				else if (Note == 16)
					if (Powered) return 863;
					else return 864;
				else if (Note == 17)
					if (Powered) return 865;
					else return 866;
				else if (Note == 18)
					if (Powered) return 867;
					else return 868;
				else if (Note == 19)
					if (Powered) return 869;
					else return 870;
				else if (Note == 20)
					if (Powered) return 871;
					else return 872;
				else if (Note == 21)
					if (Powered) return 873;
					else return 874;
				else if (Note == 22)
					if (Powered) return 875;
					else return 876;
				else if (Note == 23)
					if (Powered) return 877;
					else return 878;
				else
					if (Powered) return 879;
					else return 880;
			else if (Instrument == Instrument::Bell)
				if (Note == 0)
					if (Powered) return 881;
					else return 882;
				else if (Note == 1)
					if (Powered) return 883;
					else return 884;
				else if (Note == 2)
					if (Powered) return 885;
					else return 886;
				else if (Note == 3)
					if (Powered) return 887;
					else return 888;
				else if (Note == 4)
					if (Powered) return 889;
					else return 890;
				else if (Note == 5)
					if (Powered) return 891;
					else return 892;
				else if (Note == 6)
					if (Powered) return 893;
					else return 894;
				else if (Note == 7)
					if (Powered) return 895;
					else return 896;
				else if (Note == 8)
					if (Powered) return 897;
					else return 898;
				else if (Note == 9)
					if (Powered) return 899;
					else return 900;
				else if (Note == 10)
					if (Powered) return 901;
					else return 902;
				else if (Note == 11)
					if (Powered) return 903;
					else return 904;
				else if (Note == 12)
					if (Powered) return 905;
					else return 906;
				else if (Note == 13)
					if (Powered) return 907;
					else return 908;
				else if (Note == 14)
					if (Powered) return 909;
					else return 910;
				else if (Note == 15)
					if (Powered) return 911;
					else return 912;
				else if (Note == 16)
					if (Powered) return 913;
					else return 914;
				else if (Note == 17)
					if (Powered) return 915;
					else return 916;
				else if (Note == 18)
					if (Powered) return 917;
					else return 918;
				else if (Note == 19)
					if (Powered) return 919;
					else return 920;
				else if (Note == 20)
					if (Powered) return 921;
					else return 922;
				else if (Note == 21)
					if (Powered) return 923;
					else return 924;
				else if (Note == 22)
					if (Powered) return 925;
					else return 926;
				else if (Note == 23)
					if (Powered) return 927;
					else return 928;
				else
					if (Powered) return 929;
					else return 930;
			else if (Instrument == Instrument::Guitar)
				if (Note == 0)
					if (Powered) return 931;
					else return 932;
				else if (Note == 1)
					if (Powered) return 933;
					else return 934;
				else if (Note == 2)
					if (Powered) return 935;
					else return 936;
				else if (Note == 3)
					if (Powered) return 937;
					else return 938;
				else if (Note == 4)
					if (Powered) return 939;
					else return 940;
				else if (Note == 5)
					if (Powered) return 941;
					else return 942;
				else if (Note == 6)
					if (Powered) return 943;
					else return 944;
				else if (Note == 7)
					if (Powered) return 945;
					else return 946;
				else if (Note == 8)
					if (Powered) return 947;
					else return 948;
				else if (Note == 9)
					if (Powered) return 949;
					else return 950;
				else if (Note == 10)
					if (Powered) return 951;
					else return 952;
				else if (Note == 11)
					if (Powered) return 953;
					else return 954;
				else if (Note == 12)
					if (Powered) return 955;
					else return 956;
				else if (Note == 13)
					if (Powered) return 957;
					else return 958;
				else if (Note == 14)
					if (Powered) return 959;
					else return 960;
				else if (Note == 15)
					if (Powered) return 961;
					else return 962;
				else if (Note == 16)
					if (Powered) return 963;
					else return 964;
				else if (Note == 17)
					if (Powered) return 965;
					else return 966;
				else if (Note == 18)
					if (Powered) return 967;
					else return 968;
				else if (Note == 19)
					if (Powered) return 969;
					else return 970;
				else if (Note == 20)
					if (Powered) return 971;
					else return 972;
				else if (Note == 21)
					if (Powered) return 973;
					else return 974;
				else if (Note == 22)
					if (Powered) return 975;
					else return 976;
				else if (Note == 23)
					if (Powered) return 977;
					else return 978;
				else
					if (Powered) return 979;
					else return 980;
			else if (Instrument == Instrument::Chime)
				if (Note == 0)
					if (Powered) return 981;
					else return 982;
				else if (Note == 1)
					if (Powered) return 983;
					else return 984;
				else if (Note == 2)
					if (Powered) return 985;
					else return 986;
				else if (Note == 3)
					if (Powered) return 987;
					else return 988;
				else if (Note == 4)
					if (Powered) return 989;
					else return 990;
				else if (Note == 5)
					if (Powered) return 991;
					else return 992;
				else if (Note == 6)
					if (Powered) return 993;
					else return 994;
				else if (Note == 7)
					if (Powered) return 995;
					else return 996;
				else if (Note == 8)
					if (Powered) return 997;
					else return 998;
				else if (Note == 9)
					if (Powered) return 999;
					else return 1000;
				else if (Note == 10)
					if (Powered) return 1001;
					else return 1002;
				else if (Note == 11)
					if (Powered) return 1003;
					else return 1004;
				else if (Note == 12)
					if (Powered) return 1005;
					else return 1006;
				else if (Note == 13)
					if (Powered) return 1007;
					else return 1008;
				else if (Note == 14)
					if (Powered) return 1009;
					else return 1010;
				else if (Note == 15)
					if (Powered) return 1011;
					else return 1012;
				else if (Note == 16)
					if (Powered) return 1013;
					else return 1014;
				else if (Note == 17)
					if (Powered) return 1015;
					else return 1016;
				else if (Note == 18)
					if (Powered) return 1017;
					else return 1018;
				else if (Note == 19)
					if (Powered) return 1019;
					else return 1020;
				else if (Note == 20)
					if (Powered) return 1021;
					else return 1022;
				else if (Note == 21)
					if (Powered) return 1023;
					else return 1024;
				else if (Note == 22)
					if (Powered) return 1025;
					else return 1026;
				else if (Note == 23)
					if (Powered) return 1027;
					else return 1028;
				else
					if (Powered) return 1029;
					else return 1030;
			else if (Instrument == Instrument::Xylophone)
				if (Note == 0)
					if (Powered) return 1031;
					else return 1032;
				else if (Note == 1)
					if (Powered) return 1033;
					else return 1034;
				else if (Note == 2)
					if (Powered) return 1035;
					else return 1036;
				else if (Note == 3)
					if (Powered) return 1037;
					else return 1038;
				else if (Note == 4)
					if (Powered) return 1039;
					else return 1040;
				else if (Note == 5)
					if (Powered) return 1041;
					else return 1042;
				else if (Note == 6)
					if (Powered) return 1043;
					else return 1044;
				else if (Note == 7)
					if (Powered) return 1045;
					else return 1046;
				else if (Note == 8)
					if (Powered) return 1047;
					else return 1048;
				else if (Note == 9)
					if (Powered) return 1049;
					else return 1050;
				else if (Note == 10)
					if (Powered) return 1051;
					else return 1052;
				else if (Note == 11)
					if (Powered) return 1053;
					else return 1054;
				else if (Note == 12)
					if (Powered) return 1055;
					else return 1056;
				else if (Note == 13)
					if (Powered) return 1057;
					else return 1058;
				else if (Note == 14)
					if (Powered) return 1059;
					else return 1060;
				else if (Note == 15)
					if (Powered) return 1061;
					else return 1062;
				else if (Note == 16)
					if (Powered) return 1063;
					else return 1064;
				else if (Note == 17)
					if (Powered) return 1065;
					else return 1066;
				else if (Note == 18)
					if (Powered) return 1067;
					else return 1068;
				else if (Note == 19)
					if (Powered) return 1069;
					else return 1070;
				else if (Note == 20)
					if (Powered) return 1071;
					else return 1072;
				else if (Note == 21)
					if (Powered) return 1073;
					else return 1074;
				else if (Note == 22)
					if (Powered) return 1075;
					else return 1076;
				else if (Note == 23)
					if (Powered) return 1077;
					else return 1078;
				else
					if (Powered) return 1079;
					else return 1080;
			else if (Instrument == Instrument::IronXylophone)
				if (Note == 0)
					if (Powered) return 1081;
					else return 1082;
				else if (Note == 1)
					if (Powered) return 1083;
					else return 1084;
				else if (Note == 2)
					if (Powered) return 1085;
					else return 1086;
				else if (Note == 3)
					if (Powered) return 1087;
					else return 1088;
				else if (Note == 4)
					if (Powered) return 1089;
					else return 1090;
				else if (Note == 5)
					if (Powered) return 1091;
					else return 1092;
				else if (Note == 6)
					if (Powered) return 1093;
					else return 1094;
				else if (Note == 7)
					if (Powered) return 1095;
					else return 1096;
				else if (Note == 8)
					if (Powered) return 1097;
					else return 1098;
				else if (Note == 9)
					if (Powered) return 1099;
					else return 1100;
				else if (Note == 10)
					if (Powered) return 1101;
					else return 1102;
				else if (Note == 11)
					if (Powered) return 1103;
					else return 1104;
				else if (Note == 12)
					if (Powered) return 1105;
					else return 1106;
				else if (Note == 13)
					if (Powered) return 1107;
					else return 1108;
				else if (Note == 14)
					if (Powered) return 1109;
					else return 1110;
				else if (Note == 15)
					if (Powered) return 1111;
					else return 1112;
				else if (Note == 16)
					if (Powered) return 1113;
					else return 1114;
				else if (Note == 17)
					if (Powered) return 1115;
					else return 1116;
				else if (Note == 18)
					if (Powered) return 1117;
					else return 1118;
				else if (Note == 19)
					if (Powered) return 1119;
					else return 1120;
				else if (Note == 20)
					if (Powered) return 1121;
					else return 1122;
				else if (Note == 21)
					if (Powered) return 1123;
					else return 1124;
				else if (Note == 22)
					if (Powered) return 1125;
					else return 1126;
				else if (Note == 23)
					if (Powered) return 1127;
					else return 1128;
				else
					if (Powered) return 1129;
					else return 1130;
			else if (Instrument == Instrument::CowBell)
				if (Note == 0)
					if (Powered) return 1131;
					else return 1132;
				else if (Note == 1)
					if (Powered) return 1133;
					else return 1134;
				else if (Note == 2)
					if (Powered) return 1135;
					else return 1136;
				else if (Note == 3)
					if (Powered) return 1137;
					else return 1138;
				else if (Note == 4)
					if (Powered) return 1139;
					else return 1140;
				else if (Note == 5)
					if (Powered) return 1141;
					else return 1142;
				else if (Note == 6)
					if (Powered) return 1143;
					else return 1144;
				else if (Note == 7)
					if (Powered) return 1145;
					else return 1146;
				else if (Note == 8)
					if (Powered) return 1147;
					else return 1148;
				else if (Note == 9)
					if (Powered) return 1149;
					else return 1150;
				else if (Note == 10)
					if (Powered) return 1151;
					else return 1152;
				else if (Note == 11)
					if (Powered) return 1153;
					else return 1154;
				else if (Note == 12)
					if (Powered) return 1155;
					else return 1156;
				else if (Note == 13)
					if (Powered) return 1157;
					else return 1158;
				else if (Note == 14)
					if (Powered) return 1159;
					else return 1160;
				else if (Note == 15)
					if (Powered) return 1161;
					else return 1162;
				else if (Note == 16)
					if (Powered) return 1163;
					else return 1164;
				else if (Note == 17)
					if (Powered) return 1165;
					else return 1166;
				else if (Note == 18)
					if (Powered) return 1167;
					else return 1168;
				else if (Note == 19)
					if (Powered) return 1169;
					else return 1170;
				else if (Note == 20)
					if (Powered) return 1171;
					else return 1172;
				else if (Note == 21)
					if (Powered) return 1173;
					else return 1174;
				else if (Note == 22)
					if (Powered) return 1175;
					else return 1176;
				else if (Note == 23)
					if (Powered) return 1177;
					else return 1178;
				else
					if (Powered) return 1179;
					else return 1180;
			else if (Instrument == Instrument::Didgeridoo)
				if (Note == 0)
					if (Powered) return 1181;
					else return 1182;
				else if (Note == 1)
					if (Powered) return 1183;
					else return 1184;
				else if (Note == 2)
					if (Powered) return 1185;
					else return 1186;
				else if (Note == 3)
					if (Powered) return 1187;
					else return 1188;
				else if (Note == 4)
					if (Powered) return 1189;
					else return 1190;
				else if (Note == 5)
					if (Powered) return 1191;
					else return 1192;
				else if (Note == 6)
					if (Powered) return 1193;
					else return 1194;
				else if (Note == 7)
					if (Powered) return 1195;
					else return 1196;
				else if (Note == 8)
					if (Powered) return 1197;
					else return 1198;
				else if (Note == 9)
					if (Powered) return 1199;
					else return 1200;
				else if (Note == 10)
					if (Powered) return 1201;
					else return 1202;
				else if (Note == 11)
					if (Powered) return 1203;
					else return 1204;
				else if (Note == 12)
					if (Powered) return 1205;
					else return 1206;
				else if (Note == 13)
					if (Powered) return 1207;
					else return 1208;
				else if (Note == 14)
					if (Powered) return 1209;
					else return 1210;
				else if (Note == 15)
					if (Powered) return 1211;
					else return 1212;
				else if (Note == 16)
					if (Powered) return 1213;
					else return 1214;
				else if (Note == 17)
					if (Powered) return 1215;
					else return 1216;
				else if (Note == 18)
					if (Powered) return 1217;
					else return 1218;
				else if (Note == 19)
					if (Powered) return 1219;
					else return 1220;
				else if (Note == 20)
					if (Powered) return 1221;
					else return 1222;
				else if (Note == 21)
					if (Powered) return 1223;
					else return 1224;
				else if (Note == 22)
					if (Powered) return 1225;
					else return 1226;
				else if (Note == 23)
					if (Powered) return 1227;
					else return 1228;
				else
					if (Powered) return 1229;
					else return 1230;
			else if (Instrument == Instrument::Bit)
				if (Note == 0)
					if (Powered) return 1231;
					else return 1232;
				else if (Note == 1)
					if (Powered) return 1233;
					else return 1234;
				else if (Note == 2)
					if (Powered) return 1235;
					else return 1236;
				else if (Note == 3)
					if (Powered) return 1237;
					else return 1238;
				else if (Note == 4)
					if (Powered) return 1239;
					else return 1240;
				else if (Note == 5)
					if (Powered) return 1241;
					else return 1242;
				else if (Note == 6)
					if (Powered) return 1243;
					else return 1244;
				else if (Note == 7)
					if (Powered) return 1245;
					else return 1246;
				else if (Note == 8)
					if (Powered) return 1247;
					else return 1248;
				else if (Note == 9)
					if (Powered) return 1249;
					else return 1250;
				else if (Note == 10)
					if (Powered) return 1251;
					else return 1252;
				else if (Note == 11)
					if (Powered) return 1253;
					else return 1254;
				else if (Note == 12)
					if (Powered) return 1255;
					else return 1256;
				else if (Note == 13)
					if (Powered) return 1257;
					else return 1258;
				else if (Note == 14)
					if (Powered) return 1259;
					else return 1260;
				else if (Note == 15)
					if (Powered) return 1261;
					else return 1262;
				else if (Note == 16)
					if (Powered) return 1263;
					else return 1264;
				else if (Note == 17)
					if (Powered) return 1265;
					else return 1266;
				else if (Note == 18)
					if (Powered) return 1267;
					else return 1268;
				else if (Note == 19)
					if (Powered) return 1269;
					else return 1270;
				else if (Note == 20)
					if (Powered) return 1271;
					else return 1272;
				else if (Note == 21)
					if (Powered) return 1273;
					else return 1274;
				else if (Note == 22)
					if (Powered) return 1275;
					else return 1276;
				else if (Note == 23)
					if (Powered) return 1277;
					else return 1278;
				else
					if (Powered) return 1279;
					else return 1280;
			else if (Instrument == Instrument::Banjo)
				if (Note == 0)
					if (Powered) return 1281;
					else return 1282;
				else if (Note == 1)
					if (Powered) return 1283;
					else return 1284;
				else if (Note == 2)
					if (Powered) return 1285;
					else return 1286;
				else if (Note == 3)
					if (Powered) return 1287;
					else return 1288;
				else if (Note == 4)
					if (Powered) return 1289;
					else return 1290;
				else if (Note == 5)
					if (Powered) return 1291;
					else return 1292;
				else if (Note == 6)
					if (Powered) return 1293;
					else return 1294;
				else if (Note == 7)
					if (Powered) return 1295;
					else return 1296;
				else if (Note == 8)
					if (Powered) return 1297;
					else return 1298;
				else if (Note == 9)
					if (Powered) return 1299;
					else return 1300;
				else if (Note == 10)
					if (Powered) return 1301;
					else return 1302;
				else if (Note == 11)
					if (Powered) return 1303;
					else return 1304;
				else if (Note == 12)
					if (Powered) return 1305;
					else return 1306;
				else if (Note == 13)
					if (Powered) return 1307;
					else return 1308;
				else if (Note == 14)
					if (Powered) return 1309;
					else return 1310;
				else if (Note == 15)
					if (Powered) return 1311;
					else return 1312;
				else if (Note == 16)
					if (Powered) return 1313;
					else return 1314;
				else if (Note == 17)
					if (Powered) return 1315;
					else return 1316;
				else if (Note == 18)
					if (Powered) return 1317;
					else return 1318;
				else if (Note == 19)
					if (Powered) return 1319;
					else return 1320;
				else if (Note == 20)
					if (Powered) return 1321;
					else return 1322;
				else if (Note == 21)
					if (Powered) return 1323;
					else return 1324;
				else if (Note == 22)
					if (Powered) return 1325;
					else return 1326;
				else if (Note == 23)
					if (Powered) return 1327;
					else return 1328;
				else
					if (Powered) return 1329;
					else return 1330;
			else if (Instrument == Instrument::Pling)
				if (Note == 0)
					if (Powered) return 1331;
					else return 1332;
				else if (Note == 1)
					if (Powered) return 1333;
					else return 1334;
				else if (Note == 2)
					if (Powered) return 1335;
					else return 1336;
				else if (Note == 3)
					if (Powered) return 1337;
					else return 1338;
				else if (Note == 4)
					if (Powered) return 1339;
					else return 1340;
				else if (Note == 5)
					if (Powered) return 1341;
					else return 1342;
				else if (Note == 6)
					if (Powered) return 1343;
					else return 1344;
				else if (Note == 7)
					if (Powered) return 1345;
					else return 1346;
				else if (Note == 8)
					if (Powered) return 1347;
					else return 1348;
				else if (Note == 9)
					if (Powered) return 1349;
					else return 1350;
				else if (Note == 10)
					if (Powered) return 1351;
					else return 1352;
				else if (Note == 11)
					if (Powered) return 1353;
					else return 1354;
				else if (Note == 12)
					if (Powered) return 1355;
					else return 1356;
				else if (Note == 13)
					if (Powered) return 1357;
					else return 1358;
				else if (Note == 14)
					if (Powered) return 1359;
					else return 1360;
				else if (Note == 15)
					if (Powered) return 1361;
					else return 1362;
				else if (Note == 16)
					if (Powered) return 1363;
					else return 1364;
				else if (Note == 17)
					if (Powered) return 1365;
					else return 1366;
				else if (Note == 18)
					if (Powered) return 1367;
					else return 1368;
				else if (Note == 19)
					if (Powered) return 1369;
					else return 1370;
				else if (Note == 20)
					if (Powered) return 1371;
					else return 1372;
				else if (Note == 21)
					if (Powered) return 1373;
					else return 1374;
				else if (Note == 22)
					if (Powered) return 1375;
					else return 1376;
				else if (Note == 23)
					if (Powered) return 1377;
					else return 1378;
				else
					if (Powered) return 1379;
					else return 1380;
			else if (Instrument == Instrument::Zombie)
				if (Note == 0)
					if (Powered) return 1381;
					else return 1382;
				else if (Note == 1)
					if (Powered) return 1383;
					else return 1384;
				else if (Note == 2)
					if (Powered) return 1385;
					else return 1386;
				else if (Note == 3)
					if (Powered) return 1387;
					else return 1388;
				else if (Note == 4)
					if (Powered) return 1389;
					else return 1390;
				else if (Note == 5)
					if (Powered) return 1391;
					else return 1392;
				else if (Note == 6)
					if (Powered) return 1393;
					else return 1394;
				else if (Note == 7)
					if (Powered) return 1395;
					else return 1396;
				else if (Note == 8)
					if (Powered) return 1397;
					else return 1398;
				else if (Note == 9)
					if (Powered) return 1399;
					else return 1400;
				else if (Note == 10)
					if (Powered) return 1401;
					else return 1402;
				else if (Note == 11)
					if (Powered) return 1403;
					else return 1404;
				else if (Note == 12)
					if (Powered) return 1405;
					else return 1406;
				else if (Note == 13)
					if (Powered) return 1407;
					else return 1408;
				else if (Note == 14)
					if (Powered) return 1409;
					else return 1410;
				else if (Note == 15)
					if (Powered) return 1411;
					else return 1412;
				else if (Note == 16)
					if (Powered) return 1413;
					else return 1414;
				else if (Note == 17)
					if (Powered) return 1415;
					else return 1416;
				else if (Note == 18)
					if (Powered) return 1417;
					else return 1418;
				else if (Note == 19)
					if (Powered) return 1419;
					else return 1420;
				else if (Note == 20)
					if (Powered) return 1421;
					else return 1422;
				else if (Note == 21)
					if (Powered) return 1423;
					else return 1424;
				else if (Note == 22)
					if (Powered) return 1425;
					else return 1426;
				else if (Note == 23)
					if (Powered) return 1427;
					else return 1428;
				else
					if (Powered) return 1429;
					else return 1430;
			else if (Instrument == Instrument::Skeleton)
				if (Note == 0)
					if (Powered) return 1431;
					else return 1432;
				else if (Note == 1)
					if (Powered) return 1433;
					else return 1434;
				else if (Note == 2)
					if (Powered) return 1435;
					else return 1436;
				else if (Note == 3)
					if (Powered) return 1437;
					else return 1438;
				else if (Note == 4)
					if (Powered) return 1439;
					else return 1440;
				else if (Note == 5)
					if (Powered) return 1441;
					else return 1442;
				else if (Note == 6)
					if (Powered) return 1443;
					else return 1444;
				else if (Note == 7)
					if (Powered) return 1445;
					else return 1446;
				else if (Note == 8)
					if (Powered) return 1447;
					else return 1448;
				else if (Note == 9)
					if (Powered) return 1449;
					else return 1450;
				else if (Note == 10)
					if (Powered) return 1451;
					else return 1452;
				else if (Note == 11)
					if (Powered) return 1453;
					else return 1454;
				else if (Note == 12)
					if (Powered) return 1455;
					else return 1456;
				else if (Note == 13)
					if (Powered) return 1457;
					else return 1458;
				else if (Note == 14)
					if (Powered) return 1459;
					else return 1460;
				else if (Note == 15)
					if (Powered) return 1461;
					else return 1462;
				else if (Note == 16)
					if (Powered) return 1463;
					else return 1464;
				else if (Note == 17)
					if (Powered) return 1465;
					else return 1466;
				else if (Note == 18)
					if (Powered) return 1467;
					else return 1468;
				else if (Note == 19)
					if (Powered) return 1469;
					else return 1470;
				else if (Note == 20)
					if (Powered) return 1471;
					else return 1472;
				else if (Note == 21)
					if (Powered) return 1473;
					else return 1474;
				else if (Note == 22)
					if (Powered) return 1475;
					else return 1476;
				else if (Note == 23)
					if (Powered) return 1477;
					else return 1478;
				else
					if (Powered) return 1479;
					else return 1480;
			else if (Instrument == Instrument::Creeper)
				if (Note == 0)
					if (Powered) return 1481;
					else return 1482;
				else if (Note == 1)
					if (Powered) return 1483;
					else return 1484;
				else if (Note == 2)
					if (Powered) return 1485;
					else return 1486;
				else if (Note == 3)
					if (Powered) return 1487;
					else return 1488;
				else if (Note == 4)
					if (Powered) return 1489;
					else return 1490;
				else if (Note == 5)
					if (Powered) return 1491;
					else return 1492;
				else if (Note == 6)
					if (Powered) return 1493;
					else return 1494;
				else if (Note == 7)
					if (Powered) return 1495;
					else return 1496;
				else if (Note == 8)
					if (Powered) return 1497;
					else return 1498;
				else if (Note == 9)
					if (Powered) return 1499;
					else return 1500;
				else if (Note == 10)
					if (Powered) return 1501;
					else return 1502;
				else if (Note == 11)
					if (Powered) return 1503;
					else return 1504;
				else if (Note == 12)
					if (Powered) return 1505;
					else return 1506;
				else if (Note == 13)
					if (Powered) return 1507;
					else return 1508;
				else if (Note == 14)
					if (Powered) return 1509;
					else return 1510;
				else if (Note == 15)
					if (Powered) return 1511;
					else return 1512;
				else if (Note == 16)
					if (Powered) return 1513;
					else return 1514;
				else if (Note == 17)
					if (Powered) return 1515;
					else return 1516;
				else if (Note == 18)
					if (Powered) return 1517;
					else return 1518;
				else if (Note == 19)
					if (Powered) return 1519;
					else return 1520;
				else if (Note == 20)
					if (Powered) return 1521;
					else return 1522;
				else if (Note == 21)
					if (Powered) return 1523;
					else return 1524;
				else if (Note == 22)
					if (Powered) return 1525;
					else return 1526;
				else if (Note == 23)
					if (Powered) return 1527;
					else return 1528;
				else
					if (Powered) return 1529;
					else return 1530;
			else if (Instrument == Instrument::Dragon)
				if (Note == 0)
					if (Powered) return 1531;
					else return 1532;
				else if (Note == 1)
					if (Powered) return 1533;
					else return 1534;
				else if (Note == 2)
					if (Powered) return 1535;
					else return 1536;
				else if (Note == 3)
					if (Powered) return 1537;
					else return 1538;
				else if (Note == 4)
					if (Powered) return 1539;
					else return 1540;
				else if (Note == 5)
					if (Powered) return 1541;
					else return 1542;
				else if (Note == 6)
					if (Powered) return 1543;
					else return 1544;
				else if (Note == 7)
					if (Powered) return 1545;
					else return 1546;
				else if (Note == 8)
					if (Powered) return 1547;
					else return 1548;
				else if (Note == 9)
					if (Powered) return 1549;
					else return 1550;
				else if (Note == 10)
					if (Powered) return 1551;
					else return 1552;
				else if (Note == 11)
					if (Powered) return 1553;
					else return 1554;
				else if (Note == 12)
					if (Powered) return 1555;
					else return 1556;
				else if (Note == 13)
					if (Powered) return 1557;
					else return 1558;
				else if (Note == 14)
					if (Powered) return 1559;
					else return 1560;
				else if (Note == 15)
					if (Powered) return 1561;
					else return 1562;
				else if (Note == 16)
					if (Powered) return 1563;
					else return 1564;
				else if (Note == 17)
					if (Powered) return 1565;
					else return 1566;
				else if (Note == 18)
					if (Powered) return 1567;
					else return 1568;
				else if (Note == 19)
					if (Powered) return 1569;
					else return 1570;
				else if (Note == 20)
					if (Powered) return 1571;
					else return 1572;
				else if (Note == 21)
					if (Powered) return 1573;
					else return 1574;
				else if (Note == 22)
					if (Powered) return 1575;
					else return 1576;
				else if (Note == 23)
					if (Powered) return 1577;
					else return 1578;
				else
					if (Powered) return 1579;
					else return 1580;
			else if (Instrument == Instrument::WitherSkeleton)
				if (Note == 0)
					if (Powered) return 1581;
					else return 1582;
				else if (Note == 1)
					if (Powered) return 1583;
					else return 1584;
				else if (Note == 2)
					if (Powered) return 1585;
					else return 1586;
				else if (Note == 3)
					if (Powered) return 1587;
					else return 1588;
				else if (Note == 4)
					if (Powered) return 1589;
					else return 1590;
				else if (Note == 5)
					if (Powered) return 1591;
					else return 1592;
				else if (Note == 6)
					if (Powered) return 1593;
					else return 1594;
				else if (Note == 7)
					if (Powered) return 1595;
					else return 1596;
				else if (Note == 8)
					if (Powered) return 1597;
					else return 1598;
				else if (Note == 9)
					if (Powered) return 1599;
					else return 1600;
				else if (Note == 10)
					if (Powered) return 1601;
					else return 1602;
				else if (Note == 11)
					if (Powered) return 1603;
					else return 1604;
				else if (Note == 12)
					if (Powered) return 1605;
					else return 1606;
				else if (Note == 13)
					if (Powered) return 1607;
					else return 1608;
				else if (Note == 14)
					if (Powered) return 1609;
					else return 1610;
				else if (Note == 15)
					if (Powered) return 1611;
					else return 1612;
				else if (Note == 16)
					if (Powered) return 1613;
					else return 1614;
				else if (Note == 17)
					if (Powered) return 1615;
					else return 1616;
				else if (Note == 18)
					if (Powered) return 1617;
					else return 1618;
				else if (Note == 19)
					if (Powered) return 1619;
					else return 1620;
				else if (Note == 20)
					if (Powered) return 1621;
					else return 1622;
				else if (Note == 21)
					if (Powered) return 1623;
					else return 1624;
				else if (Note == 22)
					if (Powered) return 1625;
					else return 1626;
				else if (Note == 23)
					if (Powered) return 1627;
					else return 1628;
				else
					if (Powered) return 1629;
					else return 1630;
			else if (Instrument == Instrument::Piglin)
				if (Note == 0)
					if (Powered) return 1631;
					else return 1632;
				else if (Note == 1)
					if (Powered) return 1633;
					else return 1634;
				else if (Note == 2)
					if (Powered) return 1635;
					else return 1636;
				else if (Note == 3)
					if (Powered) return 1637;
					else return 1638;
				else if (Note == 4)
					if (Powered) return 1639;
					else return 1640;
				else if (Note == 5)
					if (Powered) return 1641;
					else return 1642;
				else if (Note == 6)
					if (Powered) return 1643;
					else return 1644;
				else if (Note == 7)
					if (Powered) return 1645;
					else return 1646;
				else if (Note == 8)
					if (Powered) return 1647;
					else return 1648;
				else if (Note == 9)
					if (Powered) return 1649;
					else return 1650;
				else if (Note == 10)
					if (Powered) return 1651;
					else return 1652;
				else if (Note == 11)
					if (Powered) return 1653;
					else return 1654;
				else if (Note == 12)
					if (Powered) return 1655;
					else return 1656;
				else if (Note == 13)
					if (Powered) return 1657;
					else return 1658;
				else if (Note == 14)
					if (Powered) return 1659;
					else return 1660;
				else if (Note == 15)
					if (Powered) return 1661;
					else return 1662;
				else if (Note == 16)
					if (Powered) return 1663;
					else return 1664;
				else if (Note == 17)
					if (Powered) return 1665;
					else return 1666;
				else if (Note == 18)
					if (Powered) return 1667;
					else return 1668;
				else if (Note == 19)
					if (Powered) return 1669;
					else return 1670;
				else if (Note == 20)
					if (Powered) return 1671;
					else return 1672;
				else if (Note == 21)
					if (Powered) return 1673;
					else return 1674;
				else if (Note == 22)
					if (Powered) return 1675;
					else return 1676;
				else if (Note == 23)
					if (Powered) return 1677;
					else return 1678;
				else
					if (Powered) return 1679;
					else return 1680;
			else
				if (Note == 0)
					if (Powered) return 1681;
					else return 1682;
				else if (Note == 1)
					if (Powered) return 1683;
					else return 1684;
				else if (Note == 2)
					if (Powered) return 1685;
					else return 1686;
				else if (Note == 3)
					if (Powered) return 1687;
					else return 1688;
				else if (Note == 4)
					if (Powered) return 1689;
					else return 1690;
				else if (Note == 5)
					if (Powered) return 1691;
					else return 1692;
				else if (Note == 6)
					if (Powered) return 1693;
					else return 1694;
				else if (Note == 7)
					if (Powered) return 1695;
					else return 1696;
				else if (Note == 8)
					if (Powered) return 1697;
					else return 1698;
				else if (Note == 9)
					if (Powered) return 1699;
					else return 1700;
				else if (Note == 10)
					if (Powered) return 1701;
					else return 1702;
				else if (Note == 11)
					if (Powered) return 1703;
					else return 1704;
				else if (Note == 12)
					if (Powered) return 1705;
					else return 1706;
				else if (Note == 13)
					if (Powered) return 1707;
					else return 1708;
				else if (Note == 14)
					if (Powered) return 1709;
					else return 1710;
				else if (Note == 15)
					if (Powered) return 1711;
					else return 1712;
				else if (Note == 16)
					if (Powered) return 1713;
					else return 1714;
				else if (Note == 17)
					if (Powered) return 1715;
					else return 1716;
				else if (Note == 18)
					if (Powered) return 1717;
					else return 1718;
				else if (Note == 19)
					if (Powered) return 1719;
					else return 1720;
				else if (Note == 20)
					if (Powered) return 1721;
					else return 1722;
				else if (Note == 21)
					if (Powered) return 1723;
					else return 1724;
				else if (Note == 22)
					if (Powered) return 1725;
					else return 1726;
				else if (Note == 23)
					if (Powered) return 1727;
					else return 1728;
				else
					if (Powered) return 1729;
					else return 1730;
		}
		BlockState NoteBlock();
		enum Instrument Instrument(BlockState Block);
		unsigned char Note(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace OakButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState OakButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9396;
					else return 9397;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9398;
					else return 9399;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9400;
					else return 9401;
				else
					if (Powered) return 9402;
					else return 9403;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9404;
					else return 9405;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9406;
					else return 9407;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9408;
					else return 9409;
				else
					if (Powered) return 9410;
					else return 9411;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9412;
					else return 9413;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9414;
					else return 9415;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9416;
					else return 9417;
				else
					if (Powered) return 9418;
					else return 9419;
		}
		BlockState OakButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace OakDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState OakDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 4686;
							else return 4687;
						else
							if (Powered) return 4688;
							else return 4689;
					else
						if (Open)
							if (Powered) return 4690;
							else return 4691;
						else
							if (Powered) return 4692;
							else return 4693;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 4694;
							else return 4695;
						else
							if (Powered) return 4696;
							else return 4697;
					else
						if (Open)
							if (Powered) return 4698;
							else return 4699;
						else
							if (Powered) return 4700;
							else return 4701;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 4702;
							else return 4703;
						else
							if (Powered) return 4704;
							else return 4705;
					else
						if (Open)
							if (Powered) return 4706;
							else return 4707;
						else
							if (Powered) return 4708;
							else return 4709;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 4710;
							else return 4711;
						else
							if (Powered) return 4712;
							else return 4713;
					else
						if (Open)
							if (Powered) return 4714;
							else return 4715;
						else
							if (Powered) return 4716;
							else return 4717;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 4718;
							else return 4719;
						else
							if (Powered) return 4720;
							else return 4721;
					else
						if (Open)
							if (Powered) return 4722;
							else return 4723;
						else
							if (Powered) return 4724;
							else return 4725;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 4726;
							else return 4727;
						else
							if (Powered) return 4728;
							else return 4729;
					else
						if (Open)
							if (Powered) return 4730;
							else return 4731;
						else
							if (Powered) return 4732;
							else return 4733;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 4734;
							else return 4735;
						else
							if (Powered) return 4736;
							else return 4737;
					else
						if (Open)
							if (Powered) return 4738;
							else return 4739;
						else
							if (Powered) return 4740;
							else return 4741;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 4742;
							else return 4743;
						else
							if (Powered) return 4744;
							else return 4745;
					else
						if (Open)
							if (Powered) return 4746;
							else return 4747;
						else
							if (Powered) return 4748;
							else return 4749;
		}
		BlockState OakDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace OakFence
	{
		constexpr BlockState OakFence(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 5996;
							else return 5997;
						else
							if (West) return 5998;
							else return 5999;
					else
						if (Waterlogged)
							if (West) return 6000;
							else return 6001;
						else
							if (West) return 6002;
							else return 6003;
				else
					if (South)
						if (Waterlogged)
							if (West) return 6004;
							else return 6005;
						else
							if (West) return 6006;
							else return 6007;
					else
						if (Waterlogged)
							if (West) return 6008;
							else return 6009;
						else
							if (West) return 6010;
							else return 6011;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 6012;
							else return 6013;
						else
							if (West) return 6014;
							else return 6015;
					else
						if (Waterlogged)
							if (West) return 6016;
							else return 6017;
						else
							if (West) return 6018;
							else return 6019;
				else
					if (South)
						if (Waterlogged)
							if (West) return 6020;
							else return 6021;
						else
							if (West) return 6022;
							else return 6023;
					else
						if (Waterlogged)
							if (West) return 6024;
							else return 6025;
						else
							if (West) return 6026;
							else return 6027;
		}
		BlockState OakFence();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace OakFenceGate
	{
		constexpr BlockState OakFenceGate(const eBlockFace Facing, const bool InWall, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (InWall)
					if (Open)
						if (Powered) return 7368;
						else return 7369;
					else
						if (Powered) return 7370;
						else return 7371;
				else
					if (Open)
						if (Powered) return 7372;
						else return 7373;
					else
						if (Powered) return 7374;
						else return 7375;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (InWall)
					if (Open)
						if (Powered) return 7376;
						else return 7377;
					else
						if (Powered) return 7378;
						else return 7379;
				else
					if (Open)
						if (Powered) return 7380;
						else return 7381;
					else
						if (Powered) return 7382;
						else return 7383;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (InWall)
					if (Open)
						if (Powered) return 7384;
						else return 7385;
					else
						if (Powered) return 7386;
						else return 7387;
				else
					if (Open)
						if (Powered) return 7388;
						else return 7389;
					else
						if (Powered) return 7390;
						else return 7391;
			else
				if (InWall)
					if (Open)
						if (Powered) return 7392;
						else return 7393;
					else
						if (Powered) return 7394;
						else return 7395;
				else
					if (Open)
						if (Powered) return 7396;
						else return 7397;
					else
						if (Powered) return 7398;
						else return 7399;
		}
		BlockState OakFenceGate();
		eBlockFace Facing(BlockState Block);
		bool InWall(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace OakHangingSign
	{
		constexpr BlockState OakHangingSign(const bool Attached, const unsigned char Rotation, const bool Waterlogged)
		{
			if (Attached)
				if (Rotation == 0)
					if (Waterlogged) return 4938;
					else return 4939;
				else if (Rotation == 1)
					if (Waterlogged) return 4940;
					else return 4941;
				else if (Rotation == 2)
					if (Waterlogged) return 4942;
					else return 4943;
				else if (Rotation == 3)
					if (Waterlogged) return 4944;
					else return 4945;
				else if (Rotation == 4)
					if (Waterlogged) return 4946;
					else return 4947;
				else if (Rotation == 5)
					if (Waterlogged) return 4948;
					else return 4949;
				else if (Rotation == 6)
					if (Waterlogged) return 4950;
					else return 4951;
				else if (Rotation == 7)
					if (Waterlogged) return 4952;
					else return 4953;
				else if (Rotation == 8)
					if (Waterlogged) return 4954;
					else return 4955;
				else if (Rotation == 9)
					if (Waterlogged) return 4956;
					else return 4957;
				else if (Rotation == 10)
					if (Waterlogged) return 4958;
					else return 4959;
				else if (Rotation == 11)
					if (Waterlogged) return 4960;
					else return 4961;
				else if (Rotation == 12)
					if (Waterlogged) return 4962;
					else return 4963;
				else if (Rotation == 13)
					if (Waterlogged) return 4964;
					else return 4965;
				else if (Rotation == 14)
					if (Waterlogged) return 4966;
					else return 4967;
				else
					if (Waterlogged) return 4968;
					else return 4969;
			else
				if (Rotation == 0)
					if (Waterlogged) return 4970;
					else return 4971;
				else if (Rotation == 1)
					if (Waterlogged) return 4972;
					else return 4973;
				else if (Rotation == 2)
					if (Waterlogged) return 4974;
					else return 4975;
				else if (Rotation == 3)
					if (Waterlogged) return 4976;
					else return 4977;
				else if (Rotation == 4)
					if (Waterlogged) return 4978;
					else return 4979;
				else if (Rotation == 5)
					if (Waterlogged) return 4980;
					else return 4981;
				else if (Rotation == 6)
					if (Waterlogged) return 4982;
					else return 4983;
				else if (Rotation == 7)
					if (Waterlogged) return 4984;
					else return 4985;
				else if (Rotation == 8)
					if (Waterlogged) return 4986;
					else return 4987;
				else if (Rotation == 9)
					if (Waterlogged) return 4988;
					else return 4989;
				else if (Rotation == 10)
					if (Waterlogged) return 4990;
					else return 4991;
				else if (Rotation == 11)
					if (Waterlogged) return 4992;
					else return 4993;
				else if (Rotation == 12)
					if (Waterlogged) return 4994;
					else return 4995;
				else if (Rotation == 13)
					if (Waterlogged) return 4996;
					else return 4997;
				else if (Rotation == 14)
					if (Waterlogged) return 4998;
					else return 4999;
				else
					if (Waterlogged) return 5000;
					else return 5001;
		}
		BlockState OakHangingSign();
		bool Attached(BlockState Block);
		unsigned char Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace OakLeaves
	{
		constexpr BlockState OakLeaves(const unsigned char Distance, const bool Persistent, const bool Waterlogged)
		{
			if (Distance == 1)
				if (Persistent)
					if (Waterlogged) return 252;
					else return 253;
				else
					if (Waterlogged) return 254;
					else return 255;
			else if (Distance == 2)
				if (Persistent)
					if (Waterlogged) return 256;
					else return 257;
				else
					if (Waterlogged) return 258;
					else return 259;
			else if (Distance == 3)
				if (Persistent)
					if (Waterlogged) return 260;
					else return 261;
				else
					if (Waterlogged) return 262;
					else return 263;
			else if (Distance == 4)
				if (Persistent)
					if (Waterlogged) return 264;
					else return 265;
				else
					if (Waterlogged) return 266;
					else return 267;
			else if (Distance == 5)
				if (Persistent)
					if (Waterlogged) return 268;
					else return 269;
				else
					if (Waterlogged) return 270;
					else return 271;
			else if (Distance == 6)
				if (Persistent)
					if (Waterlogged) return 272;
					else return 273;
				else
					if (Waterlogged) return 274;
					else return 275;
			else
				if (Persistent)
					if (Waterlogged) return 276;
					else return 277;
				else
					if (Waterlogged) return 278;
					else return 279;
		}
		BlockState OakLeaves();
		unsigned char Distance(BlockState Block);
		bool Persistent(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace OakLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState OakLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 136;
			else if (Axis == Axis::Y) return 137;
			else return 138;
		}
		BlockState OakLog();
		enum Axis Axis(BlockState Block);
	}
	namespace OakPlanks
	{
		constexpr BlockState OakPlanks()
		{
			return 15;
		}
	}
	namespace OakPressurePlate
	{
		constexpr BlockState OakPressurePlate(const bool Powered)
		{
			if (Powered) return 5892;
			else return 5893;
		}
		BlockState OakPressurePlate();
		bool Powered(BlockState Block);
	}
	namespace OakSapling
	{
		constexpr BlockState OakSapling(const unsigned char Stage)
		{
			if (Stage == 0) return 29;
			else return 30;
		}
		BlockState OakSapling();
		unsigned char Stage(BlockState Block);
	}
	namespace OakSign
	{
		constexpr BlockState OakSign(const unsigned char Rotation, const bool Waterlogged)
		{
			if (Rotation == 0)
				if (Waterlogged) return 4366;
				else return 4367;
			else if (Rotation == 1)
				if (Waterlogged) return 4368;
				else return 4369;
			else if (Rotation == 2)
				if (Waterlogged) return 4370;
				else return 4371;
			else if (Rotation == 3)
				if (Waterlogged) return 4372;
				else return 4373;
			else if (Rotation == 4)
				if (Waterlogged) return 4374;
				else return 4375;
			else if (Rotation == 5)
				if (Waterlogged) return 4376;
				else return 4377;
			else if (Rotation == 6)
				if (Waterlogged) return 4378;
				else return 4379;
			else if (Rotation == 7)
				if (Waterlogged) return 4380;
				else return 4381;
			else if (Rotation == 8)
				if (Waterlogged) return 4382;
				else return 4383;
			else if (Rotation == 9)
				if (Waterlogged) return 4384;
				else return 4385;
			else if (Rotation == 10)
				if (Waterlogged) return 4386;
				else return 4387;
			else if (Rotation == 11)
				if (Waterlogged) return 4388;
				else return 4389;
			else if (Rotation == 12)
				if (Waterlogged) return 4390;
				else return 4391;
			else if (Rotation == 13)
				if (Waterlogged) return 4392;
				else return 4393;
			else if (Rotation == 14)
				if (Waterlogged) return 4394;
				else return 4395;
			else
				if (Waterlogged) return 4396;
				else return 4397;
		}
		BlockState OakSign();
		unsigned char Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace OakSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState OakSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 12051;
				else return 12052;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 12053;
				else return 12054;
			else
				if (Waterlogged) return 12055;
				else return 12056;
		}
		BlockState OakSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace OakStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState OakStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 2938;
						else return 2939;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 2940;
						else return 2941;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 2942;
						else return 2943;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 2944;
						else return 2945;
					else
						if (Waterlogged) return 2946;
						else return 2947;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 2948;
						else return 2949;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 2950;
						else return 2951;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 2952;
						else return 2953;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 2954;
						else return 2955;
					else
						if (Waterlogged) return 2956;
						else return 2957;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 2958;
						else return 2959;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 2960;
						else return 2961;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 2962;
						else return 2963;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 2964;
						else return 2965;
					else
						if (Waterlogged) return 2966;
						else return 2967;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 2968;
						else return 2969;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 2970;
						else return 2971;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 2972;
						else return 2973;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 2974;
						else return 2975;
					else
						if (Waterlogged) return 2976;
						else return 2977;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 2978;
						else return 2979;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 2980;
						else return 2981;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 2982;
						else return 2983;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 2984;
						else return 2985;
					else
						if (Waterlogged) return 2986;
						else return 2987;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 2988;
						else return 2989;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 2990;
						else return 2991;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 2992;
						else return 2993;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 2994;
						else return 2995;
					else
						if (Waterlogged) return 2996;
						else return 2997;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 2998;
						else return 2999;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 3000;
						else return 3001;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 3002;
						else return 3003;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 3004;
						else return 3005;
					else
						if (Waterlogged) return 3006;
						else return 3007;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 3008;
						else return 3009;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 3010;
						else return 3011;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 3012;
						else return 3013;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 3014;
						else return 3015;
					else
						if (Waterlogged) return 3016;
						else return 3017;
		}
		BlockState OakStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace OakTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState OakTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6140;
							else return 6141;
						else
							if (Waterlogged) return 6142;
							else return 6143;
					else
						if (Powered)
							if (Waterlogged) return 6144;
							else return 6145;
						else
							if (Waterlogged) return 6146;
							else return 6147;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6148;
							else return 6149;
						else
							if (Waterlogged) return 6150;
							else return 6151;
					else
						if (Powered)
							if (Waterlogged) return 6152;
							else return 6153;
						else
							if (Waterlogged) return 6154;
							else return 6155;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6156;
							else return 6157;
						else
							if (Waterlogged) return 6158;
							else return 6159;
					else
						if (Powered)
							if (Waterlogged) return 6160;
							else return 6161;
						else
							if (Waterlogged) return 6162;
							else return 6163;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6164;
							else return 6165;
						else
							if (Waterlogged) return 6166;
							else return 6167;
					else
						if (Powered)
							if (Waterlogged) return 6168;
							else return 6169;
						else
							if (Waterlogged) return 6170;
							else return 6171;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6172;
							else return 6173;
						else
							if (Waterlogged) return 6174;
							else return 6175;
					else
						if (Powered)
							if (Waterlogged) return 6176;
							else return 6177;
						else
							if (Waterlogged) return 6178;
							else return 6179;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6180;
							else return 6181;
						else
							if (Waterlogged) return 6182;
							else return 6183;
					else
						if (Powered)
							if (Waterlogged) return 6184;
							else return 6185;
						else
							if (Waterlogged) return 6186;
							else return 6187;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6188;
							else return 6189;
						else
							if (Waterlogged) return 6190;
							else return 6191;
					else
						if (Powered)
							if (Waterlogged) return 6192;
							else return 6193;
						else
							if (Waterlogged) return 6194;
							else return 6195;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6196;
							else return 6197;
						else
							if (Waterlogged) return 6198;
							else return 6199;
					else
						if (Powered)
							if (Waterlogged) return 6200;
							else return 6201;
						else
							if (Waterlogged) return 6202;
							else return 6203;
		}
		BlockState OakTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace OakWallHangingSign
	{
		constexpr BlockState OakWallHangingSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 5706;
				else return 5707;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 5708;
				else return 5709;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 5710;
				else return 5711;
			else
				if (Waterlogged) return 5712;
				else return 5713;
		}
		BlockState OakWallHangingSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace OakWallSign
	{
		constexpr BlockState OakWallSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 4858;
				else return 4859;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 4860;
				else return 4861;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 4862;
				else return 4863;
			else
				if (Waterlogged) return 4864;
				else return 4865;
		}
		BlockState OakWallSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace OakWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState OakWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 201;
			else if (Axis == Axis::Y) return 202;
			else return 203;
		}
		BlockState OakWood();
		enum Axis Axis(BlockState Block);
	}
	namespace Observer
	{
		constexpr BlockState Observer(const eBlockFace Facing, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Powered) return 13573;
				else return 13574;
			else if (Facing == eBlockFace::BLOCK_FACE_XP)
				if (Powered) return 13575;
				else return 13576;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Powered) return 13577;
				else return 13578;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Powered) return 13579;
				else return 13580;
			else if (Facing == eBlockFace::BLOCK_FACE_YP)
				if (Powered) return 13581;
				else return 13582;
			else
				if (Powered) return 13583;
				else return 13584;
		}
		BlockState Observer();
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace Obsidian
	{
		constexpr BlockState Obsidian()
		{
			return 2400;
		}
	}
	namespace OchreFroglight
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState OchreFroglight(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 27655;
			else if (Axis == Axis::Y) return 27656;
			else return 27657;
		}
		BlockState OchreFroglight();
		enum Axis Axis(BlockState Block);
	}
	namespace OpenEyeblossom
	{
		constexpr BlockState OpenEyeblossom()
		{
			return 27941;
		}
	}
	namespace OrangeBanner
	{
		constexpr BlockState OrangeBanner(const unsigned char Rotation)
		{
			if (Rotation == 0) return 11664;
			else if (Rotation == 1) return 11665;
			else if (Rotation == 2) return 11666;
			else if (Rotation == 3) return 11667;
			else if (Rotation == 4) return 11668;
			else if (Rotation == 5) return 11669;
			else if (Rotation == 6) return 11670;
			else if (Rotation == 7) return 11671;
			else if (Rotation == 8) return 11672;
			else if (Rotation == 9) return 11673;
			else if (Rotation == 10) return 11674;
			else if (Rotation == 11) return 11675;
			else if (Rotation == 12) return 11676;
			else if (Rotation == 13) return 11677;
			else if (Rotation == 14) return 11678;
			else return 11679;
		}
		BlockState OrangeBanner();
		unsigned char Rotation(BlockState Block);
	}
	namespace OrangeBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState OrangeBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1747;
					else return 1748;
				else
					if (Part == Part::Head) return 1749;
					else return 1750;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1751;
					else return 1752;
				else
					if (Part == Part::Head) return 1753;
					else return 1754;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1755;
					else return 1756;
				else
					if (Part == Part::Head) return 1757;
					else return 1758;
			else
				if (Occupied)
					if (Part == Part::Head) return 1759;
					else return 1760;
				else
					if (Part == Part::Head) return 1761;
					else return 1762;
		}
		BlockState OrangeBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace OrangeCandle
	{
		constexpr BlockState OrangeCandle(const unsigned char Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 21817;
					else return 21818;
				else
					if (Waterlogged) return 21819;
					else return 21820;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 21821;
					else return 21822;
				else
					if (Waterlogged) return 21823;
					else return 21824;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 21825;
					else return 21826;
				else
					if (Waterlogged) return 21827;
					else return 21828;
			else
				if (Lit)
					if (Waterlogged) return 21829;
					else return 21830;
				else
					if (Waterlogged) return 21831;
					else return 21832;
		}
		BlockState OrangeCandle();
		unsigned char Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace OrangeCandleCake
	{
		constexpr BlockState OrangeCandleCake(const bool Lit)
		{
			if (Lit) return 22061;
			else return 22062;
		}
		BlockState OrangeCandleCake();
		bool Lit(BlockState Block);
	}
	namespace OrangeCarpet
	{
		constexpr BlockState OrangeCarpet()
		{
			return 11618;
		}
	}
	namespace OrangeConcrete
	{
		constexpr BlockState OrangeConcrete()
		{
			return 13752;
		}
	}
	namespace OrangeConcretePowder
	{
		constexpr BlockState OrangeConcretePowder()
		{
			return 13768;
		}
	}
	namespace OrangeGlazedTerracotta
	{
		constexpr BlockState OrangeGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13691;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13692;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13693;
			else return 13694;
		}
		BlockState OrangeGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace OrangeShulkerBox
	{
		constexpr BlockState OrangeShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13597;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 13598;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13599;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13600;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 13601;
			else return 13602;
		}
		BlockState OrangeShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace OrangeStainedGlass
	{
		constexpr BlockState OrangeStainedGlass()
		{
			return 6125;
		}
	}
	namespace OrangeStainedGlassPane
	{
		constexpr BlockState OrangeStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10213;
							else return 10214;
						else
							if (West) return 10215;
							else return 10216;
					else
						if (Waterlogged)
							if (West) return 10217;
							else return 10218;
						else
							if (West) return 10219;
							else return 10220;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10221;
							else return 10222;
						else
							if (West) return 10223;
							else return 10224;
					else
						if (Waterlogged)
							if (West) return 10225;
							else return 10226;
						else
							if (West) return 10227;
							else return 10228;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10229;
							else return 10230;
						else
							if (West) return 10231;
							else return 10232;
					else
						if (Waterlogged)
							if (West) return 10233;
							else return 10234;
						else
							if (West) return 10235;
							else return 10236;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10237;
							else return 10238;
						else
							if (West) return 10239;
							else return 10240;
					else
						if (Waterlogged)
							if (West) return 10241;
							else return 10242;
						else
							if (West) return 10243;
							else return 10244;
		}
		BlockState OrangeStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace OrangeTerracotta
	{
		constexpr BlockState OrangeTerracotta()
		{
			return 10166;
		}
	}
	namespace OrangeTulip
	{
		constexpr BlockState OrangeTulip()
		{
			return 2128;
		}
	}
	namespace OrangeWallBanner
	{
		constexpr BlockState OrangeWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11908;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11909;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11910;
			else return 11911;
		}
		BlockState OrangeWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace OrangeWool
	{
		constexpr BlockState OrangeWool()
		{
			return 2094;
		}
	}
	namespace OxeyeDaisy
	{
		constexpr BlockState OxeyeDaisy()
		{
			return 2131;
		}
	}
	namespace OxidizedChiseledCopper
	{
		constexpr BlockState OxidizedChiseledCopper()
		{
			return 24008;
		}
	}
	namespace OxidizedCopper
	{
		constexpr BlockState OxidizedCopper()
		{
			return 24001;
		}
	}
	namespace OxidizedCopperBulb
	{
		constexpr BlockState OxidizedCopperBulb(const bool Lit, const bool Powered)
		{
			if (Lit)
				if (Powered) return 25764;
				else return 25765;
			else
				if (Powered) return 25766;
				else return 25767;
		}
		BlockState OxidizedCopperBulb();
		bool Lit(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace OxidizedCopperDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState OxidizedCopperDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24840;
							else return 24841;
						else
							if (Powered) return 24842;
							else return 24843;
					else
						if (Open)
							if (Powered) return 24844;
							else return 24845;
						else
							if (Powered) return 24846;
							else return 24847;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24848;
							else return 24849;
						else
							if (Powered) return 24850;
							else return 24851;
					else
						if (Open)
							if (Powered) return 24852;
							else return 24853;
						else
							if (Powered) return 24854;
							else return 24855;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24856;
							else return 24857;
						else
							if (Powered) return 24858;
							else return 24859;
					else
						if (Open)
							if (Powered) return 24860;
							else return 24861;
						else
							if (Powered) return 24862;
							else return 24863;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24864;
							else return 24865;
						else
							if (Powered) return 24866;
							else return 24867;
					else
						if (Open)
							if (Powered) return 24868;
							else return 24869;
						else
							if (Powered) return 24870;
							else return 24871;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24872;
							else return 24873;
						else
							if (Powered) return 24874;
							else return 24875;
					else
						if (Open)
							if (Powered) return 24876;
							else return 24877;
						else
							if (Powered) return 24878;
							else return 24879;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24880;
							else return 24881;
						else
							if (Powered) return 24882;
							else return 24883;
					else
						if (Open)
							if (Powered) return 24884;
							else return 24885;
						else
							if (Powered) return 24886;
							else return 24887;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24888;
							else return 24889;
						else
							if (Powered) return 24890;
							else return 24891;
					else
						if (Open)
							if (Powered) return 24892;
							else return 24893;
						else
							if (Powered) return 24894;
							else return 24895;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24896;
							else return 24897;
						else
							if (Powered) return 24898;
							else return 24899;
					else
						if (Open)
							if (Powered) return 24900;
							else return 24901;
						else
							if (Powered) return 24902;
							else return 24903;
		}
		BlockState OxidizedCopperDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace OxidizedCopperGrate
	{
		constexpr BlockState OxidizedCopperGrate(const bool Waterlogged)
		{
			if (Waterlogged) return 25742;
			else return 25743;
		}
		BlockState OxidizedCopperGrate();
		bool Waterlogged(BlockState Block);
	}
	namespace OxidizedCopperTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState OxidizedCopperTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25352;
							else return 25353;
						else
							if (Waterlogged) return 25354;
							else return 25355;
					else
						if (Powered)
							if (Waterlogged) return 25356;
							else return 25357;
						else
							if (Waterlogged) return 25358;
							else return 25359;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25360;
							else return 25361;
						else
							if (Waterlogged) return 25362;
							else return 25363;
					else
						if (Powered)
							if (Waterlogged) return 25364;
							else return 25365;
						else
							if (Waterlogged) return 25366;
							else return 25367;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25368;
							else return 25369;
						else
							if (Waterlogged) return 25370;
							else return 25371;
					else
						if (Powered)
							if (Waterlogged) return 25372;
							else return 25373;
						else
							if (Waterlogged) return 25374;
							else return 25375;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25376;
							else return 25377;
						else
							if (Waterlogged) return 25378;
							else return 25379;
					else
						if (Powered)
							if (Waterlogged) return 25380;
							else return 25381;
						else
							if (Waterlogged) return 25382;
							else return 25383;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25384;
							else return 25385;
						else
							if (Waterlogged) return 25386;
							else return 25387;
					else
						if (Powered)
							if (Waterlogged) return 25388;
							else return 25389;
						else
							if (Waterlogged) return 25390;
							else return 25391;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25392;
							else return 25393;
						else
							if (Waterlogged) return 25394;
							else return 25395;
					else
						if (Powered)
							if (Waterlogged) return 25396;
							else return 25397;
						else
							if (Waterlogged) return 25398;
							else return 25399;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25400;
							else return 25401;
						else
							if (Waterlogged) return 25402;
							else return 25403;
					else
						if (Powered)
							if (Waterlogged) return 25404;
							else return 25405;
						else
							if (Waterlogged) return 25406;
							else return 25407;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25408;
							else return 25409;
						else
							if (Waterlogged) return 25410;
							else return 25411;
					else
						if (Powered)
							if (Waterlogged) return 25412;
							else return 25413;
						else
							if (Waterlogged) return 25414;
							else return 25415;
		}
		BlockState OxidizedCopperTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace OxidizedCutCopper
	{
		constexpr BlockState OxidizedCutCopper()
		{
			return 24004;
		}
	}
	namespace OxidizedCutCopperSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState OxidizedCutCopperSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 24336;
				else return 24337;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 24338;
				else return 24339;
			else
				if (Waterlogged) return 24340;
				else return 24341;
		}
		BlockState OxidizedCutCopperSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace OxidizedCutCopperStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState OxidizedCutCopperStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24016;
						else return 24017;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24018;
						else return 24019;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24020;
						else return 24021;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24022;
						else return 24023;
					else
						if (Waterlogged) return 24024;
						else return 24025;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24026;
						else return 24027;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24028;
						else return 24029;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24030;
						else return 24031;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24032;
						else return 24033;
					else
						if (Waterlogged) return 24034;
						else return 24035;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24036;
						else return 24037;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24038;
						else return 24039;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24040;
						else return 24041;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24042;
						else return 24043;
					else
						if (Waterlogged) return 24044;
						else return 24045;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24046;
						else return 24047;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24048;
						else return 24049;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24050;
						else return 24051;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24052;
						else return 24053;
					else
						if (Waterlogged) return 24054;
						else return 24055;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24056;
						else return 24057;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24058;
						else return 24059;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24060;
						else return 24061;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24062;
						else return 24063;
					else
						if (Waterlogged) return 24064;
						else return 24065;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24066;
						else return 24067;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24068;
						else return 24069;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24070;
						else return 24071;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24072;
						else return 24073;
					else
						if (Waterlogged) return 24074;
						else return 24075;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24076;
						else return 24077;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24078;
						else return 24079;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24080;
						else return 24081;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24082;
						else return 24083;
					else
						if (Waterlogged) return 24084;
						else return 24085;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24086;
						else return 24087;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24088;
						else return 24089;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24090;
						else return 24091;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24092;
						else return 24093;
					else
						if (Waterlogged) return 24094;
						else return 24095;
		}
		BlockState OxidizedCutCopperStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PackedIce
	{
		constexpr BlockState PackedIce()
		{
			return 11635;
		}
	}
	namespace PackedMud
	{
		constexpr BlockState PackedMud()
		{
			return 6784;
		}
	}
	namespace PaleHangingMoss
	{
		constexpr BlockState PaleHangingMoss(const bool Tip)
		{
			if (Tip) return 27939;
			else return 27940;
		}
		BlockState PaleHangingMoss();
		bool Tip(BlockState Block);
	}
	namespace PaleMossBlock
	{
		constexpr BlockState PaleMossBlock()
		{
			return 27776;
		}
	}
	namespace PaleMossCarpet
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState PaleMossCarpet(const bool Bottom, const enum East East, const enum North North, const enum South South, const enum West West)
		{
			if (Bottom)
				if (East == East::None)
					if (North == North::None)
						if (South == South::None)
							if (West == West::None) return 27777;
							else if (West == West::Low) return 27778;
							else return 27779;
						else if (South == South::Low)
							if (West == West::None) return 27780;
							else if (West == West::Low) return 27781;
							else return 27782;
						else
							if (West == West::None) return 27783;
							else if (West == West::Low) return 27784;
							else return 27785;
					else if (North == North::Low)
						if (South == South::None)
							if (West == West::None) return 27786;
							else if (West == West::Low) return 27787;
							else return 27788;
						else if (South == South::Low)
							if (West == West::None) return 27789;
							else if (West == West::Low) return 27790;
							else return 27791;
						else
							if (West == West::None) return 27792;
							else if (West == West::Low) return 27793;
							else return 27794;
					else
						if (South == South::None)
							if (West == West::None) return 27795;
							else if (West == West::Low) return 27796;
							else return 27797;
						else if (South == South::Low)
							if (West == West::None) return 27798;
							else if (West == West::Low) return 27799;
							else return 27800;
						else
							if (West == West::None) return 27801;
							else if (West == West::Low) return 27802;
							else return 27803;
				else if (East == East::Low)
					if (North == North::None)
						if (South == South::None)
							if (West == West::None) return 27804;
							else if (West == West::Low) return 27805;
							else return 27806;
						else if (South == South::Low)
							if (West == West::None) return 27807;
							else if (West == West::Low) return 27808;
							else return 27809;
						else
							if (West == West::None) return 27810;
							else if (West == West::Low) return 27811;
							else return 27812;
					else if (North == North::Low)
						if (South == South::None)
							if (West == West::None) return 27813;
							else if (West == West::Low) return 27814;
							else return 27815;
						else if (South == South::Low)
							if (West == West::None) return 27816;
							else if (West == West::Low) return 27817;
							else return 27818;
						else
							if (West == West::None) return 27819;
							else if (West == West::Low) return 27820;
							else return 27821;
					else
						if (South == South::None)
							if (West == West::None) return 27822;
							else if (West == West::Low) return 27823;
							else return 27824;
						else if (South == South::Low)
							if (West == West::None) return 27825;
							else if (West == West::Low) return 27826;
							else return 27827;
						else
							if (West == West::None) return 27828;
							else if (West == West::Low) return 27829;
							else return 27830;
				else
					if (North == North::None)
						if (South == South::None)
							if (West == West::None) return 27831;
							else if (West == West::Low) return 27832;
							else return 27833;
						else if (South == South::Low)
							if (West == West::None) return 27834;
							else if (West == West::Low) return 27835;
							else return 27836;
						else
							if (West == West::None) return 27837;
							else if (West == West::Low) return 27838;
							else return 27839;
					else if (North == North::Low)
						if (South == South::None)
							if (West == West::None) return 27840;
							else if (West == West::Low) return 27841;
							else return 27842;
						else if (South == South::Low)
							if (West == West::None) return 27843;
							else if (West == West::Low) return 27844;
							else return 27845;
						else
							if (West == West::None) return 27846;
							else if (West == West::Low) return 27847;
							else return 27848;
					else
						if (South == South::None)
							if (West == West::None) return 27849;
							else if (West == West::Low) return 27850;
							else return 27851;
						else if (South == South::Low)
							if (West == West::None) return 27852;
							else if (West == West::Low) return 27853;
							else return 27854;
						else
							if (West == West::None) return 27855;
							else if (West == West::Low) return 27856;
							else return 27857;
			else
				if (East == East::None)
					if (North == North::None)
						if (South == South::None)
							if (West == West::None) return 27858;
							else if (West == West::Low) return 27859;
							else return 27860;
						else if (South == South::Low)
							if (West == West::None) return 27861;
							else if (West == West::Low) return 27862;
							else return 27863;
						else
							if (West == West::None) return 27864;
							else if (West == West::Low) return 27865;
							else return 27866;
					else if (North == North::Low)
						if (South == South::None)
							if (West == West::None) return 27867;
							else if (West == West::Low) return 27868;
							else return 27869;
						else if (South == South::Low)
							if (West == West::None) return 27870;
							else if (West == West::Low) return 27871;
							else return 27872;
						else
							if (West == West::None) return 27873;
							else if (West == West::Low) return 27874;
							else return 27875;
					else
						if (South == South::None)
							if (West == West::None) return 27876;
							else if (West == West::Low) return 27877;
							else return 27878;
						else if (South == South::Low)
							if (West == West::None) return 27879;
							else if (West == West::Low) return 27880;
							else return 27881;
						else
							if (West == West::None) return 27882;
							else if (West == West::Low) return 27883;
							else return 27884;
				else if (East == East::Low)
					if (North == North::None)
						if (South == South::None)
							if (West == West::None) return 27885;
							else if (West == West::Low) return 27886;
							else return 27887;
						else if (South == South::Low)
							if (West == West::None) return 27888;
							else if (West == West::Low) return 27889;
							else return 27890;
						else
							if (West == West::None) return 27891;
							else if (West == West::Low) return 27892;
							else return 27893;
					else if (North == North::Low)
						if (South == South::None)
							if (West == West::None) return 27894;
							else if (West == West::Low) return 27895;
							else return 27896;
						else if (South == South::Low)
							if (West == West::None) return 27897;
							else if (West == West::Low) return 27898;
							else return 27899;
						else
							if (West == West::None) return 27900;
							else if (West == West::Low) return 27901;
							else return 27902;
					else
						if (South == South::None)
							if (West == West::None) return 27903;
							else if (West == West::Low) return 27904;
							else return 27905;
						else if (South == South::Low)
							if (West == West::None) return 27906;
							else if (West == West::Low) return 27907;
							else return 27908;
						else
							if (West == West::None) return 27909;
							else if (West == West::Low) return 27910;
							else return 27911;
				else
					if (North == North::None)
						if (South == South::None)
							if (West == West::None) return 27912;
							else if (West == West::Low) return 27913;
							else return 27914;
						else if (South == South::Low)
							if (West == West::None) return 27915;
							else if (West == West::Low) return 27916;
							else return 27917;
						else
							if (West == West::None) return 27918;
							else if (West == West::Low) return 27919;
							else return 27920;
					else if (North == North::Low)
						if (South == South::None)
							if (West == West::None) return 27921;
							else if (West == West::Low) return 27922;
							else return 27923;
						else if (South == South::Low)
							if (West == West::None) return 27924;
							else if (West == West::Low) return 27925;
							else return 27926;
						else
							if (West == West::None) return 27927;
							else if (West == West::Low) return 27928;
							else return 27929;
					else
						if (South == South::None)
							if (West == West::None) return 27930;
							else if (West == West::Low) return 27931;
							else return 27932;
						else if (South == South::Low)
							if (West == West::None) return 27933;
							else if (West == West::Low) return 27934;
							else return 27935;
						else
							if (West == West::None) return 27936;
							else if (West == West::Low) return 27937;
							else return 27938;
		}
		BlockState PaleMossCarpet();
		bool Bottom(BlockState Block);
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace PaleOakButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState PaleOakButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9564;
					else return 9565;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9566;
					else return 9567;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9568;
					else return 9569;
				else
					if (Powered) return 9570;
					else return 9571;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9572;
					else return 9573;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9574;
					else return 9575;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9576;
					else return 9577;
				else
					if (Powered) return 9578;
					else return 9579;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9580;
					else return 9581;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9582;
					else return 9583;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9584;
					else return 9585;
				else
					if (Powered) return 9586;
					else return 9587;
		}
		BlockState PaleOakButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace PaleOakDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState PaleOakDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13165;
							else return 13166;
						else
							if (Powered) return 13167;
							else return 13168;
					else
						if (Open)
							if (Powered) return 13169;
							else return 13170;
						else
							if (Powered) return 13171;
							else return 13172;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13173;
							else return 13174;
						else
							if (Powered) return 13175;
							else return 13176;
					else
						if (Open)
							if (Powered) return 13177;
							else return 13178;
						else
							if (Powered) return 13179;
							else return 13180;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13181;
							else return 13182;
						else
							if (Powered) return 13183;
							else return 13184;
					else
						if (Open)
							if (Powered) return 13185;
							else return 13186;
						else
							if (Powered) return 13187;
							else return 13188;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13189;
							else return 13190;
						else
							if (Powered) return 13191;
							else return 13192;
					else
						if (Open)
							if (Powered) return 13193;
							else return 13194;
						else
							if (Powered) return 13195;
							else return 13196;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13197;
							else return 13198;
						else
							if (Powered) return 13199;
							else return 13200;
					else
						if (Open)
							if (Powered) return 13201;
							else return 13202;
						else
							if (Powered) return 13203;
							else return 13204;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13205;
							else return 13206;
						else
							if (Powered) return 13207;
							else return 13208;
					else
						if (Open)
							if (Powered) return 13209;
							else return 13210;
						else
							if (Powered) return 13211;
							else return 13212;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13213;
							else return 13214;
						else
							if (Powered) return 13215;
							else return 13216;
					else
						if (Open)
							if (Powered) return 13217;
							else return 13218;
						else
							if (Powered) return 13219;
							else return 13220;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 13221;
							else return 13222;
						else
							if (Powered) return 13223;
							else return 13224;
					else
						if (Open)
							if (Powered) return 13225;
							else return 13226;
						else
							if (Powered) return 13227;
							else return 13228;
		}
		BlockState PaleOakDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace PaleOakFence
	{
		constexpr BlockState PaleOakFence(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 12685;
							else return 12686;
						else
							if (West) return 12687;
							else return 12688;
					else
						if (Waterlogged)
							if (West) return 12689;
							else return 12690;
						else
							if (West) return 12691;
							else return 12692;
				else
					if (South)
						if (Waterlogged)
							if (West) return 12693;
							else return 12694;
						else
							if (West) return 12695;
							else return 12696;
					else
						if (Waterlogged)
							if (West) return 12697;
							else return 12698;
						else
							if (West) return 12699;
							else return 12700;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 12701;
							else return 12702;
						else
							if (West) return 12703;
							else return 12704;
					else
						if (Waterlogged)
							if (West) return 12705;
							else return 12706;
						else
							if (West) return 12707;
							else return 12708;
				else
					if (South)
						if (Waterlogged)
							if (West) return 12709;
							else return 12710;
						else
							if (West) return 12711;
							else return 12712;
					else
						if (Waterlogged)
							if (West) return 12713;
							else return 12714;
						else
							if (West) return 12715;
							else return 12716;
		}
		BlockState PaleOakFence();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace PaleOakFenceGate
	{
		constexpr BlockState PaleOakFenceGate(const eBlockFace Facing, const bool InWall, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (InWall)
					if (Open)
						if (Powered) return 12397;
						else return 12398;
					else
						if (Powered) return 12399;
						else return 12400;
				else
					if (Open)
						if (Powered) return 12401;
						else return 12402;
					else
						if (Powered) return 12403;
						else return 12404;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (InWall)
					if (Open)
						if (Powered) return 12405;
						else return 12406;
					else
						if (Powered) return 12407;
						else return 12408;
				else
					if (Open)
						if (Powered) return 12409;
						else return 12410;
					else
						if (Powered) return 12411;
						else return 12412;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (InWall)
					if (Open)
						if (Powered) return 12413;
						else return 12414;
					else
						if (Powered) return 12415;
						else return 12416;
				else
					if (Open)
						if (Powered) return 12417;
						else return 12418;
					else
						if (Powered) return 12419;
						else return 12420;
			else
				if (InWall)
					if (Open)
						if (Powered) return 12421;
						else return 12422;
					else
						if (Powered) return 12423;
						else return 12424;
				else
					if (Open)
						if (Powered) return 12425;
						else return 12426;
					else
						if (Powered) return 12427;
						else return 12428;
		}
		BlockState PaleOakFenceGate();
		eBlockFace Facing(BlockState Block);
		bool InWall(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace PaleOakHangingSign
	{
		constexpr BlockState PaleOakHangingSign(const bool Attached, const unsigned char Rotation, const bool Waterlogged)
		{
			if (Attached)
				if (Rotation == 0)
					if (Waterlogged) return 5386;
					else return 5387;
				else if (Rotation == 1)
					if (Waterlogged) return 5388;
					else return 5389;
				else if (Rotation == 2)
					if (Waterlogged) return 5390;
					else return 5391;
				else if (Rotation == 3)
					if (Waterlogged) return 5392;
					else return 5393;
				else if (Rotation == 4)
					if (Waterlogged) return 5394;
					else return 5395;
				else if (Rotation == 5)
					if (Waterlogged) return 5396;
					else return 5397;
				else if (Rotation == 6)
					if (Waterlogged) return 5398;
					else return 5399;
				else if (Rotation == 7)
					if (Waterlogged) return 5400;
					else return 5401;
				else if (Rotation == 8)
					if (Waterlogged) return 5402;
					else return 5403;
				else if (Rotation == 9)
					if (Waterlogged) return 5404;
					else return 5405;
				else if (Rotation == 10)
					if (Waterlogged) return 5406;
					else return 5407;
				else if (Rotation == 11)
					if (Waterlogged) return 5408;
					else return 5409;
				else if (Rotation == 12)
					if (Waterlogged) return 5410;
					else return 5411;
				else if (Rotation == 13)
					if (Waterlogged) return 5412;
					else return 5413;
				else if (Rotation == 14)
					if (Waterlogged) return 5414;
					else return 5415;
				else
					if (Waterlogged) return 5416;
					else return 5417;
			else
				if (Rotation == 0)
					if (Waterlogged) return 5418;
					else return 5419;
				else if (Rotation == 1)
					if (Waterlogged) return 5420;
					else return 5421;
				else if (Rotation == 2)
					if (Waterlogged) return 5422;
					else return 5423;
				else if (Rotation == 3)
					if (Waterlogged) return 5424;
					else return 5425;
				else if (Rotation == 4)
					if (Waterlogged) return 5426;
					else return 5427;
				else if (Rotation == 5)
					if (Waterlogged) return 5428;
					else return 5429;
				else if (Rotation == 6)
					if (Waterlogged) return 5430;
					else return 5431;
				else if (Rotation == 7)
					if (Waterlogged) return 5432;
					else return 5433;
				else if (Rotation == 8)
					if (Waterlogged) return 5434;
					else return 5435;
				else if (Rotation == 9)
					if (Waterlogged) return 5436;
					else return 5437;
				else if (Rotation == 10)
					if (Waterlogged) return 5438;
					else return 5439;
				else if (Rotation == 11)
					if (Waterlogged) return 5440;
					else return 5441;
				else if (Rotation == 12)
					if (Waterlogged) return 5442;
					else return 5443;
				else if (Rotation == 13)
					if (Waterlogged) return 5444;
					else return 5445;
				else if (Rotation == 14)
					if (Waterlogged) return 5446;
					else return 5447;
				else
					if (Waterlogged) return 5448;
					else return 5449;
		}
		BlockState PaleOakHangingSign();
		bool Attached(BlockState Block);
		unsigned char Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PaleOakLeaves
	{
		constexpr BlockState PaleOakLeaves(const unsigned char Distance, const bool Persistent, const bool Waterlogged)
		{
			if (Distance == 1)
				if (Persistent)
					if (Waterlogged) return 448;
					else return 449;
				else
					if (Waterlogged) return 450;
					else return 451;
			else if (Distance == 2)
				if (Persistent)
					if (Waterlogged) return 452;
					else return 453;
				else
					if (Waterlogged) return 454;
					else return 455;
			else if (Distance == 3)
				if (Persistent)
					if (Waterlogged) return 456;
					else return 457;
				else
					if (Waterlogged) return 458;
					else return 459;
			else if (Distance == 4)
				if (Persistent)
					if (Waterlogged) return 460;
					else return 461;
				else
					if (Waterlogged) return 462;
					else return 463;
			else if (Distance == 5)
				if (Persistent)
					if (Waterlogged) return 464;
					else return 465;
				else
					if (Waterlogged) return 466;
					else return 467;
			else if (Distance == 6)
				if (Persistent)
					if (Waterlogged) return 468;
					else return 469;
				else
					if (Waterlogged) return 470;
					else return 471;
			else
				if (Persistent)
					if (Waterlogged) return 472;
					else return 473;
				else
					if (Waterlogged) return 474;
					else return 475;
		}
		BlockState PaleOakLeaves();
		unsigned char Distance(BlockState Block);
		bool Persistent(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PaleOakLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState PaleOakLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 157;
			else if (Axis == Axis::Y) return 158;
			else return 159;
		}
		BlockState PaleOakLog();
		enum Axis Axis(BlockState Block);
	}
	namespace PaleOakPlanks
	{
		constexpr BlockState PaleOakPlanks()
		{
			return 25;
		}
	}
	namespace PaleOakPressurePlate
	{
		constexpr BlockState PaleOakPressurePlate(const bool Powered)
		{
			if (Powered) return 5906;
			else return 5907;
		}
		BlockState PaleOakPressurePlate();
		bool Powered(BlockState Block);
	}
	namespace PaleOakSapling
	{
		constexpr BlockState PaleOakSapling(const unsigned char Stage)
		{
			if (Stage == 0) return 43;
			else return 44;
		}
		BlockState PaleOakSapling();
		unsigned char Stage(BlockState Block);
	}
	namespace PaleOakSign
	{
		constexpr BlockState PaleOakSign(const unsigned char Rotation, const bool Waterlogged)
		{
			if (Rotation == 0)
				if (Waterlogged) return 4590;
				else return 4591;
			else if (Rotation == 1)
				if (Waterlogged) return 4592;
				else return 4593;
			else if (Rotation == 2)
				if (Waterlogged) return 4594;
				else return 4595;
			else if (Rotation == 3)
				if (Waterlogged) return 4596;
				else return 4597;
			else if (Rotation == 4)
				if (Waterlogged) return 4598;
				else return 4599;
			else if (Rotation == 5)
				if (Waterlogged) return 4600;
				else return 4601;
			else if (Rotation == 6)
				if (Waterlogged) return 4602;
				else return 4603;
			else if (Rotation == 7)
				if (Waterlogged) return 4604;
				else return 4605;
			else if (Rotation == 8)
				if (Waterlogged) return 4606;
				else return 4607;
			else if (Rotation == 9)
				if (Waterlogged) return 4608;
				else return 4609;
			else if (Rotation == 10)
				if (Waterlogged) return 4610;
				else return 4611;
			else if (Rotation == 11)
				if (Waterlogged) return 4612;
				else return 4613;
			else if (Rotation == 12)
				if (Waterlogged) return 4614;
				else return 4615;
			else if (Rotation == 13)
				if (Waterlogged) return 4616;
				else return 4617;
			else if (Rotation == 14)
				if (Waterlogged) return 4618;
				else return 4619;
			else
				if (Waterlogged) return 4620;
				else return 4621;
		}
		BlockState PaleOakSign();
		unsigned char Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PaleOakSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState PaleOakSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 12093;
				else return 12094;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 12095;
				else return 12096;
			else
				if (Waterlogged) return 12097;
				else return 12098;
		}
		BlockState PaleOakSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PaleOakStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState PaleOakStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10933;
						else return 10934;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10935;
						else return 10936;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10937;
						else return 10938;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10939;
						else return 10940;
					else
						if (Waterlogged) return 10941;
						else return 10942;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10943;
						else return 10944;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10945;
						else return 10946;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10947;
						else return 10948;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10949;
						else return 10950;
					else
						if (Waterlogged) return 10951;
						else return 10952;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10953;
						else return 10954;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10955;
						else return 10956;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10957;
						else return 10958;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10959;
						else return 10960;
					else
						if (Waterlogged) return 10961;
						else return 10962;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10963;
						else return 10964;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10965;
						else return 10966;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10967;
						else return 10968;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10969;
						else return 10970;
					else
						if (Waterlogged) return 10971;
						else return 10972;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10973;
						else return 10974;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10975;
						else return 10976;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10977;
						else return 10978;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10979;
						else return 10980;
					else
						if (Waterlogged) return 10981;
						else return 10982;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10983;
						else return 10984;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10985;
						else return 10986;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10987;
						else return 10988;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10989;
						else return 10990;
					else
						if (Waterlogged) return 10991;
						else return 10992;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10993;
						else return 10994;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10995;
						else return 10996;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10997;
						else return 10998;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10999;
						else return 11000;
					else
						if (Waterlogged) return 11001;
						else return 11002;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11003;
						else return 11004;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11005;
						else return 11006;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11007;
						else return 11008;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11009;
						else return 11010;
					else
						if (Waterlogged) return 11011;
						else return 11012;
		}
		BlockState PaleOakStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PaleOakTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState PaleOakTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6588;
							else return 6589;
						else
							if (Waterlogged) return 6590;
							else return 6591;
					else
						if (Powered)
							if (Waterlogged) return 6592;
							else return 6593;
						else
							if (Waterlogged) return 6594;
							else return 6595;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6596;
							else return 6597;
						else
							if (Waterlogged) return 6598;
							else return 6599;
					else
						if (Powered)
							if (Waterlogged) return 6600;
							else return 6601;
						else
							if (Waterlogged) return 6602;
							else return 6603;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6604;
							else return 6605;
						else
							if (Waterlogged) return 6606;
							else return 6607;
					else
						if (Powered)
							if (Waterlogged) return 6608;
							else return 6609;
						else
							if (Waterlogged) return 6610;
							else return 6611;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6612;
							else return 6613;
						else
							if (Waterlogged) return 6614;
							else return 6615;
					else
						if (Powered)
							if (Waterlogged) return 6616;
							else return 6617;
						else
							if (Waterlogged) return 6618;
							else return 6619;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6620;
							else return 6621;
						else
							if (Waterlogged) return 6622;
							else return 6623;
					else
						if (Powered)
							if (Waterlogged) return 6624;
							else return 6625;
						else
							if (Waterlogged) return 6626;
							else return 6627;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6628;
							else return 6629;
						else
							if (Waterlogged) return 6630;
							else return 6631;
					else
						if (Powered)
							if (Waterlogged) return 6632;
							else return 6633;
						else
							if (Waterlogged) return 6634;
							else return 6635;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6636;
							else return 6637;
						else
							if (Waterlogged) return 6638;
							else return 6639;
					else
						if (Powered)
							if (Waterlogged) return 6640;
							else return 6641;
						else
							if (Waterlogged) return 6642;
							else return 6643;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6644;
							else return 6645;
						else
							if (Waterlogged) return 6646;
							else return 6647;
					else
						if (Powered)
							if (Waterlogged) return 6648;
							else return 6649;
						else
							if (Waterlogged) return 6650;
							else return 6651;
		}
		BlockState PaleOakTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PaleOakWallHangingSign
	{
		constexpr BlockState PaleOakWallHangingSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 5762;
				else return 5763;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 5764;
				else return 5765;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 5766;
				else return 5767;
			else
				if (Waterlogged) return 5768;
				else return 5769;
		}
		BlockState PaleOakWallHangingSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PaleOakWallSign
	{
		constexpr BlockState PaleOakWallSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 4914;
				else return 4915;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 4916;
				else return 4917;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 4918;
				else return 4919;
			else
				if (Waterlogged) return 4920;
				else return 4921;
		}
		BlockState PaleOakWallSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PaleOakWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState PaleOakWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 22;
			else if (Axis == Axis::Y) return 23;
			else return 24;
		}
		BlockState PaleOakWood();
		enum Axis Axis(BlockState Block);
	}
	namespace PearlescentFroglight
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState PearlescentFroglight(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 27661;
			else if (Axis == Axis::Y) return 27662;
			else return 27663;
		}
		BlockState PearlescentFroglight();
		enum Axis Axis(BlockState Block);
	}
	namespace Peony
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		constexpr BlockState Peony(const enum Half Half)
		{
			if (Half == Half::Upper) return 11642;
			else return 11643;
		}
		BlockState Peony();
		enum Half Half(BlockState Block);
	}
	namespace PetrifiedOakSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState PetrifiedOakSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 12141;
				else return 12142;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 12143;
				else return 12144;
			else
				if (Waterlogged) return 12145;
				else return 12146;
		}
		BlockState PetrifiedOakSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PiglinHead
	{
		constexpr BlockState PiglinHead(const bool Powered, const unsigned char Rotation)
		{
			if (Powered)
				if (Rotation == 0) return 9876;
				else if (Rotation == 1) return 9877;
				else if (Rotation == 2) return 9878;
				else if (Rotation == 3) return 9879;
				else if (Rotation == 4) return 9880;
				else if (Rotation == 5) return 9881;
				else if (Rotation == 6) return 9882;
				else if (Rotation == 7) return 9883;
				else if (Rotation == 8) return 9884;
				else if (Rotation == 9) return 9885;
				else if (Rotation == 10) return 9886;
				else if (Rotation == 11) return 9887;
				else if (Rotation == 12) return 9888;
				else if (Rotation == 13) return 9889;
				else if (Rotation == 14) return 9890;
				else return 9891;
			else
				if (Rotation == 0) return 9892;
				else if (Rotation == 1) return 9893;
				else if (Rotation == 2) return 9894;
				else if (Rotation == 3) return 9895;
				else if (Rotation == 4) return 9896;
				else if (Rotation == 5) return 9897;
				else if (Rotation == 6) return 9898;
				else if (Rotation == 7) return 9899;
				else if (Rotation == 8) return 9900;
				else if (Rotation == 9) return 9901;
				else if (Rotation == 10) return 9902;
				else if (Rotation == 11) return 9903;
				else if (Rotation == 12) return 9904;
				else if (Rotation == 13) return 9905;
				else if (Rotation == 14) return 9906;
				else return 9907;
		}
		BlockState PiglinHead();
		bool Powered(BlockState Block);
		unsigned char Rotation(BlockState Block);
	}
	namespace PiglinWallHead
	{
		constexpr BlockState PiglinWallHead(const eBlockFace Facing, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Powered) return 9908;
				else return 9909;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Powered) return 9910;
				else return 9911;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Powered) return 9912;
				else return 9913;
			else
				if (Powered) return 9914;
				else return 9915;
		}
		BlockState PiglinWallHead();
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace PinkBanner
	{
		constexpr BlockState PinkBanner(const unsigned char Rotation)
		{
			if (Rotation == 0) return 11744;
			else if (Rotation == 1) return 11745;
			else if (Rotation == 2) return 11746;
			else if (Rotation == 3) return 11747;
			else if (Rotation == 4) return 11748;
			else if (Rotation == 5) return 11749;
			else if (Rotation == 6) return 11750;
			else if (Rotation == 7) return 11751;
			else if (Rotation == 8) return 11752;
			else if (Rotation == 9) return 11753;
			else if (Rotation == 10) return 11754;
			else if (Rotation == 11) return 11755;
			else if (Rotation == 12) return 11756;
			else if (Rotation == 13) return 11757;
			else if (Rotation == 14) return 11758;
			else return 11759;
		}
		BlockState PinkBanner();
		unsigned char Rotation(BlockState Block);
	}
	namespace PinkBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState PinkBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1827;
					else return 1828;
				else
					if (Part == Part::Head) return 1829;
					else return 1830;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1831;
					else return 1832;
				else
					if (Part == Part::Head) return 1833;
					else return 1834;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1835;
					else return 1836;
				else
					if (Part == Part::Head) return 1837;
					else return 1838;
			else
				if (Occupied)
					if (Part == Part::Head) return 1839;
					else return 1840;
				else
					if (Part == Part::Head) return 1841;
					else return 1842;
		}
		BlockState PinkBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace PinkCandle
	{
		constexpr BlockState PinkCandle(const unsigned char Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 21897;
					else return 21898;
				else
					if (Waterlogged) return 21899;
					else return 21900;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 21901;
					else return 21902;
				else
					if (Waterlogged) return 21903;
					else return 21904;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 21905;
					else return 21906;
				else
					if (Waterlogged) return 21907;
					else return 21908;
			else
				if (Lit)
					if (Waterlogged) return 21909;
					else return 21910;
				else
					if (Waterlogged) return 21911;
					else return 21912;
		}
		BlockState PinkCandle();
		unsigned char Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PinkCandleCake
	{
		constexpr BlockState PinkCandleCake(const bool Lit)
		{
			if (Lit) return 22071;
			else return 22072;
		}
		BlockState PinkCandleCake();
		bool Lit(BlockState Block);
	}
	namespace PinkCarpet
	{
		constexpr BlockState PinkCarpet()
		{
			return 11623;
		}
	}
	namespace PinkConcrete
	{
		constexpr BlockState PinkConcrete()
		{
			return 13757;
		}
	}
	namespace PinkConcretePowder
	{
		constexpr BlockState PinkConcretePowder()
		{
			return 13773;
		}
	}
	namespace PinkGlazedTerracotta
	{
		constexpr BlockState PinkGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13711;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13712;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13713;
			else return 13714;
		}
		BlockState PinkGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace PinkPetals
	{
		constexpr BlockState PinkPetals(const eBlockFace Facing, const unsigned char FlowerAmount)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (FlowerAmount == 1) return 25887;
				else if (FlowerAmount == 2) return 25888;
				else if (FlowerAmount == 3) return 25889;
				else return 25890;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (FlowerAmount == 1) return 25891;
				else if (FlowerAmount == 2) return 25892;
				else if (FlowerAmount == 3) return 25893;
				else return 25894;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (FlowerAmount == 1) return 25895;
				else if (FlowerAmount == 2) return 25896;
				else if (FlowerAmount == 3) return 25897;
				else return 25898;
			else
				if (FlowerAmount == 1) return 25899;
				else if (FlowerAmount == 2) return 25900;
				else if (FlowerAmount == 3) return 25901;
				else return 25902;
		}
		BlockState PinkPetals();
		eBlockFace Facing(BlockState Block);
		unsigned char FlowerAmount(BlockState Block);
	}
	namespace PinkShulkerBox
	{
		constexpr BlockState PinkShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13627;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 13628;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13629;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13630;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 13631;
			else return 13632;
		}
		BlockState PinkShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace PinkStainedGlass
	{
		constexpr BlockState PinkStainedGlass()
		{
			return 6130;
		}
	}
	namespace PinkStainedGlassPane
	{
		constexpr BlockState PinkStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10373;
							else return 10374;
						else
							if (West) return 10375;
							else return 10376;
					else
						if (Waterlogged)
							if (West) return 10377;
							else return 10378;
						else
							if (West) return 10379;
							else return 10380;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10381;
							else return 10382;
						else
							if (West) return 10383;
							else return 10384;
					else
						if (Waterlogged)
							if (West) return 10385;
							else return 10386;
						else
							if (West) return 10387;
							else return 10388;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10389;
							else return 10390;
						else
							if (West) return 10391;
							else return 10392;
					else
						if (Waterlogged)
							if (West) return 10393;
							else return 10394;
						else
							if (West) return 10395;
							else return 10396;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10397;
							else return 10398;
						else
							if (West) return 10399;
							else return 10400;
					else
						if (Waterlogged)
							if (West) return 10401;
							else return 10402;
						else
							if (West) return 10403;
							else return 10404;
		}
		BlockState PinkStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace PinkTerracotta
	{
		constexpr BlockState PinkTerracotta()
		{
			return 10171;
		}
	}
	namespace PinkTulip
	{
		constexpr BlockState PinkTulip()
		{
			return 2130;
		}
	}
	namespace PinkWallBanner
	{
		constexpr BlockState PinkWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11928;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11929;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11930;
			else return 11931;
		}
		BlockState PinkWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace PinkWool
	{
		constexpr BlockState PinkWool()
		{
			return 2099;
		}
	}
	namespace Piston
	{
		constexpr BlockState Piston(const bool Extended, const eBlockFace Facing)
		{
			if (Extended)
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 2057;
				else if (Facing == eBlockFace::BLOCK_FACE_XP) return 2058;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 2059;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 2060;
				else if (Facing == eBlockFace::BLOCK_FACE_YP) return 2061;
				else return 2062;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 2063;
				else if (Facing == eBlockFace::BLOCK_FACE_XP) return 2064;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 2065;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 2066;
				else if (Facing == eBlockFace::BLOCK_FACE_YP) return 2067;
				else return 2068;
		}
		BlockState Piston();
		bool Extended(BlockState Block);
		eBlockFace Facing(BlockState Block);
	}
	namespace PistonHead
	{
		enum class Type
		{
			Normal,
			Sticky,
		};
		constexpr BlockState PistonHead(const eBlockFace Facing, const bool Short, const enum Type Type)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Short)
					if (Type == Type::Normal) return 2069;
					else return 2070;
				else
					if (Type == Type::Normal) return 2071;
					else return 2072;
			else if (Facing == eBlockFace::BLOCK_FACE_XP)
				if (Short)
					if (Type == Type::Normal) return 2073;
					else return 2074;
				else
					if (Type == Type::Normal) return 2075;
					else return 2076;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Short)
					if (Type == Type::Normal) return 2077;
					else return 2078;
				else
					if (Type == Type::Normal) return 2079;
					else return 2080;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Short)
					if (Type == Type::Normal) return 2081;
					else return 2082;
				else
					if (Type == Type::Normal) return 2083;
					else return 2084;
			else if (Facing == eBlockFace::BLOCK_FACE_YP)
				if (Short)
					if (Type == Type::Normal) return 2085;
					else return 2086;
				else
					if (Type == Type::Normal) return 2087;
					else return 2088;
			else
				if (Short)
					if (Type == Type::Normal) return 2089;
					else return 2090;
				else
					if (Type == Type::Normal) return 2091;
					else return 2092;
		}
		BlockState PistonHead();
		eBlockFace Facing(BlockState Block);
		bool Short(BlockState Block);
		enum Type Type(BlockState Block);
	}
	namespace PitcherCrop
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		constexpr BlockState PitcherCrop(const unsigned char Age, const enum Half Half)
		{
			if (Age == 0)
				if (Half == Half::Upper) return 13520;
				else return 13521;
			else if (Age == 1)
				if (Half == Half::Upper) return 13522;
				else return 13523;
			else if (Age == 2)
				if (Half == Half::Upper) return 13524;
				else return 13525;
			else if (Age == 3)
				if (Half == Half::Upper) return 13526;
				else return 13527;
			else
				if (Half == Half::Upper) return 13528;
				else return 13529;
		}
		BlockState PitcherCrop();
		unsigned char Age(BlockState Block);
		enum Half Half(BlockState Block);
	}
	namespace PitcherPlant
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		constexpr BlockState PitcherPlant(const enum Half Half)
		{
			if (Half == Half::Upper) return 13530;
			else return 13531;
		}
		BlockState PitcherPlant();
		enum Half Half(BlockState Block);
	}
	namespace PlayerHead
	{
		constexpr BlockState PlayerHead(const bool Powered, const unsigned char Rotation)
		{
			if (Powered)
				if (Rotation == 0) return 9756;
				else if (Rotation == 1) return 9757;
				else if (Rotation == 2) return 9758;
				else if (Rotation == 3) return 9759;
				else if (Rotation == 4) return 9760;
				else if (Rotation == 5) return 9761;
				else if (Rotation == 6) return 9762;
				else if (Rotation == 7) return 9763;
				else if (Rotation == 8) return 9764;
				else if (Rotation == 9) return 9765;
				else if (Rotation == 10) return 9766;
				else if (Rotation == 11) return 9767;
				else if (Rotation == 12) return 9768;
				else if (Rotation == 13) return 9769;
				else if (Rotation == 14) return 9770;
				else return 9771;
			else
				if (Rotation == 0) return 9772;
				else if (Rotation == 1) return 9773;
				else if (Rotation == 2) return 9774;
				else if (Rotation == 3) return 9775;
				else if (Rotation == 4) return 9776;
				else if (Rotation == 5) return 9777;
				else if (Rotation == 6) return 9778;
				else if (Rotation == 7) return 9779;
				else if (Rotation == 8) return 9780;
				else if (Rotation == 9) return 9781;
				else if (Rotation == 10) return 9782;
				else if (Rotation == 11) return 9783;
				else if (Rotation == 12) return 9784;
				else if (Rotation == 13) return 9785;
				else if (Rotation == 14) return 9786;
				else return 9787;
		}
		BlockState PlayerHead();
		bool Powered(BlockState Block);
		unsigned char Rotation(BlockState Block);
	}
	namespace PlayerWallHead
	{
		constexpr BlockState PlayerWallHead(const eBlockFace Facing, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Powered) return 9788;
				else return 9789;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Powered) return 9790;
				else return 9791;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Powered) return 9792;
				else return 9793;
			else
				if (Powered) return 9794;
				else return 9795;
		}
		BlockState PlayerWallHead();
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace Podzol
	{
		constexpr BlockState Podzol(const bool Snowy)
		{
			if (Snowy) return 12;
			else return 13;
		}
		BlockState Podzol();
		bool Snowy(BlockState Block);
	}
	namespace PointedDripstone
	{
		enum class Thickness
		{
			TipMerge,
			Tip,
			Frustum,
			Middle,
			Base,
		};
		enum class VerticalDirection
		{
			Up,
			Down,
		};
		constexpr BlockState PointedDripstone(const enum Thickness Thickness, const enum VerticalDirection VerticalDirection, const bool Waterlogged)
		{
			if (Thickness == Thickness::TipMerge)
				if (VerticalDirection == VerticalDirection::Up)
					if (Waterlogged) return 25808;
					else return 25809;
				else
					if (Waterlogged) return 25810;
					else return 25811;
			else if (Thickness == Thickness::Tip)
				if (VerticalDirection == VerticalDirection::Up)
					if (Waterlogged) return 25812;
					else return 25813;
				else
					if (Waterlogged) return 25814;
					else return 25815;
			else if (Thickness == Thickness::Frustum)
				if (VerticalDirection == VerticalDirection::Up)
					if (Waterlogged) return 25816;
					else return 25817;
				else
					if (Waterlogged) return 25818;
					else return 25819;
			else if (Thickness == Thickness::Middle)
				if (VerticalDirection == VerticalDirection::Up)
					if (Waterlogged) return 25820;
					else return 25821;
				else
					if (Waterlogged) return 25822;
					else return 25823;
			else
				if (VerticalDirection == VerticalDirection::Up)
					if (Waterlogged) return 25824;
					else return 25825;
				else
					if (Waterlogged) return 25826;
					else return 25827;
		}
		BlockState PointedDripstone();
		enum Thickness Thickness(BlockState Block);
		enum VerticalDirection VerticalDirection(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedAndesite
	{
		constexpr BlockState PolishedAndesite()
		{
			return 7;
		}
	}
	namespace PolishedAndesiteSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState PolishedAndesiteSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 15203;
				else return 15204;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 15205;
				else return 15206;
			else
				if (Waterlogged) return 15207;
				else return 15208;
		}
		BlockState PolishedAndesiteSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedAndesiteStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState PolishedAndesiteStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14977;
						else return 14978;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14979;
						else return 14980;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14981;
						else return 14982;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14983;
						else return 14984;
					else
						if (Waterlogged) return 14985;
						else return 14986;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14987;
						else return 14988;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14989;
						else return 14990;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14991;
						else return 14992;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14993;
						else return 14994;
					else
						if (Waterlogged) return 14995;
						else return 14996;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14997;
						else return 14998;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14999;
						else return 15000;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 15001;
						else return 15002;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 15003;
						else return 15004;
					else
						if (Waterlogged) return 15005;
						else return 15006;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 15007;
						else return 15008;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 15009;
						else return 15010;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 15011;
						else return 15012;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 15013;
						else return 15014;
					else
						if (Waterlogged) return 15015;
						else return 15016;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 15017;
						else return 15018;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 15019;
						else return 15020;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 15021;
						else return 15022;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 15023;
						else return 15024;
					else
						if (Waterlogged) return 15025;
						else return 15026;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 15027;
						else return 15028;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 15029;
						else return 15030;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 15031;
						else return 15032;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 15033;
						else return 15034;
					else
						if (Waterlogged) return 15035;
						else return 15036;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 15037;
						else return 15038;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 15039;
						else return 15040;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 15041;
						else return 15042;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 15043;
						else return 15044;
					else
						if (Waterlogged) return 15045;
						else return 15046;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 15047;
						else return 15048;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 15049;
						else return 15050;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 15051;
						else return 15052;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 15053;
						else return 15054;
					else
						if (Waterlogged) return 15055;
						else return 15056;
		}
		BlockState PolishedAndesiteStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedBasalt
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState PolishedBasalt(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 6034;
			else if (Axis == Axis::Y) return 6035;
			else return 6036;
		}
		BlockState PolishedBasalt();
		enum Axis Axis(BlockState Block);
	}
	namespace PolishedBlackstone
	{
		constexpr BlockState PolishedBlackstone()
		{
			return 20931;
		}
	}
	namespace PolishedBlackstoneBrickSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState PolishedBlackstoneBrickSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 20935;
				else return 20936;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 20937;
				else return 20938;
			else
				if (Waterlogged) return 20939;
				else return 20940;
		}
		BlockState PolishedBlackstoneBrickSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedBlackstoneBrickStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState PolishedBlackstoneBrickStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20941;
						else return 20942;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20943;
						else return 20944;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20945;
						else return 20946;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20947;
						else return 20948;
					else
						if (Waterlogged) return 20949;
						else return 20950;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20951;
						else return 20952;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20953;
						else return 20954;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20955;
						else return 20956;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20957;
						else return 20958;
					else
						if (Waterlogged) return 20959;
						else return 20960;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20961;
						else return 20962;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20963;
						else return 20964;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20965;
						else return 20966;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20967;
						else return 20968;
					else
						if (Waterlogged) return 20969;
						else return 20970;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20971;
						else return 20972;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20973;
						else return 20974;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20975;
						else return 20976;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20977;
						else return 20978;
					else
						if (Waterlogged) return 20979;
						else return 20980;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20981;
						else return 20982;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20983;
						else return 20984;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20985;
						else return 20986;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20987;
						else return 20988;
					else
						if (Waterlogged) return 20989;
						else return 20990;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20991;
						else return 20992;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20993;
						else return 20994;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20995;
						else return 20996;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20997;
						else return 20998;
					else
						if (Waterlogged) return 20999;
						else return 21000;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21001;
						else return 21002;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21003;
						else return 21004;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21005;
						else return 21006;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21007;
						else return 21008;
					else
						if (Waterlogged) return 21009;
						else return 21010;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21011;
						else return 21012;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21013;
						else return 21014;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21015;
						else return 21016;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21017;
						else return 21018;
					else
						if (Waterlogged) return 21019;
						else return 21020;
		}
		BlockState PolishedBlackstoneBrickStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedBlackstoneBrickWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState PolishedBlackstoneBrickWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21021;
								else if (West == West::Low) return 21022;
								else return 21023;
							else
								if (West == West::None) return 21024;
								else if (West == West::Low) return 21025;
								else return 21026;
						else
							if (Waterlogged)
								if (West == West::None) return 21027;
								else if (West == West::Low) return 21028;
								else return 21029;
							else
								if (West == West::None) return 21030;
								else if (West == West::Low) return 21031;
								else return 21032;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21033;
								else if (West == West::Low) return 21034;
								else return 21035;
							else
								if (West == West::None) return 21036;
								else if (West == West::Low) return 21037;
								else return 21038;
						else
							if (Waterlogged)
								if (West == West::None) return 21039;
								else if (West == West::Low) return 21040;
								else return 21041;
							else
								if (West == West::None) return 21042;
								else if (West == West::Low) return 21043;
								else return 21044;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21045;
								else if (West == West::Low) return 21046;
								else return 21047;
							else
								if (West == West::None) return 21048;
								else if (West == West::Low) return 21049;
								else return 21050;
						else
							if (Waterlogged)
								if (West == West::None) return 21051;
								else if (West == West::Low) return 21052;
								else return 21053;
							else
								if (West == West::None) return 21054;
								else if (West == West::Low) return 21055;
								else return 21056;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21057;
								else if (West == West::Low) return 21058;
								else return 21059;
							else
								if (West == West::None) return 21060;
								else if (West == West::Low) return 21061;
								else return 21062;
						else
							if (Waterlogged)
								if (West == West::None) return 21063;
								else if (West == West::Low) return 21064;
								else return 21065;
							else
								if (West == West::None) return 21066;
								else if (West == West::Low) return 21067;
								else return 21068;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21069;
								else if (West == West::Low) return 21070;
								else return 21071;
							else
								if (West == West::None) return 21072;
								else if (West == West::Low) return 21073;
								else return 21074;
						else
							if (Waterlogged)
								if (West == West::None) return 21075;
								else if (West == West::Low) return 21076;
								else return 21077;
							else
								if (West == West::None) return 21078;
								else if (West == West::Low) return 21079;
								else return 21080;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21081;
								else if (West == West::Low) return 21082;
								else return 21083;
							else
								if (West == West::None) return 21084;
								else if (West == West::Low) return 21085;
								else return 21086;
						else
							if (Waterlogged)
								if (West == West::None) return 21087;
								else if (West == West::Low) return 21088;
								else return 21089;
							else
								if (West == West::None) return 21090;
								else if (West == West::Low) return 21091;
								else return 21092;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21093;
								else if (West == West::Low) return 21094;
								else return 21095;
							else
								if (West == West::None) return 21096;
								else if (West == West::Low) return 21097;
								else return 21098;
						else
							if (Waterlogged)
								if (West == West::None) return 21099;
								else if (West == West::Low) return 21100;
								else return 21101;
							else
								if (West == West::None) return 21102;
								else if (West == West::Low) return 21103;
								else return 21104;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21105;
								else if (West == West::Low) return 21106;
								else return 21107;
							else
								if (West == West::None) return 21108;
								else if (West == West::Low) return 21109;
								else return 21110;
						else
							if (Waterlogged)
								if (West == West::None) return 21111;
								else if (West == West::Low) return 21112;
								else return 21113;
							else
								if (West == West::None) return 21114;
								else if (West == West::Low) return 21115;
								else return 21116;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21117;
								else if (West == West::Low) return 21118;
								else return 21119;
							else
								if (West == West::None) return 21120;
								else if (West == West::Low) return 21121;
								else return 21122;
						else
							if (Waterlogged)
								if (West == West::None) return 21123;
								else if (West == West::Low) return 21124;
								else return 21125;
							else
								if (West == West::None) return 21126;
								else if (West == West::Low) return 21127;
								else return 21128;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21129;
								else if (West == West::Low) return 21130;
								else return 21131;
							else
								if (West == West::None) return 21132;
								else if (West == West::Low) return 21133;
								else return 21134;
						else
							if (Waterlogged)
								if (West == West::None) return 21135;
								else if (West == West::Low) return 21136;
								else return 21137;
							else
								if (West == West::None) return 21138;
								else if (West == West::Low) return 21139;
								else return 21140;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21141;
								else if (West == West::Low) return 21142;
								else return 21143;
							else
								if (West == West::None) return 21144;
								else if (West == West::Low) return 21145;
								else return 21146;
						else
							if (Waterlogged)
								if (West == West::None) return 21147;
								else if (West == West::Low) return 21148;
								else return 21149;
							else
								if (West == West::None) return 21150;
								else if (West == West::Low) return 21151;
								else return 21152;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21153;
								else if (West == West::Low) return 21154;
								else return 21155;
							else
								if (West == West::None) return 21156;
								else if (West == West::Low) return 21157;
								else return 21158;
						else
							if (Waterlogged)
								if (West == West::None) return 21159;
								else if (West == West::Low) return 21160;
								else return 21161;
							else
								if (West == West::None) return 21162;
								else if (West == West::Low) return 21163;
								else return 21164;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21165;
								else if (West == West::Low) return 21166;
								else return 21167;
							else
								if (West == West::None) return 21168;
								else if (West == West::Low) return 21169;
								else return 21170;
						else
							if (Waterlogged)
								if (West == West::None) return 21171;
								else if (West == West::Low) return 21172;
								else return 21173;
							else
								if (West == West::None) return 21174;
								else if (West == West::Low) return 21175;
								else return 21176;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21177;
								else if (West == West::Low) return 21178;
								else return 21179;
							else
								if (West == West::None) return 21180;
								else if (West == West::Low) return 21181;
								else return 21182;
						else
							if (Waterlogged)
								if (West == West::None) return 21183;
								else if (West == West::Low) return 21184;
								else return 21185;
							else
								if (West == West::None) return 21186;
								else if (West == West::Low) return 21187;
								else return 21188;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21189;
								else if (West == West::Low) return 21190;
								else return 21191;
							else
								if (West == West::None) return 21192;
								else if (West == West::Low) return 21193;
								else return 21194;
						else
							if (Waterlogged)
								if (West == West::None) return 21195;
								else if (West == West::Low) return 21196;
								else return 21197;
							else
								if (West == West::None) return 21198;
								else if (West == West::Low) return 21199;
								else return 21200;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21201;
								else if (West == West::Low) return 21202;
								else return 21203;
							else
								if (West == West::None) return 21204;
								else if (West == West::Low) return 21205;
								else return 21206;
						else
							if (Waterlogged)
								if (West == West::None) return 21207;
								else if (West == West::Low) return 21208;
								else return 21209;
							else
								if (West == West::None) return 21210;
								else if (West == West::Low) return 21211;
								else return 21212;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21213;
								else if (West == West::Low) return 21214;
								else return 21215;
							else
								if (West == West::None) return 21216;
								else if (West == West::Low) return 21217;
								else return 21218;
						else
							if (Waterlogged)
								if (West == West::None) return 21219;
								else if (West == West::Low) return 21220;
								else return 21221;
							else
								if (West == West::None) return 21222;
								else if (West == West::Low) return 21223;
								else return 21224;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21225;
								else if (West == West::Low) return 21226;
								else return 21227;
							else
								if (West == West::None) return 21228;
								else if (West == West::Low) return 21229;
								else return 21230;
						else
							if (Waterlogged)
								if (West == West::None) return 21231;
								else if (West == West::Low) return 21232;
								else return 21233;
							else
								if (West == West::None) return 21234;
								else if (West == West::Low) return 21235;
								else return 21236;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21237;
								else if (West == West::Low) return 21238;
								else return 21239;
							else
								if (West == West::None) return 21240;
								else if (West == West::Low) return 21241;
								else return 21242;
						else
							if (Waterlogged)
								if (West == West::None) return 21243;
								else if (West == West::Low) return 21244;
								else return 21245;
							else
								if (West == West::None) return 21246;
								else if (West == West::Low) return 21247;
								else return 21248;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21249;
								else if (West == West::Low) return 21250;
								else return 21251;
							else
								if (West == West::None) return 21252;
								else if (West == West::Low) return 21253;
								else return 21254;
						else
							if (Waterlogged)
								if (West == West::None) return 21255;
								else if (West == West::Low) return 21256;
								else return 21257;
							else
								if (West == West::None) return 21258;
								else if (West == West::Low) return 21259;
								else return 21260;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21261;
								else if (West == West::Low) return 21262;
								else return 21263;
							else
								if (West == West::None) return 21264;
								else if (West == West::Low) return 21265;
								else return 21266;
						else
							if (Waterlogged)
								if (West == West::None) return 21267;
								else if (West == West::Low) return 21268;
								else return 21269;
							else
								if (West == West::None) return 21270;
								else if (West == West::Low) return 21271;
								else return 21272;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21273;
								else if (West == West::Low) return 21274;
								else return 21275;
							else
								if (West == West::None) return 21276;
								else if (West == West::Low) return 21277;
								else return 21278;
						else
							if (Waterlogged)
								if (West == West::None) return 21279;
								else if (West == West::Low) return 21280;
								else return 21281;
							else
								if (West == West::None) return 21282;
								else if (West == West::Low) return 21283;
								else return 21284;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21285;
								else if (West == West::Low) return 21286;
								else return 21287;
							else
								if (West == West::None) return 21288;
								else if (West == West::Low) return 21289;
								else return 21290;
						else
							if (Waterlogged)
								if (West == West::None) return 21291;
								else if (West == West::Low) return 21292;
								else return 21293;
							else
								if (West == West::None) return 21294;
								else if (West == West::Low) return 21295;
								else return 21296;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21297;
								else if (West == West::Low) return 21298;
								else return 21299;
							else
								if (West == West::None) return 21300;
								else if (West == West::Low) return 21301;
								else return 21302;
						else
							if (Waterlogged)
								if (West == West::None) return 21303;
								else if (West == West::Low) return 21304;
								else return 21305;
							else
								if (West == West::None) return 21306;
								else if (West == West::Low) return 21307;
								else return 21308;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21309;
								else if (West == West::Low) return 21310;
								else return 21311;
							else
								if (West == West::None) return 21312;
								else if (West == West::Low) return 21313;
								else return 21314;
						else
							if (Waterlogged)
								if (West == West::None) return 21315;
								else if (West == West::Low) return 21316;
								else return 21317;
							else
								if (West == West::None) return 21318;
								else if (West == West::Low) return 21319;
								else return 21320;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21321;
								else if (West == West::Low) return 21322;
								else return 21323;
							else
								if (West == West::None) return 21324;
								else if (West == West::Low) return 21325;
								else return 21326;
						else
							if (Waterlogged)
								if (West == West::None) return 21327;
								else if (West == West::Low) return 21328;
								else return 21329;
							else
								if (West == West::None) return 21330;
								else if (West == West::Low) return 21331;
								else return 21332;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21333;
								else if (West == West::Low) return 21334;
								else return 21335;
							else
								if (West == West::None) return 21336;
								else if (West == West::Low) return 21337;
								else return 21338;
						else
							if (Waterlogged)
								if (West == West::None) return 21339;
								else if (West == West::Low) return 21340;
								else return 21341;
							else
								if (West == West::None) return 21342;
								else if (West == West::Low) return 21343;
								else return 21344;
		}
		BlockState PolishedBlackstoneBrickWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace PolishedBlackstoneBricks
	{
		constexpr BlockState PolishedBlackstoneBricks()
		{
			return 20932;
		}
	}
	namespace PolishedBlackstoneButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState PolishedBlackstoneButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 21434;
					else return 21435;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 21436;
					else return 21437;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 21438;
					else return 21439;
				else
					if (Powered) return 21440;
					else return 21441;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 21442;
					else return 21443;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 21444;
					else return 21445;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 21446;
					else return 21447;
				else
					if (Powered) return 21448;
					else return 21449;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 21450;
					else return 21451;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 21452;
					else return 21453;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 21454;
					else return 21455;
				else
					if (Powered) return 21456;
					else return 21457;
		}
		BlockState PolishedBlackstoneButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace PolishedBlackstonePressurePlate
	{
		constexpr BlockState PolishedBlackstonePressurePlate(const bool Powered)
		{
			if (Powered) return 21432;
			else return 21433;
		}
		BlockState PolishedBlackstonePressurePlate();
		bool Powered(BlockState Block);
	}
	namespace PolishedBlackstoneSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState PolishedBlackstoneSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 21426;
				else return 21427;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 21428;
				else return 21429;
			else
				if (Waterlogged) return 21430;
				else return 21431;
		}
		BlockState PolishedBlackstoneSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedBlackstoneStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState PolishedBlackstoneStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21346;
						else return 21347;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21348;
						else return 21349;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21350;
						else return 21351;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21352;
						else return 21353;
					else
						if (Waterlogged) return 21354;
						else return 21355;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21356;
						else return 21357;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21358;
						else return 21359;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21360;
						else return 21361;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21362;
						else return 21363;
					else
						if (Waterlogged) return 21364;
						else return 21365;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21366;
						else return 21367;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21368;
						else return 21369;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21370;
						else return 21371;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21372;
						else return 21373;
					else
						if (Waterlogged) return 21374;
						else return 21375;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21376;
						else return 21377;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21378;
						else return 21379;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21380;
						else return 21381;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21382;
						else return 21383;
					else
						if (Waterlogged) return 21384;
						else return 21385;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21386;
						else return 21387;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21388;
						else return 21389;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21390;
						else return 21391;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21392;
						else return 21393;
					else
						if (Waterlogged) return 21394;
						else return 21395;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21396;
						else return 21397;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21398;
						else return 21399;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21400;
						else return 21401;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21402;
						else return 21403;
					else
						if (Waterlogged) return 21404;
						else return 21405;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21406;
						else return 21407;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21408;
						else return 21409;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21410;
						else return 21411;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21412;
						else return 21413;
					else
						if (Waterlogged) return 21414;
						else return 21415;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21416;
						else return 21417;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21418;
						else return 21419;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21420;
						else return 21421;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21422;
						else return 21423;
					else
						if (Waterlogged) return 21424;
						else return 21425;
		}
		BlockState PolishedBlackstoneStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedBlackstoneWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState PolishedBlackstoneWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21458;
								else if (West == West::Low) return 21459;
								else return 21460;
							else
								if (West == West::None) return 21461;
								else if (West == West::Low) return 21462;
								else return 21463;
						else
							if (Waterlogged)
								if (West == West::None) return 21464;
								else if (West == West::Low) return 21465;
								else return 21466;
							else
								if (West == West::None) return 21467;
								else if (West == West::Low) return 21468;
								else return 21469;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21470;
								else if (West == West::Low) return 21471;
								else return 21472;
							else
								if (West == West::None) return 21473;
								else if (West == West::Low) return 21474;
								else return 21475;
						else
							if (Waterlogged)
								if (West == West::None) return 21476;
								else if (West == West::Low) return 21477;
								else return 21478;
							else
								if (West == West::None) return 21479;
								else if (West == West::Low) return 21480;
								else return 21481;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21482;
								else if (West == West::Low) return 21483;
								else return 21484;
							else
								if (West == West::None) return 21485;
								else if (West == West::Low) return 21486;
								else return 21487;
						else
							if (Waterlogged)
								if (West == West::None) return 21488;
								else if (West == West::Low) return 21489;
								else return 21490;
							else
								if (West == West::None) return 21491;
								else if (West == West::Low) return 21492;
								else return 21493;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21494;
								else if (West == West::Low) return 21495;
								else return 21496;
							else
								if (West == West::None) return 21497;
								else if (West == West::Low) return 21498;
								else return 21499;
						else
							if (Waterlogged)
								if (West == West::None) return 21500;
								else if (West == West::Low) return 21501;
								else return 21502;
							else
								if (West == West::None) return 21503;
								else if (West == West::Low) return 21504;
								else return 21505;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21506;
								else if (West == West::Low) return 21507;
								else return 21508;
							else
								if (West == West::None) return 21509;
								else if (West == West::Low) return 21510;
								else return 21511;
						else
							if (Waterlogged)
								if (West == West::None) return 21512;
								else if (West == West::Low) return 21513;
								else return 21514;
							else
								if (West == West::None) return 21515;
								else if (West == West::Low) return 21516;
								else return 21517;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21518;
								else if (West == West::Low) return 21519;
								else return 21520;
							else
								if (West == West::None) return 21521;
								else if (West == West::Low) return 21522;
								else return 21523;
						else
							if (Waterlogged)
								if (West == West::None) return 21524;
								else if (West == West::Low) return 21525;
								else return 21526;
							else
								if (West == West::None) return 21527;
								else if (West == West::Low) return 21528;
								else return 21529;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21530;
								else if (West == West::Low) return 21531;
								else return 21532;
							else
								if (West == West::None) return 21533;
								else if (West == West::Low) return 21534;
								else return 21535;
						else
							if (Waterlogged)
								if (West == West::None) return 21536;
								else if (West == West::Low) return 21537;
								else return 21538;
							else
								if (West == West::None) return 21539;
								else if (West == West::Low) return 21540;
								else return 21541;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21542;
								else if (West == West::Low) return 21543;
								else return 21544;
							else
								if (West == West::None) return 21545;
								else if (West == West::Low) return 21546;
								else return 21547;
						else
							if (Waterlogged)
								if (West == West::None) return 21548;
								else if (West == West::Low) return 21549;
								else return 21550;
							else
								if (West == West::None) return 21551;
								else if (West == West::Low) return 21552;
								else return 21553;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21554;
								else if (West == West::Low) return 21555;
								else return 21556;
							else
								if (West == West::None) return 21557;
								else if (West == West::Low) return 21558;
								else return 21559;
						else
							if (Waterlogged)
								if (West == West::None) return 21560;
								else if (West == West::Low) return 21561;
								else return 21562;
							else
								if (West == West::None) return 21563;
								else if (West == West::Low) return 21564;
								else return 21565;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21566;
								else if (West == West::Low) return 21567;
								else return 21568;
							else
								if (West == West::None) return 21569;
								else if (West == West::Low) return 21570;
								else return 21571;
						else
							if (Waterlogged)
								if (West == West::None) return 21572;
								else if (West == West::Low) return 21573;
								else return 21574;
							else
								if (West == West::None) return 21575;
								else if (West == West::Low) return 21576;
								else return 21577;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21578;
								else if (West == West::Low) return 21579;
								else return 21580;
							else
								if (West == West::None) return 21581;
								else if (West == West::Low) return 21582;
								else return 21583;
						else
							if (Waterlogged)
								if (West == West::None) return 21584;
								else if (West == West::Low) return 21585;
								else return 21586;
							else
								if (West == West::None) return 21587;
								else if (West == West::Low) return 21588;
								else return 21589;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21590;
								else if (West == West::Low) return 21591;
								else return 21592;
							else
								if (West == West::None) return 21593;
								else if (West == West::Low) return 21594;
								else return 21595;
						else
							if (Waterlogged)
								if (West == West::None) return 21596;
								else if (West == West::Low) return 21597;
								else return 21598;
							else
								if (West == West::None) return 21599;
								else if (West == West::Low) return 21600;
								else return 21601;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21602;
								else if (West == West::Low) return 21603;
								else return 21604;
							else
								if (West == West::None) return 21605;
								else if (West == West::Low) return 21606;
								else return 21607;
						else
							if (Waterlogged)
								if (West == West::None) return 21608;
								else if (West == West::Low) return 21609;
								else return 21610;
							else
								if (West == West::None) return 21611;
								else if (West == West::Low) return 21612;
								else return 21613;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21614;
								else if (West == West::Low) return 21615;
								else return 21616;
							else
								if (West == West::None) return 21617;
								else if (West == West::Low) return 21618;
								else return 21619;
						else
							if (Waterlogged)
								if (West == West::None) return 21620;
								else if (West == West::Low) return 21621;
								else return 21622;
							else
								if (West == West::None) return 21623;
								else if (West == West::Low) return 21624;
								else return 21625;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21626;
								else if (West == West::Low) return 21627;
								else return 21628;
							else
								if (West == West::None) return 21629;
								else if (West == West::Low) return 21630;
								else return 21631;
						else
							if (Waterlogged)
								if (West == West::None) return 21632;
								else if (West == West::Low) return 21633;
								else return 21634;
							else
								if (West == West::None) return 21635;
								else if (West == West::Low) return 21636;
								else return 21637;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21638;
								else if (West == West::Low) return 21639;
								else return 21640;
							else
								if (West == West::None) return 21641;
								else if (West == West::Low) return 21642;
								else return 21643;
						else
							if (Waterlogged)
								if (West == West::None) return 21644;
								else if (West == West::Low) return 21645;
								else return 21646;
							else
								if (West == West::None) return 21647;
								else if (West == West::Low) return 21648;
								else return 21649;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21650;
								else if (West == West::Low) return 21651;
								else return 21652;
							else
								if (West == West::None) return 21653;
								else if (West == West::Low) return 21654;
								else return 21655;
						else
							if (Waterlogged)
								if (West == West::None) return 21656;
								else if (West == West::Low) return 21657;
								else return 21658;
							else
								if (West == West::None) return 21659;
								else if (West == West::Low) return 21660;
								else return 21661;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21662;
								else if (West == West::Low) return 21663;
								else return 21664;
							else
								if (West == West::None) return 21665;
								else if (West == West::Low) return 21666;
								else return 21667;
						else
							if (Waterlogged)
								if (West == West::None) return 21668;
								else if (West == West::Low) return 21669;
								else return 21670;
							else
								if (West == West::None) return 21671;
								else if (West == West::Low) return 21672;
								else return 21673;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21674;
								else if (West == West::Low) return 21675;
								else return 21676;
							else
								if (West == West::None) return 21677;
								else if (West == West::Low) return 21678;
								else return 21679;
						else
							if (Waterlogged)
								if (West == West::None) return 21680;
								else if (West == West::Low) return 21681;
								else return 21682;
							else
								if (West == West::None) return 21683;
								else if (West == West::Low) return 21684;
								else return 21685;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21686;
								else if (West == West::Low) return 21687;
								else return 21688;
							else
								if (West == West::None) return 21689;
								else if (West == West::Low) return 21690;
								else return 21691;
						else
							if (Waterlogged)
								if (West == West::None) return 21692;
								else if (West == West::Low) return 21693;
								else return 21694;
							else
								if (West == West::None) return 21695;
								else if (West == West::Low) return 21696;
								else return 21697;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21698;
								else if (West == West::Low) return 21699;
								else return 21700;
							else
								if (West == West::None) return 21701;
								else if (West == West::Low) return 21702;
								else return 21703;
						else
							if (Waterlogged)
								if (West == West::None) return 21704;
								else if (West == West::Low) return 21705;
								else return 21706;
							else
								if (West == West::None) return 21707;
								else if (West == West::Low) return 21708;
								else return 21709;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21710;
								else if (West == West::Low) return 21711;
								else return 21712;
							else
								if (West == West::None) return 21713;
								else if (West == West::Low) return 21714;
								else return 21715;
						else
							if (Waterlogged)
								if (West == West::None) return 21716;
								else if (West == West::Low) return 21717;
								else return 21718;
							else
								if (West == West::None) return 21719;
								else if (West == West::Low) return 21720;
								else return 21721;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21722;
								else if (West == West::Low) return 21723;
								else return 21724;
							else
								if (West == West::None) return 21725;
								else if (West == West::Low) return 21726;
								else return 21727;
						else
							if (Waterlogged)
								if (West == West::None) return 21728;
								else if (West == West::Low) return 21729;
								else return 21730;
							else
								if (West == West::None) return 21731;
								else if (West == West::Low) return 21732;
								else return 21733;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21734;
								else if (West == West::Low) return 21735;
								else return 21736;
							else
								if (West == West::None) return 21737;
								else if (West == West::Low) return 21738;
								else return 21739;
						else
							if (Waterlogged)
								if (West == West::None) return 21740;
								else if (West == West::Low) return 21741;
								else return 21742;
							else
								if (West == West::None) return 21743;
								else if (West == West::Low) return 21744;
								else return 21745;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21746;
								else if (West == West::Low) return 21747;
								else return 21748;
							else
								if (West == West::None) return 21749;
								else if (West == West::Low) return 21750;
								else return 21751;
						else
							if (Waterlogged)
								if (West == West::None) return 21752;
								else if (West == West::Low) return 21753;
								else return 21754;
							else
								if (West == West::None) return 21755;
								else if (West == West::Low) return 21756;
								else return 21757;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21758;
								else if (West == West::Low) return 21759;
								else return 21760;
							else
								if (West == West::None) return 21761;
								else if (West == West::Low) return 21762;
								else return 21763;
						else
							if (Waterlogged)
								if (West == West::None) return 21764;
								else if (West == West::Low) return 21765;
								else return 21766;
							else
								if (West == West::None) return 21767;
								else if (West == West::Low) return 21768;
								else return 21769;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21770;
								else if (West == West::Low) return 21771;
								else return 21772;
							else
								if (West == West::None) return 21773;
								else if (West == West::Low) return 21774;
								else return 21775;
						else
							if (Waterlogged)
								if (West == West::None) return 21776;
								else if (West == West::Low) return 21777;
								else return 21778;
							else
								if (West == West::None) return 21779;
								else if (West == West::Low) return 21780;
								else return 21781;
		}
		BlockState PolishedBlackstoneWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace PolishedDeepslate
	{
		constexpr BlockState PolishedDeepslate()
		{
			return 26410;
		}
	}
	namespace PolishedDeepslateSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState PolishedDeepslateSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 26491;
				else return 26492;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 26493;
				else return 26494;
			else
				if (Waterlogged) return 26495;
				else return 26496;
		}
		BlockState PolishedDeepslateSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedDeepslateStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState PolishedDeepslateStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26411;
						else return 26412;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26413;
						else return 26414;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26415;
						else return 26416;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26417;
						else return 26418;
					else
						if (Waterlogged) return 26419;
						else return 26420;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26421;
						else return 26422;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26423;
						else return 26424;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26425;
						else return 26426;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26427;
						else return 26428;
					else
						if (Waterlogged) return 26429;
						else return 26430;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26431;
						else return 26432;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26433;
						else return 26434;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26435;
						else return 26436;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26437;
						else return 26438;
					else
						if (Waterlogged) return 26439;
						else return 26440;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26441;
						else return 26442;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26443;
						else return 26444;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26445;
						else return 26446;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26447;
						else return 26448;
					else
						if (Waterlogged) return 26449;
						else return 26450;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26451;
						else return 26452;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26453;
						else return 26454;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26455;
						else return 26456;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26457;
						else return 26458;
					else
						if (Waterlogged) return 26459;
						else return 26460;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26461;
						else return 26462;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26463;
						else return 26464;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26465;
						else return 26466;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26467;
						else return 26468;
					else
						if (Waterlogged) return 26469;
						else return 26470;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26471;
						else return 26472;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26473;
						else return 26474;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26475;
						else return 26476;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26477;
						else return 26478;
					else
						if (Waterlogged) return 26479;
						else return 26480;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26481;
						else return 26482;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26483;
						else return 26484;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26485;
						else return 26486;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26487;
						else return 26488;
					else
						if (Waterlogged) return 26489;
						else return 26490;
		}
		BlockState PolishedDeepslateStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedDeepslateWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState PolishedDeepslateWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26497;
								else if (West == West::Low) return 26498;
								else return 26499;
							else
								if (West == West::None) return 26500;
								else if (West == West::Low) return 26501;
								else return 26502;
						else
							if (Waterlogged)
								if (West == West::None) return 26503;
								else if (West == West::Low) return 26504;
								else return 26505;
							else
								if (West == West::None) return 26506;
								else if (West == West::Low) return 26507;
								else return 26508;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26509;
								else if (West == West::Low) return 26510;
								else return 26511;
							else
								if (West == West::None) return 26512;
								else if (West == West::Low) return 26513;
								else return 26514;
						else
							if (Waterlogged)
								if (West == West::None) return 26515;
								else if (West == West::Low) return 26516;
								else return 26517;
							else
								if (West == West::None) return 26518;
								else if (West == West::Low) return 26519;
								else return 26520;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26521;
								else if (West == West::Low) return 26522;
								else return 26523;
							else
								if (West == West::None) return 26524;
								else if (West == West::Low) return 26525;
								else return 26526;
						else
							if (Waterlogged)
								if (West == West::None) return 26527;
								else if (West == West::Low) return 26528;
								else return 26529;
							else
								if (West == West::None) return 26530;
								else if (West == West::Low) return 26531;
								else return 26532;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26533;
								else if (West == West::Low) return 26534;
								else return 26535;
							else
								if (West == West::None) return 26536;
								else if (West == West::Low) return 26537;
								else return 26538;
						else
							if (Waterlogged)
								if (West == West::None) return 26539;
								else if (West == West::Low) return 26540;
								else return 26541;
							else
								if (West == West::None) return 26542;
								else if (West == West::Low) return 26543;
								else return 26544;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26545;
								else if (West == West::Low) return 26546;
								else return 26547;
							else
								if (West == West::None) return 26548;
								else if (West == West::Low) return 26549;
								else return 26550;
						else
							if (Waterlogged)
								if (West == West::None) return 26551;
								else if (West == West::Low) return 26552;
								else return 26553;
							else
								if (West == West::None) return 26554;
								else if (West == West::Low) return 26555;
								else return 26556;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26557;
								else if (West == West::Low) return 26558;
								else return 26559;
							else
								if (West == West::None) return 26560;
								else if (West == West::Low) return 26561;
								else return 26562;
						else
							if (Waterlogged)
								if (West == West::None) return 26563;
								else if (West == West::Low) return 26564;
								else return 26565;
							else
								if (West == West::None) return 26566;
								else if (West == West::Low) return 26567;
								else return 26568;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26569;
								else if (West == West::Low) return 26570;
								else return 26571;
							else
								if (West == West::None) return 26572;
								else if (West == West::Low) return 26573;
								else return 26574;
						else
							if (Waterlogged)
								if (West == West::None) return 26575;
								else if (West == West::Low) return 26576;
								else return 26577;
							else
								if (West == West::None) return 26578;
								else if (West == West::Low) return 26579;
								else return 26580;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26581;
								else if (West == West::Low) return 26582;
								else return 26583;
							else
								if (West == West::None) return 26584;
								else if (West == West::Low) return 26585;
								else return 26586;
						else
							if (Waterlogged)
								if (West == West::None) return 26587;
								else if (West == West::Low) return 26588;
								else return 26589;
							else
								if (West == West::None) return 26590;
								else if (West == West::Low) return 26591;
								else return 26592;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26593;
								else if (West == West::Low) return 26594;
								else return 26595;
							else
								if (West == West::None) return 26596;
								else if (West == West::Low) return 26597;
								else return 26598;
						else
							if (Waterlogged)
								if (West == West::None) return 26599;
								else if (West == West::Low) return 26600;
								else return 26601;
							else
								if (West == West::None) return 26602;
								else if (West == West::Low) return 26603;
								else return 26604;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26605;
								else if (West == West::Low) return 26606;
								else return 26607;
							else
								if (West == West::None) return 26608;
								else if (West == West::Low) return 26609;
								else return 26610;
						else
							if (Waterlogged)
								if (West == West::None) return 26611;
								else if (West == West::Low) return 26612;
								else return 26613;
							else
								if (West == West::None) return 26614;
								else if (West == West::Low) return 26615;
								else return 26616;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26617;
								else if (West == West::Low) return 26618;
								else return 26619;
							else
								if (West == West::None) return 26620;
								else if (West == West::Low) return 26621;
								else return 26622;
						else
							if (Waterlogged)
								if (West == West::None) return 26623;
								else if (West == West::Low) return 26624;
								else return 26625;
							else
								if (West == West::None) return 26626;
								else if (West == West::Low) return 26627;
								else return 26628;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26629;
								else if (West == West::Low) return 26630;
								else return 26631;
							else
								if (West == West::None) return 26632;
								else if (West == West::Low) return 26633;
								else return 26634;
						else
							if (Waterlogged)
								if (West == West::None) return 26635;
								else if (West == West::Low) return 26636;
								else return 26637;
							else
								if (West == West::None) return 26638;
								else if (West == West::Low) return 26639;
								else return 26640;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26641;
								else if (West == West::Low) return 26642;
								else return 26643;
							else
								if (West == West::None) return 26644;
								else if (West == West::Low) return 26645;
								else return 26646;
						else
							if (Waterlogged)
								if (West == West::None) return 26647;
								else if (West == West::Low) return 26648;
								else return 26649;
							else
								if (West == West::None) return 26650;
								else if (West == West::Low) return 26651;
								else return 26652;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26653;
								else if (West == West::Low) return 26654;
								else return 26655;
							else
								if (West == West::None) return 26656;
								else if (West == West::Low) return 26657;
								else return 26658;
						else
							if (Waterlogged)
								if (West == West::None) return 26659;
								else if (West == West::Low) return 26660;
								else return 26661;
							else
								if (West == West::None) return 26662;
								else if (West == West::Low) return 26663;
								else return 26664;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26665;
								else if (West == West::Low) return 26666;
								else return 26667;
							else
								if (West == West::None) return 26668;
								else if (West == West::Low) return 26669;
								else return 26670;
						else
							if (Waterlogged)
								if (West == West::None) return 26671;
								else if (West == West::Low) return 26672;
								else return 26673;
							else
								if (West == West::None) return 26674;
								else if (West == West::Low) return 26675;
								else return 26676;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26677;
								else if (West == West::Low) return 26678;
								else return 26679;
							else
								if (West == West::None) return 26680;
								else if (West == West::Low) return 26681;
								else return 26682;
						else
							if (Waterlogged)
								if (West == West::None) return 26683;
								else if (West == West::Low) return 26684;
								else return 26685;
							else
								if (West == West::None) return 26686;
								else if (West == West::Low) return 26687;
								else return 26688;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26689;
								else if (West == West::Low) return 26690;
								else return 26691;
							else
								if (West == West::None) return 26692;
								else if (West == West::Low) return 26693;
								else return 26694;
						else
							if (Waterlogged)
								if (West == West::None) return 26695;
								else if (West == West::Low) return 26696;
								else return 26697;
							else
								if (West == West::None) return 26698;
								else if (West == West::Low) return 26699;
								else return 26700;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26701;
								else if (West == West::Low) return 26702;
								else return 26703;
							else
								if (West == West::None) return 26704;
								else if (West == West::Low) return 26705;
								else return 26706;
						else
							if (Waterlogged)
								if (West == West::None) return 26707;
								else if (West == West::Low) return 26708;
								else return 26709;
							else
								if (West == West::None) return 26710;
								else if (West == West::Low) return 26711;
								else return 26712;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26713;
								else if (West == West::Low) return 26714;
								else return 26715;
							else
								if (West == West::None) return 26716;
								else if (West == West::Low) return 26717;
								else return 26718;
						else
							if (Waterlogged)
								if (West == West::None) return 26719;
								else if (West == West::Low) return 26720;
								else return 26721;
							else
								if (West == West::None) return 26722;
								else if (West == West::Low) return 26723;
								else return 26724;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26725;
								else if (West == West::Low) return 26726;
								else return 26727;
							else
								if (West == West::None) return 26728;
								else if (West == West::Low) return 26729;
								else return 26730;
						else
							if (Waterlogged)
								if (West == West::None) return 26731;
								else if (West == West::Low) return 26732;
								else return 26733;
							else
								if (West == West::None) return 26734;
								else if (West == West::Low) return 26735;
								else return 26736;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26737;
								else if (West == West::Low) return 26738;
								else return 26739;
							else
								if (West == West::None) return 26740;
								else if (West == West::Low) return 26741;
								else return 26742;
						else
							if (Waterlogged)
								if (West == West::None) return 26743;
								else if (West == West::Low) return 26744;
								else return 26745;
							else
								if (West == West::None) return 26746;
								else if (West == West::Low) return 26747;
								else return 26748;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26749;
								else if (West == West::Low) return 26750;
								else return 26751;
							else
								if (West == West::None) return 26752;
								else if (West == West::Low) return 26753;
								else return 26754;
						else
							if (Waterlogged)
								if (West == West::None) return 26755;
								else if (West == West::Low) return 26756;
								else return 26757;
							else
								if (West == West::None) return 26758;
								else if (West == West::Low) return 26759;
								else return 26760;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26761;
								else if (West == West::Low) return 26762;
								else return 26763;
							else
								if (West == West::None) return 26764;
								else if (West == West::Low) return 26765;
								else return 26766;
						else
							if (Waterlogged)
								if (West == West::None) return 26767;
								else if (West == West::Low) return 26768;
								else return 26769;
							else
								if (West == West::None) return 26770;
								else if (West == West::Low) return 26771;
								else return 26772;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26773;
								else if (West == West::Low) return 26774;
								else return 26775;
							else
								if (West == West::None) return 26776;
								else if (West == West::Low) return 26777;
								else return 26778;
						else
							if (Waterlogged)
								if (West == West::None) return 26779;
								else if (West == West::Low) return 26780;
								else return 26781;
							else
								if (West == West::None) return 26782;
								else if (West == West::Low) return 26783;
								else return 26784;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26785;
								else if (West == West::Low) return 26786;
								else return 26787;
							else
								if (West == West::None) return 26788;
								else if (West == West::Low) return 26789;
								else return 26790;
						else
							if (Waterlogged)
								if (West == West::None) return 26791;
								else if (West == West::Low) return 26792;
								else return 26793;
							else
								if (West == West::None) return 26794;
								else if (West == West::Low) return 26795;
								else return 26796;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26797;
								else if (West == West::Low) return 26798;
								else return 26799;
							else
								if (West == West::None) return 26800;
								else if (West == West::Low) return 26801;
								else return 26802;
						else
							if (Waterlogged)
								if (West == West::None) return 26803;
								else if (West == West::Low) return 26804;
								else return 26805;
							else
								if (West == West::None) return 26806;
								else if (West == West::Low) return 26807;
								else return 26808;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26809;
								else if (West == West::Low) return 26810;
								else return 26811;
							else
								if (West == West::None) return 26812;
								else if (West == West::Low) return 26813;
								else return 26814;
						else
							if (Waterlogged)
								if (West == West::None) return 26815;
								else if (West == West::Low) return 26816;
								else return 26817;
							else
								if (West == West::None) return 26818;
								else if (West == West::Low) return 26819;
								else return 26820;
		}
		BlockState PolishedDeepslateWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace PolishedDiorite
	{
		constexpr BlockState PolishedDiorite()
		{
			return 5;
		}
	}
	namespace PolishedDioriteSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState PolishedDioriteSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 15155;
				else return 15156;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 15157;
				else return 15158;
			else
				if (Waterlogged) return 15159;
				else return 15160;
		}
		BlockState PolishedDioriteSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedDioriteStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState PolishedDioriteStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14257;
						else return 14258;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14259;
						else return 14260;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14261;
						else return 14262;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14263;
						else return 14264;
					else
						if (Waterlogged) return 14265;
						else return 14266;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14267;
						else return 14268;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14269;
						else return 14270;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14271;
						else return 14272;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14273;
						else return 14274;
					else
						if (Waterlogged) return 14275;
						else return 14276;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14277;
						else return 14278;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14279;
						else return 14280;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14281;
						else return 14282;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14283;
						else return 14284;
					else
						if (Waterlogged) return 14285;
						else return 14286;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14287;
						else return 14288;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14289;
						else return 14290;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14291;
						else return 14292;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14293;
						else return 14294;
					else
						if (Waterlogged) return 14295;
						else return 14296;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14297;
						else return 14298;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14299;
						else return 14300;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14301;
						else return 14302;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14303;
						else return 14304;
					else
						if (Waterlogged) return 14305;
						else return 14306;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14307;
						else return 14308;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14309;
						else return 14310;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14311;
						else return 14312;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14313;
						else return 14314;
					else
						if (Waterlogged) return 14315;
						else return 14316;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14317;
						else return 14318;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14319;
						else return 14320;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14321;
						else return 14322;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14323;
						else return 14324;
					else
						if (Waterlogged) return 14325;
						else return 14326;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14327;
						else return 14328;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14329;
						else return 14330;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14331;
						else return 14332;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14333;
						else return 14334;
					else
						if (Waterlogged) return 14335;
						else return 14336;
		}
		BlockState PolishedDioriteStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedGranite
	{
		constexpr BlockState PolishedGranite()
		{
			return 3;
		}
	}
	namespace PolishedGraniteSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState PolishedGraniteSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 15137;
				else return 15138;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 15139;
				else return 15140;
			else
				if (Waterlogged) return 15141;
				else return 15142;
		}
		BlockState PolishedGraniteSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedGraniteStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState PolishedGraniteStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14017;
						else return 14018;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14019;
						else return 14020;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14021;
						else return 14022;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14023;
						else return 14024;
					else
						if (Waterlogged) return 14025;
						else return 14026;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14027;
						else return 14028;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14029;
						else return 14030;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14031;
						else return 14032;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14033;
						else return 14034;
					else
						if (Waterlogged) return 14035;
						else return 14036;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14037;
						else return 14038;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14039;
						else return 14040;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14041;
						else return 14042;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14043;
						else return 14044;
					else
						if (Waterlogged) return 14045;
						else return 14046;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14047;
						else return 14048;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14049;
						else return 14050;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14051;
						else return 14052;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14053;
						else return 14054;
					else
						if (Waterlogged) return 14055;
						else return 14056;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14057;
						else return 14058;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14059;
						else return 14060;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14061;
						else return 14062;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14063;
						else return 14064;
					else
						if (Waterlogged) return 14065;
						else return 14066;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14067;
						else return 14068;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14069;
						else return 14070;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14071;
						else return 14072;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14073;
						else return 14074;
					else
						if (Waterlogged) return 14075;
						else return 14076;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14077;
						else return 14078;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14079;
						else return 14080;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14081;
						else return 14082;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14083;
						else return 14084;
					else
						if (Waterlogged) return 14085;
						else return 14086;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14087;
						else return 14088;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14089;
						else return 14090;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14091;
						else return 14092;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14093;
						else return 14094;
					else
						if (Waterlogged) return 14095;
						else return 14096;
		}
		BlockState PolishedGraniteStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedTuff
	{
		constexpr BlockState PolishedTuff()
		{
			return 22552;
		}
	}
	namespace PolishedTuffSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState PolishedTuffSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 22553;
				else return 22554;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 22555;
				else return 22556;
			else
				if (Waterlogged) return 22557;
				else return 22558;
		}
		BlockState PolishedTuffSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedTuffStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState PolishedTuffStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 22559;
						else return 22560;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 22561;
						else return 22562;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 22563;
						else return 22564;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 22565;
						else return 22566;
					else
						if (Waterlogged) return 22567;
						else return 22568;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 22569;
						else return 22570;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 22571;
						else return 22572;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 22573;
						else return 22574;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 22575;
						else return 22576;
					else
						if (Waterlogged) return 22577;
						else return 22578;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 22579;
						else return 22580;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 22581;
						else return 22582;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 22583;
						else return 22584;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 22585;
						else return 22586;
					else
						if (Waterlogged) return 22587;
						else return 22588;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 22589;
						else return 22590;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 22591;
						else return 22592;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 22593;
						else return 22594;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 22595;
						else return 22596;
					else
						if (Waterlogged) return 22597;
						else return 22598;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 22599;
						else return 22600;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 22601;
						else return 22602;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 22603;
						else return 22604;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 22605;
						else return 22606;
					else
						if (Waterlogged) return 22607;
						else return 22608;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 22609;
						else return 22610;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 22611;
						else return 22612;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 22613;
						else return 22614;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 22615;
						else return 22616;
					else
						if (Waterlogged) return 22617;
						else return 22618;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 22619;
						else return 22620;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 22621;
						else return 22622;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 22623;
						else return 22624;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 22625;
						else return 22626;
					else
						if (Waterlogged) return 22627;
						else return 22628;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 22629;
						else return 22630;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 22631;
						else return 22632;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 22633;
						else return 22634;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 22635;
						else return 22636;
					else
						if (Waterlogged) return 22637;
						else return 22638;
		}
		BlockState PolishedTuffStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedTuffWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState PolishedTuffWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22639;
								else if (West == West::Low) return 22640;
								else return 22641;
							else
								if (West == West::None) return 22642;
								else if (West == West::Low) return 22643;
								else return 22644;
						else
							if (Waterlogged)
								if (West == West::None) return 22645;
								else if (West == West::Low) return 22646;
								else return 22647;
							else
								if (West == West::None) return 22648;
								else if (West == West::Low) return 22649;
								else return 22650;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22651;
								else if (West == West::Low) return 22652;
								else return 22653;
							else
								if (West == West::None) return 22654;
								else if (West == West::Low) return 22655;
								else return 22656;
						else
							if (Waterlogged)
								if (West == West::None) return 22657;
								else if (West == West::Low) return 22658;
								else return 22659;
							else
								if (West == West::None) return 22660;
								else if (West == West::Low) return 22661;
								else return 22662;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22663;
								else if (West == West::Low) return 22664;
								else return 22665;
							else
								if (West == West::None) return 22666;
								else if (West == West::Low) return 22667;
								else return 22668;
						else
							if (Waterlogged)
								if (West == West::None) return 22669;
								else if (West == West::Low) return 22670;
								else return 22671;
							else
								if (West == West::None) return 22672;
								else if (West == West::Low) return 22673;
								else return 22674;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22675;
								else if (West == West::Low) return 22676;
								else return 22677;
							else
								if (West == West::None) return 22678;
								else if (West == West::Low) return 22679;
								else return 22680;
						else
							if (Waterlogged)
								if (West == West::None) return 22681;
								else if (West == West::Low) return 22682;
								else return 22683;
							else
								if (West == West::None) return 22684;
								else if (West == West::Low) return 22685;
								else return 22686;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22687;
								else if (West == West::Low) return 22688;
								else return 22689;
							else
								if (West == West::None) return 22690;
								else if (West == West::Low) return 22691;
								else return 22692;
						else
							if (Waterlogged)
								if (West == West::None) return 22693;
								else if (West == West::Low) return 22694;
								else return 22695;
							else
								if (West == West::None) return 22696;
								else if (West == West::Low) return 22697;
								else return 22698;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22699;
								else if (West == West::Low) return 22700;
								else return 22701;
							else
								if (West == West::None) return 22702;
								else if (West == West::Low) return 22703;
								else return 22704;
						else
							if (Waterlogged)
								if (West == West::None) return 22705;
								else if (West == West::Low) return 22706;
								else return 22707;
							else
								if (West == West::None) return 22708;
								else if (West == West::Low) return 22709;
								else return 22710;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22711;
								else if (West == West::Low) return 22712;
								else return 22713;
							else
								if (West == West::None) return 22714;
								else if (West == West::Low) return 22715;
								else return 22716;
						else
							if (Waterlogged)
								if (West == West::None) return 22717;
								else if (West == West::Low) return 22718;
								else return 22719;
							else
								if (West == West::None) return 22720;
								else if (West == West::Low) return 22721;
								else return 22722;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22723;
								else if (West == West::Low) return 22724;
								else return 22725;
							else
								if (West == West::None) return 22726;
								else if (West == West::Low) return 22727;
								else return 22728;
						else
							if (Waterlogged)
								if (West == West::None) return 22729;
								else if (West == West::Low) return 22730;
								else return 22731;
							else
								if (West == West::None) return 22732;
								else if (West == West::Low) return 22733;
								else return 22734;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22735;
								else if (West == West::Low) return 22736;
								else return 22737;
							else
								if (West == West::None) return 22738;
								else if (West == West::Low) return 22739;
								else return 22740;
						else
							if (Waterlogged)
								if (West == West::None) return 22741;
								else if (West == West::Low) return 22742;
								else return 22743;
							else
								if (West == West::None) return 22744;
								else if (West == West::Low) return 22745;
								else return 22746;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22747;
								else if (West == West::Low) return 22748;
								else return 22749;
							else
								if (West == West::None) return 22750;
								else if (West == West::Low) return 22751;
								else return 22752;
						else
							if (Waterlogged)
								if (West == West::None) return 22753;
								else if (West == West::Low) return 22754;
								else return 22755;
							else
								if (West == West::None) return 22756;
								else if (West == West::Low) return 22757;
								else return 22758;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22759;
								else if (West == West::Low) return 22760;
								else return 22761;
							else
								if (West == West::None) return 22762;
								else if (West == West::Low) return 22763;
								else return 22764;
						else
							if (Waterlogged)
								if (West == West::None) return 22765;
								else if (West == West::Low) return 22766;
								else return 22767;
							else
								if (West == West::None) return 22768;
								else if (West == West::Low) return 22769;
								else return 22770;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22771;
								else if (West == West::Low) return 22772;
								else return 22773;
							else
								if (West == West::None) return 22774;
								else if (West == West::Low) return 22775;
								else return 22776;
						else
							if (Waterlogged)
								if (West == West::None) return 22777;
								else if (West == West::Low) return 22778;
								else return 22779;
							else
								if (West == West::None) return 22780;
								else if (West == West::Low) return 22781;
								else return 22782;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22783;
								else if (West == West::Low) return 22784;
								else return 22785;
							else
								if (West == West::None) return 22786;
								else if (West == West::Low) return 22787;
								else return 22788;
						else
							if (Waterlogged)
								if (West == West::None) return 22789;
								else if (West == West::Low) return 22790;
								else return 22791;
							else
								if (West == West::None) return 22792;
								else if (West == West::Low) return 22793;
								else return 22794;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22795;
								else if (West == West::Low) return 22796;
								else return 22797;
							else
								if (West == West::None) return 22798;
								else if (West == West::Low) return 22799;
								else return 22800;
						else
							if (Waterlogged)
								if (West == West::None) return 22801;
								else if (West == West::Low) return 22802;
								else return 22803;
							else
								if (West == West::None) return 22804;
								else if (West == West::Low) return 22805;
								else return 22806;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22807;
								else if (West == West::Low) return 22808;
								else return 22809;
							else
								if (West == West::None) return 22810;
								else if (West == West::Low) return 22811;
								else return 22812;
						else
							if (Waterlogged)
								if (West == West::None) return 22813;
								else if (West == West::Low) return 22814;
								else return 22815;
							else
								if (West == West::None) return 22816;
								else if (West == West::Low) return 22817;
								else return 22818;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22819;
								else if (West == West::Low) return 22820;
								else return 22821;
							else
								if (West == West::None) return 22822;
								else if (West == West::Low) return 22823;
								else return 22824;
						else
							if (Waterlogged)
								if (West == West::None) return 22825;
								else if (West == West::Low) return 22826;
								else return 22827;
							else
								if (West == West::None) return 22828;
								else if (West == West::Low) return 22829;
								else return 22830;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22831;
								else if (West == West::Low) return 22832;
								else return 22833;
							else
								if (West == West::None) return 22834;
								else if (West == West::Low) return 22835;
								else return 22836;
						else
							if (Waterlogged)
								if (West == West::None) return 22837;
								else if (West == West::Low) return 22838;
								else return 22839;
							else
								if (West == West::None) return 22840;
								else if (West == West::Low) return 22841;
								else return 22842;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22843;
								else if (West == West::Low) return 22844;
								else return 22845;
							else
								if (West == West::None) return 22846;
								else if (West == West::Low) return 22847;
								else return 22848;
						else
							if (Waterlogged)
								if (West == West::None) return 22849;
								else if (West == West::Low) return 22850;
								else return 22851;
							else
								if (West == West::None) return 22852;
								else if (West == West::Low) return 22853;
								else return 22854;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22855;
								else if (West == West::Low) return 22856;
								else return 22857;
							else
								if (West == West::None) return 22858;
								else if (West == West::Low) return 22859;
								else return 22860;
						else
							if (Waterlogged)
								if (West == West::None) return 22861;
								else if (West == West::Low) return 22862;
								else return 22863;
							else
								if (West == West::None) return 22864;
								else if (West == West::Low) return 22865;
								else return 22866;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22867;
								else if (West == West::Low) return 22868;
								else return 22869;
							else
								if (West == West::None) return 22870;
								else if (West == West::Low) return 22871;
								else return 22872;
						else
							if (Waterlogged)
								if (West == West::None) return 22873;
								else if (West == West::Low) return 22874;
								else return 22875;
							else
								if (West == West::None) return 22876;
								else if (West == West::Low) return 22877;
								else return 22878;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22879;
								else if (West == West::Low) return 22880;
								else return 22881;
							else
								if (West == West::None) return 22882;
								else if (West == West::Low) return 22883;
								else return 22884;
						else
							if (Waterlogged)
								if (West == West::None) return 22885;
								else if (West == West::Low) return 22886;
								else return 22887;
							else
								if (West == West::None) return 22888;
								else if (West == West::Low) return 22889;
								else return 22890;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22891;
								else if (West == West::Low) return 22892;
								else return 22893;
							else
								if (West == West::None) return 22894;
								else if (West == West::Low) return 22895;
								else return 22896;
						else
							if (Waterlogged)
								if (West == West::None) return 22897;
								else if (West == West::Low) return 22898;
								else return 22899;
							else
								if (West == West::None) return 22900;
								else if (West == West::Low) return 22901;
								else return 22902;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22903;
								else if (West == West::Low) return 22904;
								else return 22905;
							else
								if (West == West::None) return 22906;
								else if (West == West::Low) return 22907;
								else return 22908;
						else
							if (Waterlogged)
								if (West == West::None) return 22909;
								else if (West == West::Low) return 22910;
								else return 22911;
							else
								if (West == West::None) return 22912;
								else if (West == West::Low) return 22913;
								else return 22914;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22915;
								else if (West == West::Low) return 22916;
								else return 22917;
							else
								if (West == West::None) return 22918;
								else if (West == West::Low) return 22919;
								else return 22920;
						else
							if (Waterlogged)
								if (West == West::None) return 22921;
								else if (West == West::Low) return 22922;
								else return 22923;
							else
								if (West == West::None) return 22924;
								else if (West == West::Low) return 22925;
								else return 22926;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22927;
								else if (West == West::Low) return 22928;
								else return 22929;
							else
								if (West == West::None) return 22930;
								else if (West == West::Low) return 22931;
								else return 22932;
						else
							if (Waterlogged)
								if (West == West::None) return 22933;
								else if (West == West::Low) return 22934;
								else return 22935;
							else
								if (West == West::None) return 22936;
								else if (West == West::Low) return 22937;
								else return 22938;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22939;
								else if (West == West::Low) return 22940;
								else return 22941;
							else
								if (West == West::None) return 22942;
								else if (West == West::Low) return 22943;
								else return 22944;
						else
							if (Waterlogged)
								if (West == West::None) return 22945;
								else if (West == West::Low) return 22946;
								else return 22947;
							else
								if (West == West::None) return 22948;
								else if (West == West::Low) return 22949;
								else return 22950;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22951;
								else if (West == West::Low) return 22952;
								else return 22953;
							else
								if (West == West::None) return 22954;
								else if (West == West::Low) return 22955;
								else return 22956;
						else
							if (Waterlogged)
								if (West == West::None) return 22957;
								else if (West == West::Low) return 22958;
								else return 22959;
							else
								if (West == West::None) return 22960;
								else if (West == West::Low) return 22961;
								else return 22962;
		}
		BlockState PolishedTuffWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace Poppy
	{
		constexpr BlockState Poppy()
		{
			return 2123;
		}
	}
	namespace Potatoes
	{
		constexpr BlockState Potatoes(const unsigned char Age)
		{
			if (Age == 0) return 9388;
			else if (Age == 1) return 9389;
			else if (Age == 2) return 9390;
			else if (Age == 3) return 9391;
			else if (Age == 4) return 9392;
			else if (Age == 5) return 9393;
			else if (Age == 6) return 9394;
			else return 9395;
		}
		BlockState Potatoes();
		unsigned char Age(BlockState Block);
	}
	namespace PottedAcaciaSapling
	{
		constexpr BlockState PottedAcaciaSapling()
		{
			return 9357;
		}
	}
	namespace PottedAllium
	{
		constexpr BlockState PottedAllium()
		{
			return 9366;
		}
	}
	namespace PottedAzaleaBush
	{
		constexpr BlockState PottedAzaleaBush()
		{
			return 27653;
		}
	}
	namespace PottedAzureBluet
	{
		constexpr BlockState PottedAzureBluet()
		{
			return 9367;
		}
	}
	namespace PottedBamboo
	{
		constexpr BlockState PottedBamboo()
		{
			return 14012;
		}
	}
	namespace PottedBirchSapling
	{
		constexpr BlockState PottedBirchSapling()
		{
			return 9355;
		}
	}
	namespace PottedBlueOrchid
	{
		constexpr BlockState PottedBlueOrchid()
		{
			return 9365;
		}
	}
	namespace PottedBrownMushroom
	{
		constexpr BlockState PottedBrownMushroom()
		{
			return 9377;
		}
	}
	namespace PottedCactus
	{
		constexpr BlockState PottedCactus()
		{
			return 9379;
		}
	}
	namespace PottedCherrySapling
	{
		constexpr BlockState PottedCherrySapling()
		{
			return 9358;
		}
	}
	namespace PottedClosedEyeblossom
	{
		constexpr BlockState PottedClosedEyeblossom()
		{
			return 27944;
		}
	}
	namespace PottedCornflower
	{
		constexpr BlockState PottedCornflower()
		{
			return 9373;
		}
	}
	namespace PottedCrimsonFungus
	{
		constexpr BlockState PottedCrimsonFungus()
		{
			return 20515;
		}
	}
	namespace PottedCrimsonRoots
	{
		constexpr BlockState PottedCrimsonRoots()
		{
			return 20517;
		}
	}
	namespace PottedDandelion
	{
		constexpr BlockState PottedDandelion()
		{
			return 9363;
		}
	}
	namespace PottedDarkOakSapling
	{
		constexpr BlockState PottedDarkOakSapling()
		{
			return 9359;
		}
	}
	namespace PottedDeadBush
	{
		constexpr BlockState PottedDeadBush()
		{
			return 9378;
		}
	}
	namespace PottedFern
	{
		constexpr BlockState PottedFern()
		{
			return 9362;
		}
	}
	namespace PottedFloweringAzaleaBush
	{
		constexpr BlockState PottedFloweringAzaleaBush()
		{
			return 27654;
		}
	}
	namespace PottedJungleSapling
	{
		constexpr BlockState PottedJungleSapling()
		{
			return 9356;
		}
	}
	namespace PottedLilyOfTheValley
	{
		constexpr BlockState PottedLilyOfTheValley()
		{
			return 9374;
		}
	}
	namespace PottedMangrovePropagule
	{
		constexpr BlockState PottedMangrovePropagule()
		{
			return 9361;
		}
	}
	namespace PottedOakSapling
	{
		constexpr BlockState PottedOakSapling()
		{
			return 9353;
		}
	}
	namespace PottedOpenEyeblossom
	{
		constexpr BlockState PottedOpenEyeblossom()
		{
			return 27943;
		}
	}
	namespace PottedOrangeTulip
	{
		constexpr BlockState PottedOrangeTulip()
		{
			return 9369;
		}
	}
	namespace PottedOxeyeDaisy
	{
		constexpr BlockState PottedOxeyeDaisy()
		{
			return 9372;
		}
	}
	namespace PottedPaleOakSapling
	{
		constexpr BlockState PottedPaleOakSapling()
		{
			return 9360;
		}
	}
	namespace PottedPinkTulip
	{
		constexpr BlockState PottedPinkTulip()
		{
			return 9371;
		}
	}
	namespace PottedPoppy
	{
		constexpr BlockState PottedPoppy()
		{
			return 9364;
		}
	}
	namespace PottedRedMushroom
	{
		constexpr BlockState PottedRedMushroom()
		{
			return 9376;
		}
	}
	namespace PottedRedTulip
	{
		constexpr BlockState PottedRedTulip()
		{
			return 9368;
		}
	}
	namespace PottedSpruceSapling
	{
		constexpr BlockState PottedSpruceSapling()
		{
			return 9354;
		}
	}
	namespace PottedTorchflower
	{
		constexpr BlockState PottedTorchflower()
		{
			return 9352;
		}
	}
	namespace PottedWarpedFungus
	{
		constexpr BlockState PottedWarpedFungus()
		{
			return 20516;
		}
	}
	namespace PottedWarpedRoots
	{
		constexpr BlockState PottedWarpedRoots()
		{
			return 20518;
		}
	}
	namespace PottedWhiteTulip
	{
		constexpr BlockState PottedWhiteTulip()
		{
			return 9370;
		}
	}
	namespace PottedWitherRose
	{
		constexpr BlockState PottedWitherRose()
		{
			return 9375;
		}
	}
	namespace PowderSnow
	{
		constexpr BlockState PowderSnow()
		{
			return 23378;
		}
	}
	namespace PowderSnowCauldron
	{
		constexpr BlockState PowderSnowCauldron(const unsigned char Level)
		{
			if (Level == 1) return 8187;
			else if (Level == 2) return 8188;
			else return 8189;
		}
		BlockState PowderSnowCauldron();
		unsigned char Level(BlockState Block);
	}
	namespace PoweredRail
	{
		enum class Shape
		{
			NorthSouth,
			EastWest,
			AscendingEast,
			AscendingWest,
			AscendingNorth,
			AscendingSouth,
		};
		constexpr BlockState PoweredRail(const bool Powered, const enum Shape Shape, const bool Waterlogged)
		{
			if (Powered)
				if (Shape == Shape::NorthSouth)
					if (Waterlogged) return 1987;
					else return 1988;
				else if (Shape == Shape::EastWest)
					if (Waterlogged) return 1989;
					else return 1990;
				else if (Shape == Shape::AscendingEast)
					if (Waterlogged) return 1991;
					else return 1992;
				else if (Shape == Shape::AscendingWest)
					if (Waterlogged) return 1993;
					else return 1994;
				else if (Shape == Shape::AscendingNorth)
					if (Waterlogged) return 1995;
					else return 1996;
				else
					if (Waterlogged) return 1997;
					else return 1998;
			else
				if (Shape == Shape::NorthSouth)
					if (Waterlogged) return 1999;
					else return 2000;
				else if (Shape == Shape::EastWest)
					if (Waterlogged) return 2001;
					else return 2002;
				else if (Shape == Shape::AscendingEast)
					if (Waterlogged) return 2003;
					else return 2004;
				else if (Shape == Shape::AscendingWest)
					if (Waterlogged) return 2005;
					else return 2006;
				else if (Shape == Shape::AscendingNorth)
					if (Waterlogged) return 2007;
					else return 2008;
				else
					if (Waterlogged) return 2009;
					else return 2010;
		}
		BlockState PoweredRail();
		bool Powered(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Prismarine
	{
		constexpr BlockState Prismarine()
		{
			return 11352;
		}
	}
	namespace PrismarineBrickSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState PrismarineBrickSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11601;
				else return 11602;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11603;
				else return 11604;
			else
				if (Waterlogged) return 11605;
				else return 11606;
		}
		BlockState PrismarineBrickSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PrismarineBrickStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState PrismarineBrickStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11435;
						else return 11436;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11437;
						else return 11438;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11439;
						else return 11440;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11441;
						else return 11442;
					else
						if (Waterlogged) return 11443;
						else return 11444;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11445;
						else return 11446;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11447;
						else return 11448;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11449;
						else return 11450;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11451;
						else return 11452;
					else
						if (Waterlogged) return 11453;
						else return 11454;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11455;
						else return 11456;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11457;
						else return 11458;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11459;
						else return 11460;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11461;
						else return 11462;
					else
						if (Waterlogged) return 11463;
						else return 11464;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11465;
						else return 11466;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11467;
						else return 11468;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11469;
						else return 11470;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11471;
						else return 11472;
					else
						if (Waterlogged) return 11473;
						else return 11474;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11475;
						else return 11476;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11477;
						else return 11478;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11479;
						else return 11480;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11481;
						else return 11482;
					else
						if (Waterlogged) return 11483;
						else return 11484;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11485;
						else return 11486;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11487;
						else return 11488;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11489;
						else return 11490;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11491;
						else return 11492;
					else
						if (Waterlogged) return 11493;
						else return 11494;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11495;
						else return 11496;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11497;
						else return 11498;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11499;
						else return 11500;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11501;
						else return 11502;
					else
						if (Waterlogged) return 11503;
						else return 11504;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11505;
						else return 11506;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11507;
						else return 11508;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11509;
						else return 11510;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11511;
						else return 11512;
					else
						if (Waterlogged) return 11513;
						else return 11514;
		}
		BlockState PrismarineBrickStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PrismarineBricks
	{
		constexpr BlockState PrismarineBricks()
		{
			return 11353;
		}
	}
	namespace PrismarineSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState PrismarineSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11595;
				else return 11596;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11597;
				else return 11598;
			else
				if (Waterlogged) return 11599;
				else return 11600;
		}
		BlockState PrismarineSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PrismarineStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState PrismarineStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11355;
						else return 11356;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11357;
						else return 11358;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11359;
						else return 11360;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11361;
						else return 11362;
					else
						if (Waterlogged) return 11363;
						else return 11364;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11365;
						else return 11366;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11367;
						else return 11368;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11369;
						else return 11370;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11371;
						else return 11372;
					else
						if (Waterlogged) return 11373;
						else return 11374;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11375;
						else return 11376;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11377;
						else return 11378;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11379;
						else return 11380;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11381;
						else return 11382;
					else
						if (Waterlogged) return 11383;
						else return 11384;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11385;
						else return 11386;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11387;
						else return 11388;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11389;
						else return 11390;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11391;
						else return 11392;
					else
						if (Waterlogged) return 11393;
						else return 11394;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11395;
						else return 11396;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11397;
						else return 11398;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11399;
						else return 11400;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11401;
						else return 11402;
					else
						if (Waterlogged) return 11403;
						else return 11404;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11405;
						else return 11406;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11407;
						else return 11408;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11409;
						else return 11410;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11411;
						else return 11412;
					else
						if (Waterlogged) return 11413;
						else return 11414;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11415;
						else return 11416;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11417;
						else return 11418;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11419;
						else return 11420;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11421;
						else return 11422;
					else
						if (Waterlogged) return 11423;
						else return 11424;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11425;
						else return 11426;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11427;
						else return 11428;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11429;
						else return 11430;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11431;
						else return 11432;
					else
						if (Waterlogged) return 11433;
						else return 11434;
		}
		BlockState PrismarineStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PrismarineWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState PrismarineWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15539;
								else if (West == West::Low) return 15540;
								else return 15541;
							else
								if (West == West::None) return 15542;
								else if (West == West::Low) return 15543;
								else return 15544;
						else
							if (Waterlogged)
								if (West == West::None) return 15545;
								else if (West == West::Low) return 15546;
								else return 15547;
							else
								if (West == West::None) return 15548;
								else if (West == West::Low) return 15549;
								else return 15550;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15551;
								else if (West == West::Low) return 15552;
								else return 15553;
							else
								if (West == West::None) return 15554;
								else if (West == West::Low) return 15555;
								else return 15556;
						else
							if (Waterlogged)
								if (West == West::None) return 15557;
								else if (West == West::Low) return 15558;
								else return 15559;
							else
								if (West == West::None) return 15560;
								else if (West == West::Low) return 15561;
								else return 15562;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15563;
								else if (West == West::Low) return 15564;
								else return 15565;
							else
								if (West == West::None) return 15566;
								else if (West == West::Low) return 15567;
								else return 15568;
						else
							if (Waterlogged)
								if (West == West::None) return 15569;
								else if (West == West::Low) return 15570;
								else return 15571;
							else
								if (West == West::None) return 15572;
								else if (West == West::Low) return 15573;
								else return 15574;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15575;
								else if (West == West::Low) return 15576;
								else return 15577;
							else
								if (West == West::None) return 15578;
								else if (West == West::Low) return 15579;
								else return 15580;
						else
							if (Waterlogged)
								if (West == West::None) return 15581;
								else if (West == West::Low) return 15582;
								else return 15583;
							else
								if (West == West::None) return 15584;
								else if (West == West::Low) return 15585;
								else return 15586;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15587;
								else if (West == West::Low) return 15588;
								else return 15589;
							else
								if (West == West::None) return 15590;
								else if (West == West::Low) return 15591;
								else return 15592;
						else
							if (Waterlogged)
								if (West == West::None) return 15593;
								else if (West == West::Low) return 15594;
								else return 15595;
							else
								if (West == West::None) return 15596;
								else if (West == West::Low) return 15597;
								else return 15598;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15599;
								else if (West == West::Low) return 15600;
								else return 15601;
							else
								if (West == West::None) return 15602;
								else if (West == West::Low) return 15603;
								else return 15604;
						else
							if (Waterlogged)
								if (West == West::None) return 15605;
								else if (West == West::Low) return 15606;
								else return 15607;
							else
								if (West == West::None) return 15608;
								else if (West == West::Low) return 15609;
								else return 15610;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15611;
								else if (West == West::Low) return 15612;
								else return 15613;
							else
								if (West == West::None) return 15614;
								else if (West == West::Low) return 15615;
								else return 15616;
						else
							if (Waterlogged)
								if (West == West::None) return 15617;
								else if (West == West::Low) return 15618;
								else return 15619;
							else
								if (West == West::None) return 15620;
								else if (West == West::Low) return 15621;
								else return 15622;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15623;
								else if (West == West::Low) return 15624;
								else return 15625;
							else
								if (West == West::None) return 15626;
								else if (West == West::Low) return 15627;
								else return 15628;
						else
							if (Waterlogged)
								if (West == West::None) return 15629;
								else if (West == West::Low) return 15630;
								else return 15631;
							else
								if (West == West::None) return 15632;
								else if (West == West::Low) return 15633;
								else return 15634;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15635;
								else if (West == West::Low) return 15636;
								else return 15637;
							else
								if (West == West::None) return 15638;
								else if (West == West::Low) return 15639;
								else return 15640;
						else
							if (Waterlogged)
								if (West == West::None) return 15641;
								else if (West == West::Low) return 15642;
								else return 15643;
							else
								if (West == West::None) return 15644;
								else if (West == West::Low) return 15645;
								else return 15646;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15647;
								else if (West == West::Low) return 15648;
								else return 15649;
							else
								if (West == West::None) return 15650;
								else if (West == West::Low) return 15651;
								else return 15652;
						else
							if (Waterlogged)
								if (West == West::None) return 15653;
								else if (West == West::Low) return 15654;
								else return 15655;
							else
								if (West == West::None) return 15656;
								else if (West == West::Low) return 15657;
								else return 15658;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15659;
								else if (West == West::Low) return 15660;
								else return 15661;
							else
								if (West == West::None) return 15662;
								else if (West == West::Low) return 15663;
								else return 15664;
						else
							if (Waterlogged)
								if (West == West::None) return 15665;
								else if (West == West::Low) return 15666;
								else return 15667;
							else
								if (West == West::None) return 15668;
								else if (West == West::Low) return 15669;
								else return 15670;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15671;
								else if (West == West::Low) return 15672;
								else return 15673;
							else
								if (West == West::None) return 15674;
								else if (West == West::Low) return 15675;
								else return 15676;
						else
							if (Waterlogged)
								if (West == West::None) return 15677;
								else if (West == West::Low) return 15678;
								else return 15679;
							else
								if (West == West::None) return 15680;
								else if (West == West::Low) return 15681;
								else return 15682;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15683;
								else if (West == West::Low) return 15684;
								else return 15685;
							else
								if (West == West::None) return 15686;
								else if (West == West::Low) return 15687;
								else return 15688;
						else
							if (Waterlogged)
								if (West == West::None) return 15689;
								else if (West == West::Low) return 15690;
								else return 15691;
							else
								if (West == West::None) return 15692;
								else if (West == West::Low) return 15693;
								else return 15694;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15695;
								else if (West == West::Low) return 15696;
								else return 15697;
							else
								if (West == West::None) return 15698;
								else if (West == West::Low) return 15699;
								else return 15700;
						else
							if (Waterlogged)
								if (West == West::None) return 15701;
								else if (West == West::Low) return 15702;
								else return 15703;
							else
								if (West == West::None) return 15704;
								else if (West == West::Low) return 15705;
								else return 15706;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15707;
								else if (West == West::Low) return 15708;
								else return 15709;
							else
								if (West == West::None) return 15710;
								else if (West == West::Low) return 15711;
								else return 15712;
						else
							if (Waterlogged)
								if (West == West::None) return 15713;
								else if (West == West::Low) return 15714;
								else return 15715;
							else
								if (West == West::None) return 15716;
								else if (West == West::Low) return 15717;
								else return 15718;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15719;
								else if (West == West::Low) return 15720;
								else return 15721;
							else
								if (West == West::None) return 15722;
								else if (West == West::Low) return 15723;
								else return 15724;
						else
							if (Waterlogged)
								if (West == West::None) return 15725;
								else if (West == West::Low) return 15726;
								else return 15727;
							else
								if (West == West::None) return 15728;
								else if (West == West::Low) return 15729;
								else return 15730;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15731;
								else if (West == West::Low) return 15732;
								else return 15733;
							else
								if (West == West::None) return 15734;
								else if (West == West::Low) return 15735;
								else return 15736;
						else
							if (Waterlogged)
								if (West == West::None) return 15737;
								else if (West == West::Low) return 15738;
								else return 15739;
							else
								if (West == West::None) return 15740;
								else if (West == West::Low) return 15741;
								else return 15742;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15743;
								else if (West == West::Low) return 15744;
								else return 15745;
							else
								if (West == West::None) return 15746;
								else if (West == West::Low) return 15747;
								else return 15748;
						else
							if (Waterlogged)
								if (West == West::None) return 15749;
								else if (West == West::Low) return 15750;
								else return 15751;
							else
								if (West == West::None) return 15752;
								else if (West == West::Low) return 15753;
								else return 15754;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15755;
								else if (West == West::Low) return 15756;
								else return 15757;
							else
								if (West == West::None) return 15758;
								else if (West == West::Low) return 15759;
								else return 15760;
						else
							if (Waterlogged)
								if (West == West::None) return 15761;
								else if (West == West::Low) return 15762;
								else return 15763;
							else
								if (West == West::None) return 15764;
								else if (West == West::Low) return 15765;
								else return 15766;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15767;
								else if (West == West::Low) return 15768;
								else return 15769;
							else
								if (West == West::None) return 15770;
								else if (West == West::Low) return 15771;
								else return 15772;
						else
							if (Waterlogged)
								if (West == West::None) return 15773;
								else if (West == West::Low) return 15774;
								else return 15775;
							else
								if (West == West::None) return 15776;
								else if (West == West::Low) return 15777;
								else return 15778;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15779;
								else if (West == West::Low) return 15780;
								else return 15781;
							else
								if (West == West::None) return 15782;
								else if (West == West::Low) return 15783;
								else return 15784;
						else
							if (Waterlogged)
								if (West == West::None) return 15785;
								else if (West == West::Low) return 15786;
								else return 15787;
							else
								if (West == West::None) return 15788;
								else if (West == West::Low) return 15789;
								else return 15790;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15791;
								else if (West == West::Low) return 15792;
								else return 15793;
							else
								if (West == West::None) return 15794;
								else if (West == West::Low) return 15795;
								else return 15796;
						else
							if (Waterlogged)
								if (West == West::None) return 15797;
								else if (West == West::Low) return 15798;
								else return 15799;
							else
								if (West == West::None) return 15800;
								else if (West == West::Low) return 15801;
								else return 15802;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15803;
								else if (West == West::Low) return 15804;
								else return 15805;
							else
								if (West == West::None) return 15806;
								else if (West == West::Low) return 15807;
								else return 15808;
						else
							if (Waterlogged)
								if (West == West::None) return 15809;
								else if (West == West::Low) return 15810;
								else return 15811;
							else
								if (West == West::None) return 15812;
								else if (West == West::Low) return 15813;
								else return 15814;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15815;
								else if (West == West::Low) return 15816;
								else return 15817;
							else
								if (West == West::None) return 15818;
								else if (West == West::Low) return 15819;
								else return 15820;
						else
							if (Waterlogged)
								if (West == West::None) return 15821;
								else if (West == West::Low) return 15822;
								else return 15823;
							else
								if (West == West::None) return 15824;
								else if (West == West::Low) return 15825;
								else return 15826;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15827;
								else if (West == West::Low) return 15828;
								else return 15829;
							else
								if (West == West::None) return 15830;
								else if (West == West::Low) return 15831;
								else return 15832;
						else
							if (Waterlogged)
								if (West == West::None) return 15833;
								else if (West == West::Low) return 15834;
								else return 15835;
							else
								if (West == West::None) return 15836;
								else if (West == West::Low) return 15837;
								else return 15838;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15839;
								else if (West == West::Low) return 15840;
								else return 15841;
							else
								if (West == West::None) return 15842;
								else if (West == West::Low) return 15843;
								else return 15844;
						else
							if (Waterlogged)
								if (West == West::None) return 15845;
								else if (West == West::Low) return 15846;
								else return 15847;
							else
								if (West == West::None) return 15848;
								else if (West == West::Low) return 15849;
								else return 15850;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15851;
								else if (West == West::Low) return 15852;
								else return 15853;
							else
								if (West == West::None) return 15854;
								else if (West == West::Low) return 15855;
								else return 15856;
						else
							if (Waterlogged)
								if (West == West::None) return 15857;
								else if (West == West::Low) return 15858;
								else return 15859;
							else
								if (West == West::None) return 15860;
								else if (West == West::Low) return 15861;
								else return 15862;
		}
		BlockState PrismarineWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace Pumpkin
	{
		constexpr BlockState Pumpkin()
		{
			return 7054;
		}
	}
	namespace PumpkinStem
	{
		constexpr BlockState PumpkinStem(const unsigned char Age)
		{
			if (Age == 0) return 7064;
			else if (Age == 1) return 7065;
			else if (Age == 2) return 7066;
			else if (Age == 3) return 7067;
			else if (Age == 4) return 7068;
			else if (Age == 5) return 7069;
			else if (Age == 6) return 7070;
			else return 7071;
		}
		BlockState PumpkinStem();
		unsigned char Age(BlockState Block);
	}
	namespace PurpleBanner
	{
		constexpr BlockState PurpleBanner(const unsigned char Rotation)
		{
			if (Rotation == 0) return 11808;
			else if (Rotation == 1) return 11809;
			else if (Rotation == 2) return 11810;
			else if (Rotation == 3) return 11811;
			else if (Rotation == 4) return 11812;
			else if (Rotation == 5) return 11813;
			else if (Rotation == 6) return 11814;
			else if (Rotation == 7) return 11815;
			else if (Rotation == 8) return 11816;
			else if (Rotation == 9) return 11817;
			else if (Rotation == 10) return 11818;
			else if (Rotation == 11) return 11819;
			else if (Rotation == 12) return 11820;
			else if (Rotation == 13) return 11821;
			else if (Rotation == 14) return 11822;
			else return 11823;
		}
		BlockState PurpleBanner();
		unsigned char Rotation(BlockState Block);
	}
	namespace PurpleBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState PurpleBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1891;
					else return 1892;
				else
					if (Part == Part::Head) return 1893;
					else return 1894;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1895;
					else return 1896;
				else
					if (Part == Part::Head) return 1897;
					else return 1898;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1899;
					else return 1900;
				else
					if (Part == Part::Head) return 1901;
					else return 1902;
			else
				if (Occupied)
					if (Part == Part::Head) return 1903;
					else return 1904;
				else
					if (Part == Part::Head) return 1905;
					else return 1906;
		}
		BlockState PurpleBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace PurpleCandle
	{
		constexpr BlockState PurpleCandle(const unsigned char Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 21961;
					else return 21962;
				else
					if (Waterlogged) return 21963;
					else return 21964;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 21965;
					else return 21966;
				else
					if (Waterlogged) return 21967;
					else return 21968;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 21969;
					else return 21970;
				else
					if (Waterlogged) return 21971;
					else return 21972;
			else
				if (Lit)
					if (Waterlogged) return 21973;
					else return 21974;
				else
					if (Waterlogged) return 21975;
					else return 21976;
		}
		BlockState PurpleCandle();
		unsigned char Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PurpleCandleCake
	{
		constexpr BlockState PurpleCandleCake(const bool Lit)
		{
			if (Lit) return 22079;
			else return 22080;
		}
		BlockState PurpleCandleCake();
		bool Lit(BlockState Block);
	}
	namespace PurpleCarpet
	{
		constexpr BlockState PurpleCarpet()
		{
			return 11627;
		}
	}
	namespace PurpleConcrete
	{
		constexpr BlockState PurpleConcrete()
		{
			return 13761;
		}
	}
	namespace PurpleConcretePowder
	{
		constexpr BlockState PurpleConcretePowder()
		{
			return 13777;
		}
	}
	namespace PurpleGlazedTerracotta
	{
		constexpr BlockState PurpleGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13727;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13728;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13729;
			else return 13730;
		}
		BlockState PurpleGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace PurpleShulkerBox
	{
		constexpr BlockState PurpleShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13651;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 13652;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13653;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13654;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 13655;
			else return 13656;
		}
		BlockState PurpleShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace PurpleStainedGlass
	{
		constexpr BlockState PurpleStainedGlass()
		{
			return 6134;
		}
	}
	namespace PurpleStainedGlassPane
	{
		constexpr BlockState PurpleStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10501;
							else return 10502;
						else
							if (West) return 10503;
							else return 10504;
					else
						if (Waterlogged)
							if (West) return 10505;
							else return 10506;
						else
							if (West) return 10507;
							else return 10508;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10509;
							else return 10510;
						else
							if (West) return 10511;
							else return 10512;
					else
						if (Waterlogged)
							if (West) return 10513;
							else return 10514;
						else
							if (West) return 10515;
							else return 10516;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10517;
							else return 10518;
						else
							if (West) return 10519;
							else return 10520;
					else
						if (Waterlogged)
							if (West) return 10521;
							else return 10522;
						else
							if (West) return 10523;
							else return 10524;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10525;
							else return 10526;
						else
							if (West) return 10527;
							else return 10528;
					else
						if (Waterlogged)
							if (West) return 10529;
							else return 10530;
						else
							if (West) return 10531;
							else return 10532;
		}
		BlockState PurpleStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace PurpleTerracotta
	{
		constexpr BlockState PurpleTerracotta()
		{
			return 10175;
		}
	}
	namespace PurpleWallBanner
	{
		constexpr BlockState PurpleWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11944;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11945;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11946;
			else return 11947;
		}
		BlockState PurpleWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace PurpleWool
	{
		constexpr BlockState PurpleWool()
		{
			return 2103;
		}
	}
	namespace PurpurBlock
	{
		constexpr BlockState PurpurBlock()
		{
			return 13433;
		}
	}
	namespace PurpurPillar
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState PurpurPillar(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 13434;
			else if (Axis == Axis::Y) return 13435;
			else return 13436;
		}
		BlockState PurpurPillar();
		enum Axis Axis(BlockState Block);
	}
	namespace PurpurSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState PurpurSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 12195;
				else return 12196;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 12197;
				else return 12198;
			else
				if (Waterlogged) return 12199;
				else return 12200;
		}
		BlockState PurpurSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PurpurStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState PurpurStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13437;
						else return 13438;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13439;
						else return 13440;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13441;
						else return 13442;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13443;
						else return 13444;
					else
						if (Waterlogged) return 13445;
						else return 13446;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13447;
						else return 13448;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13449;
						else return 13450;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13451;
						else return 13452;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13453;
						else return 13454;
					else
						if (Waterlogged) return 13455;
						else return 13456;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13457;
						else return 13458;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13459;
						else return 13460;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13461;
						else return 13462;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13463;
						else return 13464;
					else
						if (Waterlogged) return 13465;
						else return 13466;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13467;
						else return 13468;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13469;
						else return 13470;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13471;
						else return 13472;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13473;
						else return 13474;
					else
						if (Waterlogged) return 13475;
						else return 13476;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13477;
						else return 13478;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13479;
						else return 13480;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13481;
						else return 13482;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13483;
						else return 13484;
					else
						if (Waterlogged) return 13485;
						else return 13486;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13487;
						else return 13488;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13489;
						else return 13490;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13491;
						else return 13492;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13493;
						else return 13494;
					else
						if (Waterlogged) return 13495;
						else return 13496;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13497;
						else return 13498;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13499;
						else return 13500;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13501;
						else return 13502;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13503;
						else return 13504;
					else
						if (Waterlogged) return 13505;
						else return 13506;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13507;
						else return 13508;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13509;
						else return 13510;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13511;
						else return 13512;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13513;
						else return 13514;
					else
						if (Waterlogged) return 13515;
						else return 13516;
		}
		BlockState PurpurStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace QuartzBlock
	{
		constexpr BlockState QuartzBlock()
		{
			return 10044;
		}
	}
	namespace QuartzBricks
	{
		constexpr BlockState QuartzBricks()
		{
			return 21784;
		}
	}
	namespace QuartzPillar
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState QuartzPillar(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 10046;
			else if (Axis == Axis::Y) return 10047;
			else return 10048;
		}
		BlockState QuartzPillar();
		enum Axis Axis(BlockState Block);
	}
	namespace QuartzSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState QuartzSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 12177;
				else return 12178;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 12179;
				else return 12180;
			else
				if (Waterlogged) return 12181;
				else return 12182;
		}
		BlockState QuartzSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace QuartzStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState QuartzStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10049;
						else return 10050;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10051;
						else return 10052;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10053;
						else return 10054;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10055;
						else return 10056;
					else
						if (Waterlogged) return 10057;
						else return 10058;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10059;
						else return 10060;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10061;
						else return 10062;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10063;
						else return 10064;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10065;
						else return 10066;
					else
						if (Waterlogged) return 10067;
						else return 10068;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10069;
						else return 10070;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10071;
						else return 10072;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10073;
						else return 10074;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10075;
						else return 10076;
					else
						if (Waterlogged) return 10077;
						else return 10078;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10079;
						else return 10080;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10081;
						else return 10082;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10083;
						else return 10084;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10085;
						else return 10086;
					else
						if (Waterlogged) return 10087;
						else return 10088;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10089;
						else return 10090;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10091;
						else return 10092;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10093;
						else return 10094;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10095;
						else return 10096;
					else
						if (Waterlogged) return 10097;
						else return 10098;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10099;
						else return 10100;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10101;
						else return 10102;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10103;
						else return 10104;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10105;
						else return 10106;
					else
						if (Waterlogged) return 10107;
						else return 10108;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10109;
						else return 10110;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10111;
						else return 10112;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10113;
						else return 10114;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10115;
						else return 10116;
					else
						if (Waterlogged) return 10117;
						else return 10118;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10119;
						else return 10120;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10121;
						else return 10122;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10123;
						else return 10124;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10125;
						else return 10126;
					else
						if (Waterlogged) return 10127;
						else return 10128;
		}
		BlockState QuartzStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Rail
	{
		enum class Shape
		{
			NorthSouth,
			EastWest,
			AscendingEast,
			AscendingWest,
			AscendingNorth,
			AscendingSouth,
			SouthEast,
			SouthWest,
			NorthWest,
			NorthEast,
		};
		constexpr BlockState Rail(const enum Shape Shape, const bool Waterlogged)
		{
			if (Shape == Shape::NorthSouth)
				if (Waterlogged) return 4758;
				else return 4759;
			else if (Shape == Shape::EastWest)
				if (Waterlogged) return 4760;
				else return 4761;
			else if (Shape == Shape::AscendingEast)
				if (Waterlogged) return 4762;
				else return 4763;
			else if (Shape == Shape::AscendingWest)
				if (Waterlogged) return 4764;
				else return 4765;
			else if (Shape == Shape::AscendingNorth)
				if (Waterlogged) return 4766;
				else return 4767;
			else if (Shape == Shape::AscendingSouth)
				if (Waterlogged) return 4768;
				else return 4769;
			else if (Shape == Shape::SouthEast)
				if (Waterlogged) return 4770;
				else return 4771;
			else if (Shape == Shape::SouthWest)
				if (Waterlogged) return 4772;
				else return 4773;
			else if (Shape == Shape::NorthWest)
				if (Waterlogged) return 4774;
				else return 4775;
			else
				if (Waterlogged) return 4776;
				else return 4777;
		}
		BlockState Rail();
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace RawCopperBlock
	{
		constexpr BlockState RawCopperBlock()
		{
			return 27651;
		}
	}
	namespace RawGoldBlock
	{
		constexpr BlockState RawGoldBlock()
		{
			return 27652;
		}
	}
	namespace RawIronBlock
	{
		constexpr BlockState RawIronBlock()
		{
			return 27650;
		}
	}
	namespace RedBanner
	{
		constexpr BlockState RedBanner(const unsigned char Rotation)
		{
			if (Rotation == 0) return 11872;
			else if (Rotation == 1) return 11873;
			else if (Rotation == 2) return 11874;
			else if (Rotation == 3) return 11875;
			else if (Rotation == 4) return 11876;
			else if (Rotation == 5) return 11877;
			else if (Rotation == 6) return 11878;
			else if (Rotation == 7) return 11879;
			else if (Rotation == 8) return 11880;
			else if (Rotation == 9) return 11881;
			else if (Rotation == 10) return 11882;
			else if (Rotation == 11) return 11883;
			else if (Rotation == 12) return 11884;
			else if (Rotation == 13) return 11885;
			else if (Rotation == 14) return 11886;
			else return 11887;
		}
		BlockState RedBanner();
		unsigned char Rotation(BlockState Block);
	}
	namespace RedBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState RedBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1955;
					else return 1956;
				else
					if (Part == Part::Head) return 1957;
					else return 1958;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1959;
					else return 1960;
				else
					if (Part == Part::Head) return 1961;
					else return 1962;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1963;
					else return 1964;
				else
					if (Part == Part::Head) return 1965;
					else return 1966;
			else
				if (Occupied)
					if (Part == Part::Head) return 1967;
					else return 1968;
				else
					if (Part == Part::Head) return 1969;
					else return 1970;
		}
		BlockState RedBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace RedCandle
	{
		constexpr BlockState RedCandle(const unsigned char Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 22025;
					else return 22026;
				else
					if (Waterlogged) return 22027;
					else return 22028;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 22029;
					else return 22030;
				else
					if (Waterlogged) return 22031;
					else return 22032;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 22033;
					else return 22034;
				else
					if (Waterlogged) return 22035;
					else return 22036;
			else
				if (Lit)
					if (Waterlogged) return 22037;
					else return 22038;
				else
					if (Waterlogged) return 22039;
					else return 22040;
		}
		BlockState RedCandle();
		unsigned char Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace RedCandleCake
	{
		constexpr BlockState RedCandleCake(const bool Lit)
		{
			if (Lit) return 22087;
			else return 22088;
		}
		BlockState RedCandleCake();
		bool Lit(BlockState Block);
	}
	namespace RedCarpet
	{
		constexpr BlockState RedCarpet()
		{
			return 11631;
		}
	}
	namespace RedConcrete
	{
		constexpr BlockState RedConcrete()
		{
			return 13765;
		}
	}
	namespace RedConcretePowder
	{
		constexpr BlockState RedConcretePowder()
		{
			return 13781;
		}
	}
	namespace RedGlazedTerracotta
	{
		constexpr BlockState RedGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13743;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13744;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13745;
			else return 13746;
		}
		BlockState RedGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace RedMushroom
	{
		constexpr BlockState RedMushroom()
		{
			return 2136;
		}
	}
	namespace RedMushroomBlock
	{
		constexpr BlockState RedMushroomBlock(const bool Down, const bool East, const bool North, const bool South, const bool Up, const bool West)
		{
			if (Down)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 6856;
								else return 6857;
							else
								if (West) return 6858;
								else return 6859;
						else
							if (Up)
								if (West) return 6860;
								else return 6861;
							else
								if (West) return 6862;
								else return 6863;
					else
						if (South)
							if (Up)
								if (West) return 6864;
								else return 6865;
							else
								if (West) return 6866;
								else return 6867;
						else
							if (Up)
								if (West) return 6868;
								else return 6869;
							else
								if (West) return 6870;
								else return 6871;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 6872;
								else return 6873;
							else
								if (West) return 6874;
								else return 6875;
						else
							if (Up)
								if (West) return 6876;
								else return 6877;
							else
								if (West) return 6878;
								else return 6879;
					else
						if (South)
							if (Up)
								if (West) return 6880;
								else return 6881;
							else
								if (West) return 6882;
								else return 6883;
						else
							if (Up)
								if (West) return 6884;
								else return 6885;
							else
								if (West) return 6886;
								else return 6887;
			else
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 6888;
								else return 6889;
							else
								if (West) return 6890;
								else return 6891;
						else
							if (Up)
								if (West) return 6892;
								else return 6893;
							else
								if (West) return 6894;
								else return 6895;
					else
						if (South)
							if (Up)
								if (West) return 6896;
								else return 6897;
							else
								if (West) return 6898;
								else return 6899;
						else
							if (Up)
								if (West) return 6900;
								else return 6901;
							else
								if (West) return 6902;
								else return 6903;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 6904;
								else return 6905;
							else
								if (West) return 6906;
								else return 6907;
						else
							if (Up)
								if (West) return 6908;
								else return 6909;
							else
								if (West) return 6910;
								else return 6911;
					else
						if (South)
							if (Up)
								if (West) return 6912;
								else return 6913;
							else
								if (West) return 6914;
								else return 6915;
						else
							if (Up)
								if (West) return 6916;
								else return 6917;
							else
								if (West) return 6918;
								else return 6919;
		}
		BlockState RedMushroomBlock();
		bool Down(BlockState Block);
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Up(BlockState Block);
		bool West(BlockState Block);
	}
	namespace RedNetherBrickSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState RedNetherBrickSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 15197;
				else return 15198;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 15199;
				else return 15200;
			else
				if (Waterlogged) return 15201;
				else return 15202;
		}
		BlockState RedNetherBrickSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace RedNetherBrickStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState RedNetherBrickStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14897;
						else return 14898;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14899;
						else return 14900;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14901;
						else return 14902;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14903;
						else return 14904;
					else
						if (Waterlogged) return 14905;
						else return 14906;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14907;
						else return 14908;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14909;
						else return 14910;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14911;
						else return 14912;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14913;
						else return 14914;
					else
						if (Waterlogged) return 14915;
						else return 14916;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14917;
						else return 14918;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14919;
						else return 14920;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14921;
						else return 14922;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14923;
						else return 14924;
					else
						if (Waterlogged) return 14925;
						else return 14926;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14927;
						else return 14928;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14929;
						else return 14930;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14931;
						else return 14932;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14933;
						else return 14934;
					else
						if (Waterlogged) return 14935;
						else return 14936;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14937;
						else return 14938;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14939;
						else return 14940;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14941;
						else return 14942;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14943;
						else return 14944;
					else
						if (Waterlogged) return 14945;
						else return 14946;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14947;
						else return 14948;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14949;
						else return 14950;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14951;
						else return 14952;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14953;
						else return 14954;
					else
						if (Waterlogged) return 14955;
						else return 14956;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14957;
						else return 14958;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14959;
						else return 14960;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14961;
						else return 14962;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14963;
						else return 14964;
					else
						if (Waterlogged) return 14965;
						else return 14966;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14967;
						else return 14968;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14969;
						else return 14970;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14971;
						else return 14972;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14973;
						else return 14974;
					else
						if (Waterlogged) return 14975;
						else return 14976;
		}
		BlockState RedNetherBrickStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace RedNetherBrickWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState RedNetherBrickWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18131;
								else if (West == West::Low) return 18132;
								else return 18133;
							else
								if (West == West::None) return 18134;
								else if (West == West::Low) return 18135;
								else return 18136;
						else
							if (Waterlogged)
								if (West == West::None) return 18137;
								else if (West == West::Low) return 18138;
								else return 18139;
							else
								if (West == West::None) return 18140;
								else if (West == West::Low) return 18141;
								else return 18142;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18143;
								else if (West == West::Low) return 18144;
								else return 18145;
							else
								if (West == West::None) return 18146;
								else if (West == West::Low) return 18147;
								else return 18148;
						else
							if (Waterlogged)
								if (West == West::None) return 18149;
								else if (West == West::Low) return 18150;
								else return 18151;
							else
								if (West == West::None) return 18152;
								else if (West == West::Low) return 18153;
								else return 18154;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18155;
								else if (West == West::Low) return 18156;
								else return 18157;
							else
								if (West == West::None) return 18158;
								else if (West == West::Low) return 18159;
								else return 18160;
						else
							if (Waterlogged)
								if (West == West::None) return 18161;
								else if (West == West::Low) return 18162;
								else return 18163;
							else
								if (West == West::None) return 18164;
								else if (West == West::Low) return 18165;
								else return 18166;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18167;
								else if (West == West::Low) return 18168;
								else return 18169;
							else
								if (West == West::None) return 18170;
								else if (West == West::Low) return 18171;
								else return 18172;
						else
							if (Waterlogged)
								if (West == West::None) return 18173;
								else if (West == West::Low) return 18174;
								else return 18175;
							else
								if (West == West::None) return 18176;
								else if (West == West::Low) return 18177;
								else return 18178;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18179;
								else if (West == West::Low) return 18180;
								else return 18181;
							else
								if (West == West::None) return 18182;
								else if (West == West::Low) return 18183;
								else return 18184;
						else
							if (Waterlogged)
								if (West == West::None) return 18185;
								else if (West == West::Low) return 18186;
								else return 18187;
							else
								if (West == West::None) return 18188;
								else if (West == West::Low) return 18189;
								else return 18190;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18191;
								else if (West == West::Low) return 18192;
								else return 18193;
							else
								if (West == West::None) return 18194;
								else if (West == West::Low) return 18195;
								else return 18196;
						else
							if (Waterlogged)
								if (West == West::None) return 18197;
								else if (West == West::Low) return 18198;
								else return 18199;
							else
								if (West == West::None) return 18200;
								else if (West == West::Low) return 18201;
								else return 18202;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18203;
								else if (West == West::Low) return 18204;
								else return 18205;
							else
								if (West == West::None) return 18206;
								else if (West == West::Low) return 18207;
								else return 18208;
						else
							if (Waterlogged)
								if (West == West::None) return 18209;
								else if (West == West::Low) return 18210;
								else return 18211;
							else
								if (West == West::None) return 18212;
								else if (West == West::Low) return 18213;
								else return 18214;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18215;
								else if (West == West::Low) return 18216;
								else return 18217;
							else
								if (West == West::None) return 18218;
								else if (West == West::Low) return 18219;
								else return 18220;
						else
							if (Waterlogged)
								if (West == West::None) return 18221;
								else if (West == West::Low) return 18222;
								else return 18223;
							else
								if (West == West::None) return 18224;
								else if (West == West::Low) return 18225;
								else return 18226;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18227;
								else if (West == West::Low) return 18228;
								else return 18229;
							else
								if (West == West::None) return 18230;
								else if (West == West::Low) return 18231;
								else return 18232;
						else
							if (Waterlogged)
								if (West == West::None) return 18233;
								else if (West == West::Low) return 18234;
								else return 18235;
							else
								if (West == West::None) return 18236;
								else if (West == West::Low) return 18237;
								else return 18238;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18239;
								else if (West == West::Low) return 18240;
								else return 18241;
							else
								if (West == West::None) return 18242;
								else if (West == West::Low) return 18243;
								else return 18244;
						else
							if (Waterlogged)
								if (West == West::None) return 18245;
								else if (West == West::Low) return 18246;
								else return 18247;
							else
								if (West == West::None) return 18248;
								else if (West == West::Low) return 18249;
								else return 18250;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18251;
								else if (West == West::Low) return 18252;
								else return 18253;
							else
								if (West == West::None) return 18254;
								else if (West == West::Low) return 18255;
								else return 18256;
						else
							if (Waterlogged)
								if (West == West::None) return 18257;
								else if (West == West::Low) return 18258;
								else return 18259;
							else
								if (West == West::None) return 18260;
								else if (West == West::Low) return 18261;
								else return 18262;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18263;
								else if (West == West::Low) return 18264;
								else return 18265;
							else
								if (West == West::None) return 18266;
								else if (West == West::Low) return 18267;
								else return 18268;
						else
							if (Waterlogged)
								if (West == West::None) return 18269;
								else if (West == West::Low) return 18270;
								else return 18271;
							else
								if (West == West::None) return 18272;
								else if (West == West::Low) return 18273;
								else return 18274;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18275;
								else if (West == West::Low) return 18276;
								else return 18277;
							else
								if (West == West::None) return 18278;
								else if (West == West::Low) return 18279;
								else return 18280;
						else
							if (Waterlogged)
								if (West == West::None) return 18281;
								else if (West == West::Low) return 18282;
								else return 18283;
							else
								if (West == West::None) return 18284;
								else if (West == West::Low) return 18285;
								else return 18286;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18287;
								else if (West == West::Low) return 18288;
								else return 18289;
							else
								if (West == West::None) return 18290;
								else if (West == West::Low) return 18291;
								else return 18292;
						else
							if (Waterlogged)
								if (West == West::None) return 18293;
								else if (West == West::Low) return 18294;
								else return 18295;
							else
								if (West == West::None) return 18296;
								else if (West == West::Low) return 18297;
								else return 18298;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18299;
								else if (West == West::Low) return 18300;
								else return 18301;
							else
								if (West == West::None) return 18302;
								else if (West == West::Low) return 18303;
								else return 18304;
						else
							if (Waterlogged)
								if (West == West::None) return 18305;
								else if (West == West::Low) return 18306;
								else return 18307;
							else
								if (West == West::None) return 18308;
								else if (West == West::Low) return 18309;
								else return 18310;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18311;
								else if (West == West::Low) return 18312;
								else return 18313;
							else
								if (West == West::None) return 18314;
								else if (West == West::Low) return 18315;
								else return 18316;
						else
							if (Waterlogged)
								if (West == West::None) return 18317;
								else if (West == West::Low) return 18318;
								else return 18319;
							else
								if (West == West::None) return 18320;
								else if (West == West::Low) return 18321;
								else return 18322;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18323;
								else if (West == West::Low) return 18324;
								else return 18325;
							else
								if (West == West::None) return 18326;
								else if (West == West::Low) return 18327;
								else return 18328;
						else
							if (Waterlogged)
								if (West == West::None) return 18329;
								else if (West == West::Low) return 18330;
								else return 18331;
							else
								if (West == West::None) return 18332;
								else if (West == West::Low) return 18333;
								else return 18334;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18335;
								else if (West == West::Low) return 18336;
								else return 18337;
							else
								if (West == West::None) return 18338;
								else if (West == West::Low) return 18339;
								else return 18340;
						else
							if (Waterlogged)
								if (West == West::None) return 18341;
								else if (West == West::Low) return 18342;
								else return 18343;
							else
								if (West == West::None) return 18344;
								else if (West == West::Low) return 18345;
								else return 18346;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18347;
								else if (West == West::Low) return 18348;
								else return 18349;
							else
								if (West == West::None) return 18350;
								else if (West == West::Low) return 18351;
								else return 18352;
						else
							if (Waterlogged)
								if (West == West::None) return 18353;
								else if (West == West::Low) return 18354;
								else return 18355;
							else
								if (West == West::None) return 18356;
								else if (West == West::Low) return 18357;
								else return 18358;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18359;
								else if (West == West::Low) return 18360;
								else return 18361;
							else
								if (West == West::None) return 18362;
								else if (West == West::Low) return 18363;
								else return 18364;
						else
							if (Waterlogged)
								if (West == West::None) return 18365;
								else if (West == West::Low) return 18366;
								else return 18367;
							else
								if (West == West::None) return 18368;
								else if (West == West::Low) return 18369;
								else return 18370;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18371;
								else if (West == West::Low) return 18372;
								else return 18373;
							else
								if (West == West::None) return 18374;
								else if (West == West::Low) return 18375;
								else return 18376;
						else
							if (Waterlogged)
								if (West == West::None) return 18377;
								else if (West == West::Low) return 18378;
								else return 18379;
							else
								if (West == West::None) return 18380;
								else if (West == West::Low) return 18381;
								else return 18382;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18383;
								else if (West == West::Low) return 18384;
								else return 18385;
							else
								if (West == West::None) return 18386;
								else if (West == West::Low) return 18387;
								else return 18388;
						else
							if (Waterlogged)
								if (West == West::None) return 18389;
								else if (West == West::Low) return 18390;
								else return 18391;
							else
								if (West == West::None) return 18392;
								else if (West == West::Low) return 18393;
								else return 18394;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18395;
								else if (West == West::Low) return 18396;
								else return 18397;
							else
								if (West == West::None) return 18398;
								else if (West == West::Low) return 18399;
								else return 18400;
						else
							if (Waterlogged)
								if (West == West::None) return 18401;
								else if (West == West::Low) return 18402;
								else return 18403;
							else
								if (West == West::None) return 18404;
								else if (West == West::Low) return 18405;
								else return 18406;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18407;
								else if (West == West::Low) return 18408;
								else return 18409;
							else
								if (West == West::None) return 18410;
								else if (West == West::Low) return 18411;
								else return 18412;
						else
							if (Waterlogged)
								if (West == West::None) return 18413;
								else if (West == West::Low) return 18414;
								else return 18415;
							else
								if (West == West::None) return 18416;
								else if (West == West::Low) return 18417;
								else return 18418;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18419;
								else if (West == West::Low) return 18420;
								else return 18421;
							else
								if (West == West::None) return 18422;
								else if (West == West::Low) return 18423;
								else return 18424;
						else
							if (Waterlogged)
								if (West == West::None) return 18425;
								else if (West == West::Low) return 18426;
								else return 18427;
							else
								if (West == West::None) return 18428;
								else if (West == West::Low) return 18429;
								else return 18430;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18431;
								else if (West == West::Low) return 18432;
								else return 18433;
							else
								if (West == West::None) return 18434;
								else if (West == West::Low) return 18435;
								else return 18436;
						else
							if (Waterlogged)
								if (West == West::None) return 18437;
								else if (West == West::Low) return 18438;
								else return 18439;
							else
								if (West == West::None) return 18440;
								else if (West == West::Low) return 18441;
								else return 18442;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18443;
								else if (West == West::Low) return 18444;
								else return 18445;
							else
								if (West == West::None) return 18446;
								else if (West == West::Low) return 18447;
								else return 18448;
						else
							if (Waterlogged)
								if (West == West::None) return 18449;
								else if (West == West::Low) return 18450;
								else return 18451;
							else
								if (West == West::None) return 18452;
								else if (West == West::Low) return 18453;
								else return 18454;
		}
		BlockState RedNetherBrickWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace RedNetherBricks
	{
		constexpr BlockState RedNetherBricks()
		{
			return 13568;
		}
	}
	namespace RedSand
	{
		constexpr BlockState RedSand()
		{
			return 123;
		}
	}
	namespace RedSandstone
	{
		constexpr BlockState RedSandstone()
		{
			return 11968;
		}
	}
	namespace RedSandstoneSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState RedSandstoneSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 12183;
				else return 12184;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 12185;
				else return 12186;
			else
				if (Waterlogged) return 12187;
				else return 12188;
		}
		BlockState RedSandstoneSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace RedSandstoneStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState RedSandstoneStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11971;
						else return 11972;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11973;
						else return 11974;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11975;
						else return 11976;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11977;
						else return 11978;
					else
						if (Waterlogged) return 11979;
						else return 11980;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11981;
						else return 11982;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11983;
						else return 11984;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11985;
						else return 11986;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11987;
						else return 11988;
					else
						if (Waterlogged) return 11989;
						else return 11990;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11991;
						else return 11992;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11993;
						else return 11994;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11995;
						else return 11996;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11997;
						else return 11998;
					else
						if (Waterlogged) return 11999;
						else return 12000;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 12001;
						else return 12002;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 12003;
						else return 12004;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 12005;
						else return 12006;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 12007;
						else return 12008;
					else
						if (Waterlogged) return 12009;
						else return 12010;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 12011;
						else return 12012;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 12013;
						else return 12014;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 12015;
						else return 12016;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 12017;
						else return 12018;
					else
						if (Waterlogged) return 12019;
						else return 12020;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 12021;
						else return 12022;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 12023;
						else return 12024;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 12025;
						else return 12026;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 12027;
						else return 12028;
					else
						if (Waterlogged) return 12029;
						else return 12030;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 12031;
						else return 12032;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 12033;
						else return 12034;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 12035;
						else return 12036;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 12037;
						else return 12038;
					else
						if (Waterlogged) return 12039;
						else return 12040;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 12041;
						else return 12042;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 12043;
						else return 12044;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 12045;
						else return 12046;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 12047;
						else return 12048;
					else
						if (Waterlogged) return 12049;
						else return 12050;
		}
		BlockState RedSandstoneStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace RedSandstoneWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState RedSandstoneWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15863;
								else if (West == West::Low) return 15864;
								else return 15865;
							else
								if (West == West::None) return 15866;
								else if (West == West::Low) return 15867;
								else return 15868;
						else
							if (Waterlogged)
								if (West == West::None) return 15869;
								else if (West == West::Low) return 15870;
								else return 15871;
							else
								if (West == West::None) return 15872;
								else if (West == West::Low) return 15873;
								else return 15874;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15875;
								else if (West == West::Low) return 15876;
								else return 15877;
							else
								if (West == West::None) return 15878;
								else if (West == West::Low) return 15879;
								else return 15880;
						else
							if (Waterlogged)
								if (West == West::None) return 15881;
								else if (West == West::Low) return 15882;
								else return 15883;
							else
								if (West == West::None) return 15884;
								else if (West == West::Low) return 15885;
								else return 15886;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15887;
								else if (West == West::Low) return 15888;
								else return 15889;
							else
								if (West == West::None) return 15890;
								else if (West == West::Low) return 15891;
								else return 15892;
						else
							if (Waterlogged)
								if (West == West::None) return 15893;
								else if (West == West::Low) return 15894;
								else return 15895;
							else
								if (West == West::None) return 15896;
								else if (West == West::Low) return 15897;
								else return 15898;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15899;
								else if (West == West::Low) return 15900;
								else return 15901;
							else
								if (West == West::None) return 15902;
								else if (West == West::Low) return 15903;
								else return 15904;
						else
							if (Waterlogged)
								if (West == West::None) return 15905;
								else if (West == West::Low) return 15906;
								else return 15907;
							else
								if (West == West::None) return 15908;
								else if (West == West::Low) return 15909;
								else return 15910;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15911;
								else if (West == West::Low) return 15912;
								else return 15913;
							else
								if (West == West::None) return 15914;
								else if (West == West::Low) return 15915;
								else return 15916;
						else
							if (Waterlogged)
								if (West == West::None) return 15917;
								else if (West == West::Low) return 15918;
								else return 15919;
							else
								if (West == West::None) return 15920;
								else if (West == West::Low) return 15921;
								else return 15922;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15923;
								else if (West == West::Low) return 15924;
								else return 15925;
							else
								if (West == West::None) return 15926;
								else if (West == West::Low) return 15927;
								else return 15928;
						else
							if (Waterlogged)
								if (West == West::None) return 15929;
								else if (West == West::Low) return 15930;
								else return 15931;
							else
								if (West == West::None) return 15932;
								else if (West == West::Low) return 15933;
								else return 15934;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15935;
								else if (West == West::Low) return 15936;
								else return 15937;
							else
								if (West == West::None) return 15938;
								else if (West == West::Low) return 15939;
								else return 15940;
						else
							if (Waterlogged)
								if (West == West::None) return 15941;
								else if (West == West::Low) return 15942;
								else return 15943;
							else
								if (West == West::None) return 15944;
								else if (West == West::Low) return 15945;
								else return 15946;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15947;
								else if (West == West::Low) return 15948;
								else return 15949;
							else
								if (West == West::None) return 15950;
								else if (West == West::Low) return 15951;
								else return 15952;
						else
							if (Waterlogged)
								if (West == West::None) return 15953;
								else if (West == West::Low) return 15954;
								else return 15955;
							else
								if (West == West::None) return 15956;
								else if (West == West::Low) return 15957;
								else return 15958;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15959;
								else if (West == West::Low) return 15960;
								else return 15961;
							else
								if (West == West::None) return 15962;
								else if (West == West::Low) return 15963;
								else return 15964;
						else
							if (Waterlogged)
								if (West == West::None) return 15965;
								else if (West == West::Low) return 15966;
								else return 15967;
							else
								if (West == West::None) return 15968;
								else if (West == West::Low) return 15969;
								else return 15970;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15971;
								else if (West == West::Low) return 15972;
								else return 15973;
							else
								if (West == West::None) return 15974;
								else if (West == West::Low) return 15975;
								else return 15976;
						else
							if (Waterlogged)
								if (West == West::None) return 15977;
								else if (West == West::Low) return 15978;
								else return 15979;
							else
								if (West == West::None) return 15980;
								else if (West == West::Low) return 15981;
								else return 15982;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15983;
								else if (West == West::Low) return 15984;
								else return 15985;
							else
								if (West == West::None) return 15986;
								else if (West == West::Low) return 15987;
								else return 15988;
						else
							if (Waterlogged)
								if (West == West::None) return 15989;
								else if (West == West::Low) return 15990;
								else return 15991;
							else
								if (West == West::None) return 15992;
								else if (West == West::Low) return 15993;
								else return 15994;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15995;
								else if (West == West::Low) return 15996;
								else return 15997;
							else
								if (West == West::None) return 15998;
								else if (West == West::Low) return 15999;
								else return 16000;
						else
							if (Waterlogged)
								if (West == West::None) return 16001;
								else if (West == West::Low) return 16002;
								else return 16003;
							else
								if (West == West::None) return 16004;
								else if (West == West::Low) return 16005;
								else return 16006;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16007;
								else if (West == West::Low) return 16008;
								else return 16009;
							else
								if (West == West::None) return 16010;
								else if (West == West::Low) return 16011;
								else return 16012;
						else
							if (Waterlogged)
								if (West == West::None) return 16013;
								else if (West == West::Low) return 16014;
								else return 16015;
							else
								if (West == West::None) return 16016;
								else if (West == West::Low) return 16017;
								else return 16018;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16019;
								else if (West == West::Low) return 16020;
								else return 16021;
							else
								if (West == West::None) return 16022;
								else if (West == West::Low) return 16023;
								else return 16024;
						else
							if (Waterlogged)
								if (West == West::None) return 16025;
								else if (West == West::Low) return 16026;
								else return 16027;
							else
								if (West == West::None) return 16028;
								else if (West == West::Low) return 16029;
								else return 16030;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16031;
								else if (West == West::Low) return 16032;
								else return 16033;
							else
								if (West == West::None) return 16034;
								else if (West == West::Low) return 16035;
								else return 16036;
						else
							if (Waterlogged)
								if (West == West::None) return 16037;
								else if (West == West::Low) return 16038;
								else return 16039;
							else
								if (West == West::None) return 16040;
								else if (West == West::Low) return 16041;
								else return 16042;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16043;
								else if (West == West::Low) return 16044;
								else return 16045;
							else
								if (West == West::None) return 16046;
								else if (West == West::Low) return 16047;
								else return 16048;
						else
							if (Waterlogged)
								if (West == West::None) return 16049;
								else if (West == West::Low) return 16050;
								else return 16051;
							else
								if (West == West::None) return 16052;
								else if (West == West::Low) return 16053;
								else return 16054;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16055;
								else if (West == West::Low) return 16056;
								else return 16057;
							else
								if (West == West::None) return 16058;
								else if (West == West::Low) return 16059;
								else return 16060;
						else
							if (Waterlogged)
								if (West == West::None) return 16061;
								else if (West == West::Low) return 16062;
								else return 16063;
							else
								if (West == West::None) return 16064;
								else if (West == West::Low) return 16065;
								else return 16066;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16067;
								else if (West == West::Low) return 16068;
								else return 16069;
							else
								if (West == West::None) return 16070;
								else if (West == West::Low) return 16071;
								else return 16072;
						else
							if (Waterlogged)
								if (West == West::None) return 16073;
								else if (West == West::Low) return 16074;
								else return 16075;
							else
								if (West == West::None) return 16076;
								else if (West == West::Low) return 16077;
								else return 16078;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16079;
								else if (West == West::Low) return 16080;
								else return 16081;
							else
								if (West == West::None) return 16082;
								else if (West == West::Low) return 16083;
								else return 16084;
						else
							if (Waterlogged)
								if (West == West::None) return 16085;
								else if (West == West::Low) return 16086;
								else return 16087;
							else
								if (West == West::None) return 16088;
								else if (West == West::Low) return 16089;
								else return 16090;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16091;
								else if (West == West::Low) return 16092;
								else return 16093;
							else
								if (West == West::None) return 16094;
								else if (West == West::Low) return 16095;
								else return 16096;
						else
							if (Waterlogged)
								if (West == West::None) return 16097;
								else if (West == West::Low) return 16098;
								else return 16099;
							else
								if (West == West::None) return 16100;
								else if (West == West::Low) return 16101;
								else return 16102;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16103;
								else if (West == West::Low) return 16104;
								else return 16105;
							else
								if (West == West::None) return 16106;
								else if (West == West::Low) return 16107;
								else return 16108;
						else
							if (Waterlogged)
								if (West == West::None) return 16109;
								else if (West == West::Low) return 16110;
								else return 16111;
							else
								if (West == West::None) return 16112;
								else if (West == West::Low) return 16113;
								else return 16114;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16115;
								else if (West == West::Low) return 16116;
								else return 16117;
							else
								if (West == West::None) return 16118;
								else if (West == West::Low) return 16119;
								else return 16120;
						else
							if (Waterlogged)
								if (West == West::None) return 16121;
								else if (West == West::Low) return 16122;
								else return 16123;
							else
								if (West == West::None) return 16124;
								else if (West == West::Low) return 16125;
								else return 16126;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16127;
								else if (West == West::Low) return 16128;
								else return 16129;
							else
								if (West == West::None) return 16130;
								else if (West == West::Low) return 16131;
								else return 16132;
						else
							if (Waterlogged)
								if (West == West::None) return 16133;
								else if (West == West::Low) return 16134;
								else return 16135;
							else
								if (West == West::None) return 16136;
								else if (West == West::Low) return 16137;
								else return 16138;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16139;
								else if (West == West::Low) return 16140;
								else return 16141;
							else
								if (West == West::None) return 16142;
								else if (West == West::Low) return 16143;
								else return 16144;
						else
							if (Waterlogged)
								if (West == West::None) return 16145;
								else if (West == West::Low) return 16146;
								else return 16147;
							else
								if (West == West::None) return 16148;
								else if (West == West::Low) return 16149;
								else return 16150;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16151;
								else if (West == West::Low) return 16152;
								else return 16153;
							else
								if (West == West::None) return 16154;
								else if (West == West::Low) return 16155;
								else return 16156;
						else
							if (Waterlogged)
								if (West == West::None) return 16157;
								else if (West == West::Low) return 16158;
								else return 16159;
							else
								if (West == West::None) return 16160;
								else if (West == West::Low) return 16161;
								else return 16162;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16163;
								else if (West == West::Low) return 16164;
								else return 16165;
							else
								if (West == West::None) return 16166;
								else if (West == West::Low) return 16167;
								else return 16168;
						else
							if (Waterlogged)
								if (West == West::None) return 16169;
								else if (West == West::Low) return 16170;
								else return 16171;
							else
								if (West == West::None) return 16172;
								else if (West == West::Low) return 16173;
								else return 16174;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16175;
								else if (West == West::Low) return 16176;
								else return 16177;
							else
								if (West == West::None) return 16178;
								else if (West == West::Low) return 16179;
								else return 16180;
						else
							if (Waterlogged)
								if (West == West::None) return 16181;
								else if (West == West::Low) return 16182;
								else return 16183;
							else
								if (West == West::None) return 16184;
								else if (West == West::Low) return 16185;
								else return 16186;
		}
		BlockState RedSandstoneWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace RedShulkerBox
	{
		constexpr BlockState RedShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13675;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 13676;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13677;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13678;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 13679;
			else return 13680;
		}
		BlockState RedShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace RedStainedGlass
	{
		constexpr BlockState RedStainedGlass()
		{
			return 6138;
		}
	}
	namespace RedStainedGlassPane
	{
		constexpr BlockState RedStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10629;
							else return 10630;
						else
							if (West) return 10631;
							else return 10632;
					else
						if (Waterlogged)
							if (West) return 10633;
							else return 10634;
						else
							if (West) return 10635;
							else return 10636;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10637;
							else return 10638;
						else
							if (West) return 10639;
							else return 10640;
					else
						if (Waterlogged)
							if (West) return 10641;
							else return 10642;
						else
							if (West) return 10643;
							else return 10644;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10645;
							else return 10646;
						else
							if (West) return 10647;
							else return 10648;
					else
						if (Waterlogged)
							if (West) return 10649;
							else return 10650;
						else
							if (West) return 10651;
							else return 10652;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10653;
							else return 10654;
						else
							if (West) return 10655;
							else return 10656;
					else
						if (Waterlogged)
							if (West) return 10657;
							else return 10658;
						else
							if (West) return 10659;
							else return 10660;
		}
		BlockState RedStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace RedTerracotta
	{
		constexpr BlockState RedTerracotta()
		{
			return 10179;
		}
	}
	namespace RedTulip
	{
		constexpr BlockState RedTulip()
		{
			return 2127;
		}
	}
	namespace RedWallBanner
	{
		constexpr BlockState RedWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11960;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11961;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11962;
			else return 11963;
		}
		BlockState RedWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace RedWool
	{
		constexpr BlockState RedWool()
		{
			return 2107;
		}
	}
	namespace RedstoneBlock
	{
		constexpr BlockState RedstoneBlock()
		{
			return 10032;
		}
	}
	namespace RedstoneLamp
	{
		constexpr BlockState RedstoneLamp(const bool Lit)
		{
			if (Lit) return 8201;
			else return 8202;
		}
		BlockState RedstoneLamp();
		bool Lit(BlockState Block);
	}
	namespace RedstoneOre
	{
		constexpr BlockState RedstoneOre(const bool Lit)
		{
			if (Lit) return 5912;
			else return 5913;
		}
		BlockState RedstoneOre();
		bool Lit(BlockState Block);
	}
	namespace RedstoneTorch
	{
		constexpr BlockState RedstoneTorch(const bool Lit)
		{
			if (Lit) return 5916;
			else return 5917;
		}
		BlockState RedstoneTorch();
		bool Lit(BlockState Block);
	}
	namespace RedstoneWallTorch
	{
		constexpr BlockState RedstoneWallTorch(const eBlockFace Facing, const bool Lit)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Lit) return 5918;
				else return 5919;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Lit) return 5920;
				else return 5921;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Lit) return 5922;
				else return 5923;
			else
				if (Lit) return 5924;
				else return 5925;
		}
		BlockState RedstoneWallTorch();
		eBlockFace Facing(BlockState Block);
		bool Lit(BlockState Block);
	}
	namespace RedstoneWire
	{
		enum class East
		{
			Up,
			Side,
			None,
		};
		enum class North
		{
			Up,
			Side,
			None,
		};
		enum class South
		{
			Up,
			Side,
			None,
		};
		enum class West
		{
			Up,
			Side,
			None,
		};
		constexpr BlockState RedstoneWire(const enum East East, const enum North North, const unsigned char Power, const enum South South, const enum West West)
		{
			if (East == East::Up)
				if (North == North::Up)
					if (Power == 0)
						if (South == South::Up)
							if (West == West::Up) return 3042;
							else if (West == West::Side) return 3043;
							else return 3044;
						else if (South == South::Side)
							if (West == West::Up) return 3045;
							else if (West == West::Side) return 3046;
							else return 3047;
						else
							if (West == West::Up) return 3048;
							else if (West == West::Side) return 3049;
							else return 3050;
					else if (Power == 1)
						if (South == South::Up)
							if (West == West::Up) return 3051;
							else if (West == West::Side) return 3052;
							else return 3053;
						else if (South == South::Side)
							if (West == West::Up) return 3054;
							else if (West == West::Side) return 3055;
							else return 3056;
						else
							if (West == West::Up) return 3057;
							else if (West == West::Side) return 3058;
							else return 3059;
					else if (Power == 2)
						if (South == South::Up)
							if (West == West::Up) return 3060;
							else if (West == West::Side) return 3061;
							else return 3062;
						else if (South == South::Side)
							if (West == West::Up) return 3063;
							else if (West == West::Side) return 3064;
							else return 3065;
						else
							if (West == West::Up) return 3066;
							else if (West == West::Side) return 3067;
							else return 3068;
					else if (Power == 3)
						if (South == South::Up)
							if (West == West::Up) return 3069;
							else if (West == West::Side) return 3070;
							else return 3071;
						else if (South == South::Side)
							if (West == West::Up) return 3072;
							else if (West == West::Side) return 3073;
							else return 3074;
						else
							if (West == West::Up) return 3075;
							else if (West == West::Side) return 3076;
							else return 3077;
					else if (Power == 4)
						if (South == South::Up)
							if (West == West::Up) return 3078;
							else if (West == West::Side) return 3079;
							else return 3080;
						else if (South == South::Side)
							if (West == West::Up) return 3081;
							else if (West == West::Side) return 3082;
							else return 3083;
						else
							if (West == West::Up) return 3084;
							else if (West == West::Side) return 3085;
							else return 3086;
					else if (Power == 5)
						if (South == South::Up)
							if (West == West::Up) return 3087;
							else if (West == West::Side) return 3088;
							else return 3089;
						else if (South == South::Side)
							if (West == West::Up) return 3090;
							else if (West == West::Side) return 3091;
							else return 3092;
						else
							if (West == West::Up) return 3093;
							else if (West == West::Side) return 3094;
							else return 3095;
					else if (Power == 6)
						if (South == South::Up)
							if (West == West::Up) return 3096;
							else if (West == West::Side) return 3097;
							else return 3098;
						else if (South == South::Side)
							if (West == West::Up) return 3099;
							else if (West == West::Side) return 3100;
							else return 3101;
						else
							if (West == West::Up) return 3102;
							else if (West == West::Side) return 3103;
							else return 3104;
					else if (Power == 7)
						if (South == South::Up)
							if (West == West::Up) return 3105;
							else if (West == West::Side) return 3106;
							else return 3107;
						else if (South == South::Side)
							if (West == West::Up) return 3108;
							else if (West == West::Side) return 3109;
							else return 3110;
						else
							if (West == West::Up) return 3111;
							else if (West == West::Side) return 3112;
							else return 3113;
					else if (Power == 8)
						if (South == South::Up)
							if (West == West::Up) return 3114;
							else if (West == West::Side) return 3115;
							else return 3116;
						else if (South == South::Side)
							if (West == West::Up) return 3117;
							else if (West == West::Side) return 3118;
							else return 3119;
						else
							if (West == West::Up) return 3120;
							else if (West == West::Side) return 3121;
							else return 3122;
					else if (Power == 9)
						if (South == South::Up)
							if (West == West::Up) return 3123;
							else if (West == West::Side) return 3124;
							else return 3125;
						else if (South == South::Side)
							if (West == West::Up) return 3126;
							else if (West == West::Side) return 3127;
							else return 3128;
						else
							if (West == West::Up) return 3129;
							else if (West == West::Side) return 3130;
							else return 3131;
					else if (Power == 10)
						if (South == South::Up)
							if (West == West::Up) return 3132;
							else if (West == West::Side) return 3133;
							else return 3134;
						else if (South == South::Side)
							if (West == West::Up) return 3135;
							else if (West == West::Side) return 3136;
							else return 3137;
						else
							if (West == West::Up) return 3138;
							else if (West == West::Side) return 3139;
							else return 3140;
					else if (Power == 11)
						if (South == South::Up)
							if (West == West::Up) return 3141;
							else if (West == West::Side) return 3142;
							else return 3143;
						else if (South == South::Side)
							if (West == West::Up) return 3144;
							else if (West == West::Side) return 3145;
							else return 3146;
						else
							if (West == West::Up) return 3147;
							else if (West == West::Side) return 3148;
							else return 3149;
					else if (Power == 12)
						if (South == South::Up)
							if (West == West::Up) return 3150;
							else if (West == West::Side) return 3151;
							else return 3152;
						else if (South == South::Side)
							if (West == West::Up) return 3153;
							else if (West == West::Side) return 3154;
							else return 3155;
						else
							if (West == West::Up) return 3156;
							else if (West == West::Side) return 3157;
							else return 3158;
					else if (Power == 13)
						if (South == South::Up)
							if (West == West::Up) return 3159;
							else if (West == West::Side) return 3160;
							else return 3161;
						else if (South == South::Side)
							if (West == West::Up) return 3162;
							else if (West == West::Side) return 3163;
							else return 3164;
						else
							if (West == West::Up) return 3165;
							else if (West == West::Side) return 3166;
							else return 3167;
					else if (Power == 14)
						if (South == South::Up)
							if (West == West::Up) return 3168;
							else if (West == West::Side) return 3169;
							else return 3170;
						else if (South == South::Side)
							if (West == West::Up) return 3171;
							else if (West == West::Side) return 3172;
							else return 3173;
						else
							if (West == West::Up) return 3174;
							else if (West == West::Side) return 3175;
							else return 3176;
					else
						if (South == South::Up)
							if (West == West::Up) return 3177;
							else if (West == West::Side) return 3178;
							else return 3179;
						else if (South == South::Side)
							if (West == West::Up) return 3180;
							else if (West == West::Side) return 3181;
							else return 3182;
						else
							if (West == West::Up) return 3183;
							else if (West == West::Side) return 3184;
							else return 3185;
				else if (North == North::Side)
					if (Power == 0)
						if (South == South::Up)
							if (West == West::Up) return 3186;
							else if (West == West::Side) return 3187;
							else return 3188;
						else if (South == South::Side)
							if (West == West::Up) return 3189;
							else if (West == West::Side) return 3190;
							else return 3191;
						else
							if (West == West::Up) return 3192;
							else if (West == West::Side) return 3193;
							else return 3194;
					else if (Power == 1)
						if (South == South::Up)
							if (West == West::Up) return 3195;
							else if (West == West::Side) return 3196;
							else return 3197;
						else if (South == South::Side)
							if (West == West::Up) return 3198;
							else if (West == West::Side) return 3199;
							else return 3200;
						else
							if (West == West::Up) return 3201;
							else if (West == West::Side) return 3202;
							else return 3203;
					else if (Power == 2)
						if (South == South::Up)
							if (West == West::Up) return 3204;
							else if (West == West::Side) return 3205;
							else return 3206;
						else if (South == South::Side)
							if (West == West::Up) return 3207;
							else if (West == West::Side) return 3208;
							else return 3209;
						else
							if (West == West::Up) return 3210;
							else if (West == West::Side) return 3211;
							else return 3212;
					else if (Power == 3)
						if (South == South::Up)
							if (West == West::Up) return 3213;
							else if (West == West::Side) return 3214;
							else return 3215;
						else if (South == South::Side)
							if (West == West::Up) return 3216;
							else if (West == West::Side) return 3217;
							else return 3218;
						else
							if (West == West::Up) return 3219;
							else if (West == West::Side) return 3220;
							else return 3221;
					else if (Power == 4)
						if (South == South::Up)
							if (West == West::Up) return 3222;
							else if (West == West::Side) return 3223;
							else return 3224;
						else if (South == South::Side)
							if (West == West::Up) return 3225;
							else if (West == West::Side) return 3226;
							else return 3227;
						else
							if (West == West::Up) return 3228;
							else if (West == West::Side) return 3229;
							else return 3230;
					else if (Power == 5)
						if (South == South::Up)
							if (West == West::Up) return 3231;
							else if (West == West::Side) return 3232;
							else return 3233;
						else if (South == South::Side)
							if (West == West::Up) return 3234;
							else if (West == West::Side) return 3235;
							else return 3236;
						else
							if (West == West::Up) return 3237;
							else if (West == West::Side) return 3238;
							else return 3239;
					else if (Power == 6)
						if (South == South::Up)
							if (West == West::Up) return 3240;
							else if (West == West::Side) return 3241;
							else return 3242;
						else if (South == South::Side)
							if (West == West::Up) return 3243;
							else if (West == West::Side) return 3244;
							else return 3245;
						else
							if (West == West::Up) return 3246;
							else if (West == West::Side) return 3247;
							else return 3248;
					else if (Power == 7)
						if (South == South::Up)
							if (West == West::Up) return 3249;
							else if (West == West::Side) return 3250;
							else return 3251;
						else if (South == South::Side)
							if (West == West::Up) return 3252;
							else if (West == West::Side) return 3253;
							else return 3254;
						else
							if (West == West::Up) return 3255;
							else if (West == West::Side) return 3256;
							else return 3257;
					else if (Power == 8)
						if (South == South::Up)
							if (West == West::Up) return 3258;
							else if (West == West::Side) return 3259;
							else return 3260;
						else if (South == South::Side)
							if (West == West::Up) return 3261;
							else if (West == West::Side) return 3262;
							else return 3263;
						else
							if (West == West::Up) return 3264;
							else if (West == West::Side) return 3265;
							else return 3266;
					else if (Power == 9)
						if (South == South::Up)
							if (West == West::Up) return 3267;
							else if (West == West::Side) return 3268;
							else return 3269;
						else if (South == South::Side)
							if (West == West::Up) return 3270;
							else if (West == West::Side) return 3271;
							else return 3272;
						else
							if (West == West::Up) return 3273;
							else if (West == West::Side) return 3274;
							else return 3275;
					else if (Power == 10)
						if (South == South::Up)
							if (West == West::Up) return 3276;
							else if (West == West::Side) return 3277;
							else return 3278;
						else if (South == South::Side)
							if (West == West::Up) return 3279;
							else if (West == West::Side) return 3280;
							else return 3281;
						else
							if (West == West::Up) return 3282;
							else if (West == West::Side) return 3283;
							else return 3284;
					else if (Power == 11)
						if (South == South::Up)
							if (West == West::Up) return 3285;
							else if (West == West::Side) return 3286;
							else return 3287;
						else if (South == South::Side)
							if (West == West::Up) return 3288;
							else if (West == West::Side) return 3289;
							else return 3290;
						else
							if (West == West::Up) return 3291;
							else if (West == West::Side) return 3292;
							else return 3293;
					else if (Power == 12)
						if (South == South::Up)
							if (West == West::Up) return 3294;
							else if (West == West::Side) return 3295;
							else return 3296;
						else if (South == South::Side)
							if (West == West::Up) return 3297;
							else if (West == West::Side) return 3298;
							else return 3299;
						else
							if (West == West::Up) return 3300;
							else if (West == West::Side) return 3301;
							else return 3302;
					else if (Power == 13)
						if (South == South::Up)
							if (West == West::Up) return 3303;
							else if (West == West::Side) return 3304;
							else return 3305;
						else if (South == South::Side)
							if (West == West::Up) return 3306;
							else if (West == West::Side) return 3307;
							else return 3308;
						else
							if (West == West::Up) return 3309;
							else if (West == West::Side) return 3310;
							else return 3311;
					else if (Power == 14)
						if (South == South::Up)
							if (West == West::Up) return 3312;
							else if (West == West::Side) return 3313;
							else return 3314;
						else if (South == South::Side)
							if (West == West::Up) return 3315;
							else if (West == West::Side) return 3316;
							else return 3317;
						else
							if (West == West::Up) return 3318;
							else if (West == West::Side) return 3319;
							else return 3320;
					else
						if (South == South::Up)
							if (West == West::Up) return 3321;
							else if (West == West::Side) return 3322;
							else return 3323;
						else if (South == South::Side)
							if (West == West::Up) return 3324;
							else if (West == West::Side) return 3325;
							else return 3326;
						else
							if (West == West::Up) return 3327;
							else if (West == West::Side) return 3328;
							else return 3329;
				else
					if (Power == 0)
						if (South == South::Up)
							if (West == West::Up) return 3330;
							else if (West == West::Side) return 3331;
							else return 3332;
						else if (South == South::Side)
							if (West == West::Up) return 3333;
							else if (West == West::Side) return 3334;
							else return 3335;
						else
							if (West == West::Up) return 3336;
							else if (West == West::Side) return 3337;
							else return 3338;
					else if (Power == 1)
						if (South == South::Up)
							if (West == West::Up) return 3339;
							else if (West == West::Side) return 3340;
							else return 3341;
						else if (South == South::Side)
							if (West == West::Up) return 3342;
							else if (West == West::Side) return 3343;
							else return 3344;
						else
							if (West == West::Up) return 3345;
							else if (West == West::Side) return 3346;
							else return 3347;
					else if (Power == 2)
						if (South == South::Up)
							if (West == West::Up) return 3348;
							else if (West == West::Side) return 3349;
							else return 3350;
						else if (South == South::Side)
							if (West == West::Up) return 3351;
							else if (West == West::Side) return 3352;
							else return 3353;
						else
							if (West == West::Up) return 3354;
							else if (West == West::Side) return 3355;
							else return 3356;
					else if (Power == 3)
						if (South == South::Up)
							if (West == West::Up) return 3357;
							else if (West == West::Side) return 3358;
							else return 3359;
						else if (South == South::Side)
							if (West == West::Up) return 3360;
							else if (West == West::Side) return 3361;
							else return 3362;
						else
							if (West == West::Up) return 3363;
							else if (West == West::Side) return 3364;
							else return 3365;
					else if (Power == 4)
						if (South == South::Up)
							if (West == West::Up) return 3366;
							else if (West == West::Side) return 3367;
							else return 3368;
						else if (South == South::Side)
							if (West == West::Up) return 3369;
							else if (West == West::Side) return 3370;
							else return 3371;
						else
							if (West == West::Up) return 3372;
							else if (West == West::Side) return 3373;
							else return 3374;
					else if (Power == 5)
						if (South == South::Up)
							if (West == West::Up) return 3375;
							else if (West == West::Side) return 3376;
							else return 3377;
						else if (South == South::Side)
							if (West == West::Up) return 3378;
							else if (West == West::Side) return 3379;
							else return 3380;
						else
							if (West == West::Up) return 3381;
							else if (West == West::Side) return 3382;
							else return 3383;
					else if (Power == 6)
						if (South == South::Up)
							if (West == West::Up) return 3384;
							else if (West == West::Side) return 3385;
							else return 3386;
						else if (South == South::Side)
							if (West == West::Up) return 3387;
							else if (West == West::Side) return 3388;
							else return 3389;
						else
							if (West == West::Up) return 3390;
							else if (West == West::Side) return 3391;
							else return 3392;
					else if (Power == 7)
						if (South == South::Up)
							if (West == West::Up) return 3393;
							else if (West == West::Side) return 3394;
							else return 3395;
						else if (South == South::Side)
							if (West == West::Up) return 3396;
							else if (West == West::Side) return 3397;
							else return 3398;
						else
							if (West == West::Up) return 3399;
							else if (West == West::Side) return 3400;
							else return 3401;
					else if (Power == 8)
						if (South == South::Up)
							if (West == West::Up) return 3402;
							else if (West == West::Side) return 3403;
							else return 3404;
						else if (South == South::Side)
							if (West == West::Up) return 3405;
							else if (West == West::Side) return 3406;
							else return 3407;
						else
							if (West == West::Up) return 3408;
							else if (West == West::Side) return 3409;
							else return 3410;
					else if (Power == 9)
						if (South == South::Up)
							if (West == West::Up) return 3411;
							else if (West == West::Side) return 3412;
							else return 3413;
						else if (South == South::Side)
							if (West == West::Up) return 3414;
							else if (West == West::Side) return 3415;
							else return 3416;
						else
							if (West == West::Up) return 3417;
							else if (West == West::Side) return 3418;
							else return 3419;
					else if (Power == 10)
						if (South == South::Up)
							if (West == West::Up) return 3420;
							else if (West == West::Side) return 3421;
							else return 3422;
						else if (South == South::Side)
							if (West == West::Up) return 3423;
							else if (West == West::Side) return 3424;
							else return 3425;
						else
							if (West == West::Up) return 3426;
							else if (West == West::Side) return 3427;
							else return 3428;
					else if (Power == 11)
						if (South == South::Up)
							if (West == West::Up) return 3429;
							else if (West == West::Side) return 3430;
							else return 3431;
						else if (South == South::Side)
							if (West == West::Up) return 3432;
							else if (West == West::Side) return 3433;
							else return 3434;
						else
							if (West == West::Up) return 3435;
							else if (West == West::Side) return 3436;
							else return 3437;
					else if (Power == 12)
						if (South == South::Up)
							if (West == West::Up) return 3438;
							else if (West == West::Side) return 3439;
							else return 3440;
						else if (South == South::Side)
							if (West == West::Up) return 3441;
							else if (West == West::Side) return 3442;
							else return 3443;
						else
							if (West == West::Up) return 3444;
							else if (West == West::Side) return 3445;
							else return 3446;
					else if (Power == 13)
						if (South == South::Up)
							if (West == West::Up) return 3447;
							else if (West == West::Side) return 3448;
							else return 3449;
						else if (South == South::Side)
							if (West == West::Up) return 3450;
							else if (West == West::Side) return 3451;
							else return 3452;
						else
							if (West == West::Up) return 3453;
							else if (West == West::Side) return 3454;
							else return 3455;
					else if (Power == 14)
						if (South == South::Up)
							if (West == West::Up) return 3456;
							else if (West == West::Side) return 3457;
							else return 3458;
						else if (South == South::Side)
							if (West == West::Up) return 3459;
							else if (West == West::Side) return 3460;
							else return 3461;
						else
							if (West == West::Up) return 3462;
							else if (West == West::Side) return 3463;
							else return 3464;
					else
						if (South == South::Up)
							if (West == West::Up) return 3465;
							else if (West == West::Side) return 3466;
							else return 3467;
						else if (South == South::Side)
							if (West == West::Up) return 3468;
							else if (West == West::Side) return 3469;
							else return 3470;
						else
							if (West == West::Up) return 3471;
							else if (West == West::Side) return 3472;
							else return 3473;
			else if (East == East::Side)
				if (North == North::Up)
					if (Power == 0)
						if (South == South::Up)
							if (West == West::Up) return 3474;
							else if (West == West::Side) return 3475;
							else return 3476;
						else if (South == South::Side)
							if (West == West::Up) return 3477;
							else if (West == West::Side) return 3478;
							else return 3479;
						else
							if (West == West::Up) return 3480;
							else if (West == West::Side) return 3481;
							else return 3482;
					else if (Power == 1)
						if (South == South::Up)
							if (West == West::Up) return 3483;
							else if (West == West::Side) return 3484;
							else return 3485;
						else if (South == South::Side)
							if (West == West::Up) return 3486;
							else if (West == West::Side) return 3487;
							else return 3488;
						else
							if (West == West::Up) return 3489;
							else if (West == West::Side) return 3490;
							else return 3491;
					else if (Power == 2)
						if (South == South::Up)
							if (West == West::Up) return 3492;
							else if (West == West::Side) return 3493;
							else return 3494;
						else if (South == South::Side)
							if (West == West::Up) return 3495;
							else if (West == West::Side) return 3496;
							else return 3497;
						else
							if (West == West::Up) return 3498;
							else if (West == West::Side) return 3499;
							else return 3500;
					else if (Power == 3)
						if (South == South::Up)
							if (West == West::Up) return 3501;
							else if (West == West::Side) return 3502;
							else return 3503;
						else if (South == South::Side)
							if (West == West::Up) return 3504;
							else if (West == West::Side) return 3505;
							else return 3506;
						else
							if (West == West::Up) return 3507;
							else if (West == West::Side) return 3508;
							else return 3509;
					else if (Power == 4)
						if (South == South::Up)
							if (West == West::Up) return 3510;
							else if (West == West::Side) return 3511;
							else return 3512;
						else if (South == South::Side)
							if (West == West::Up) return 3513;
							else if (West == West::Side) return 3514;
							else return 3515;
						else
							if (West == West::Up) return 3516;
							else if (West == West::Side) return 3517;
							else return 3518;
					else if (Power == 5)
						if (South == South::Up)
							if (West == West::Up) return 3519;
							else if (West == West::Side) return 3520;
							else return 3521;
						else if (South == South::Side)
							if (West == West::Up) return 3522;
							else if (West == West::Side) return 3523;
							else return 3524;
						else
							if (West == West::Up) return 3525;
							else if (West == West::Side) return 3526;
							else return 3527;
					else if (Power == 6)
						if (South == South::Up)
							if (West == West::Up) return 3528;
							else if (West == West::Side) return 3529;
							else return 3530;
						else if (South == South::Side)
							if (West == West::Up) return 3531;
							else if (West == West::Side) return 3532;
							else return 3533;
						else
							if (West == West::Up) return 3534;
							else if (West == West::Side) return 3535;
							else return 3536;
					else if (Power == 7)
						if (South == South::Up)
							if (West == West::Up) return 3537;
							else if (West == West::Side) return 3538;
							else return 3539;
						else if (South == South::Side)
							if (West == West::Up) return 3540;
							else if (West == West::Side) return 3541;
							else return 3542;
						else
							if (West == West::Up) return 3543;
							else if (West == West::Side) return 3544;
							else return 3545;
					else if (Power == 8)
						if (South == South::Up)
							if (West == West::Up) return 3546;
							else if (West == West::Side) return 3547;
							else return 3548;
						else if (South == South::Side)
							if (West == West::Up) return 3549;
							else if (West == West::Side) return 3550;
							else return 3551;
						else
							if (West == West::Up) return 3552;
							else if (West == West::Side) return 3553;
							else return 3554;
					else if (Power == 9)
						if (South == South::Up)
							if (West == West::Up) return 3555;
							else if (West == West::Side) return 3556;
							else return 3557;
						else if (South == South::Side)
							if (West == West::Up) return 3558;
							else if (West == West::Side) return 3559;
							else return 3560;
						else
							if (West == West::Up) return 3561;
							else if (West == West::Side) return 3562;
							else return 3563;
					else if (Power == 10)
						if (South == South::Up)
							if (West == West::Up) return 3564;
							else if (West == West::Side) return 3565;
							else return 3566;
						else if (South == South::Side)
							if (West == West::Up) return 3567;
							else if (West == West::Side) return 3568;
							else return 3569;
						else
							if (West == West::Up) return 3570;
							else if (West == West::Side) return 3571;
							else return 3572;
					else if (Power == 11)
						if (South == South::Up)
							if (West == West::Up) return 3573;
							else if (West == West::Side) return 3574;
							else return 3575;
						else if (South == South::Side)
							if (West == West::Up) return 3576;
							else if (West == West::Side) return 3577;
							else return 3578;
						else
							if (West == West::Up) return 3579;
							else if (West == West::Side) return 3580;
							else return 3581;
					else if (Power == 12)
						if (South == South::Up)
							if (West == West::Up) return 3582;
							else if (West == West::Side) return 3583;
							else return 3584;
						else if (South == South::Side)
							if (West == West::Up) return 3585;
							else if (West == West::Side) return 3586;
							else return 3587;
						else
							if (West == West::Up) return 3588;
							else if (West == West::Side) return 3589;
							else return 3590;
					else if (Power == 13)
						if (South == South::Up)
							if (West == West::Up) return 3591;
							else if (West == West::Side) return 3592;
							else return 3593;
						else if (South == South::Side)
							if (West == West::Up) return 3594;
							else if (West == West::Side) return 3595;
							else return 3596;
						else
							if (West == West::Up) return 3597;
							else if (West == West::Side) return 3598;
							else return 3599;
					else if (Power == 14)
						if (South == South::Up)
							if (West == West::Up) return 3600;
							else if (West == West::Side) return 3601;
							else return 3602;
						else if (South == South::Side)
							if (West == West::Up) return 3603;
							else if (West == West::Side) return 3604;
							else return 3605;
						else
							if (West == West::Up) return 3606;
							else if (West == West::Side) return 3607;
							else return 3608;
					else
						if (South == South::Up)
							if (West == West::Up) return 3609;
							else if (West == West::Side) return 3610;
							else return 3611;
						else if (South == South::Side)
							if (West == West::Up) return 3612;
							else if (West == West::Side) return 3613;
							else return 3614;
						else
							if (West == West::Up) return 3615;
							else if (West == West::Side) return 3616;
							else return 3617;
				else if (North == North::Side)
					if (Power == 0)
						if (South == South::Up)
							if (West == West::Up) return 3618;
							else if (West == West::Side) return 3619;
							else return 3620;
						else if (South == South::Side)
							if (West == West::Up) return 3621;
							else if (West == West::Side) return 3622;
							else return 3623;
						else
							if (West == West::Up) return 3624;
							else if (West == West::Side) return 3625;
							else return 3626;
					else if (Power == 1)
						if (South == South::Up)
							if (West == West::Up) return 3627;
							else if (West == West::Side) return 3628;
							else return 3629;
						else if (South == South::Side)
							if (West == West::Up) return 3630;
							else if (West == West::Side) return 3631;
							else return 3632;
						else
							if (West == West::Up) return 3633;
							else if (West == West::Side) return 3634;
							else return 3635;
					else if (Power == 2)
						if (South == South::Up)
							if (West == West::Up) return 3636;
							else if (West == West::Side) return 3637;
							else return 3638;
						else if (South == South::Side)
							if (West == West::Up) return 3639;
							else if (West == West::Side) return 3640;
							else return 3641;
						else
							if (West == West::Up) return 3642;
							else if (West == West::Side) return 3643;
							else return 3644;
					else if (Power == 3)
						if (South == South::Up)
							if (West == West::Up) return 3645;
							else if (West == West::Side) return 3646;
							else return 3647;
						else if (South == South::Side)
							if (West == West::Up) return 3648;
							else if (West == West::Side) return 3649;
							else return 3650;
						else
							if (West == West::Up) return 3651;
							else if (West == West::Side) return 3652;
							else return 3653;
					else if (Power == 4)
						if (South == South::Up)
							if (West == West::Up) return 3654;
							else if (West == West::Side) return 3655;
							else return 3656;
						else if (South == South::Side)
							if (West == West::Up) return 3657;
							else if (West == West::Side) return 3658;
							else return 3659;
						else
							if (West == West::Up) return 3660;
							else if (West == West::Side) return 3661;
							else return 3662;
					else if (Power == 5)
						if (South == South::Up)
							if (West == West::Up) return 3663;
							else if (West == West::Side) return 3664;
							else return 3665;
						else if (South == South::Side)
							if (West == West::Up) return 3666;
							else if (West == West::Side) return 3667;
							else return 3668;
						else
							if (West == West::Up) return 3669;
							else if (West == West::Side) return 3670;
							else return 3671;
					else if (Power == 6)
						if (South == South::Up)
							if (West == West::Up) return 3672;
							else if (West == West::Side) return 3673;
							else return 3674;
						else if (South == South::Side)
							if (West == West::Up) return 3675;
							else if (West == West::Side) return 3676;
							else return 3677;
						else
							if (West == West::Up) return 3678;
							else if (West == West::Side) return 3679;
							else return 3680;
					else if (Power == 7)
						if (South == South::Up)
							if (West == West::Up) return 3681;
							else if (West == West::Side) return 3682;
							else return 3683;
						else if (South == South::Side)
							if (West == West::Up) return 3684;
							else if (West == West::Side) return 3685;
							else return 3686;
						else
							if (West == West::Up) return 3687;
							else if (West == West::Side) return 3688;
							else return 3689;
					else if (Power == 8)
						if (South == South::Up)
							if (West == West::Up) return 3690;
							else if (West == West::Side) return 3691;
							else return 3692;
						else if (South == South::Side)
							if (West == West::Up) return 3693;
							else if (West == West::Side) return 3694;
							else return 3695;
						else
							if (West == West::Up) return 3696;
							else if (West == West::Side) return 3697;
							else return 3698;
					else if (Power == 9)
						if (South == South::Up)
							if (West == West::Up) return 3699;
							else if (West == West::Side) return 3700;
							else return 3701;
						else if (South == South::Side)
							if (West == West::Up) return 3702;
							else if (West == West::Side) return 3703;
							else return 3704;
						else
							if (West == West::Up) return 3705;
							else if (West == West::Side) return 3706;
							else return 3707;
					else if (Power == 10)
						if (South == South::Up)
							if (West == West::Up) return 3708;
							else if (West == West::Side) return 3709;
							else return 3710;
						else if (South == South::Side)
							if (West == West::Up) return 3711;
							else if (West == West::Side) return 3712;
							else return 3713;
						else
							if (West == West::Up) return 3714;
							else if (West == West::Side) return 3715;
							else return 3716;
					else if (Power == 11)
						if (South == South::Up)
							if (West == West::Up) return 3717;
							else if (West == West::Side) return 3718;
							else return 3719;
						else if (South == South::Side)
							if (West == West::Up) return 3720;
							else if (West == West::Side) return 3721;
							else return 3722;
						else
							if (West == West::Up) return 3723;
							else if (West == West::Side) return 3724;
							else return 3725;
					else if (Power == 12)
						if (South == South::Up)
							if (West == West::Up) return 3726;
							else if (West == West::Side) return 3727;
							else return 3728;
						else if (South == South::Side)
							if (West == West::Up) return 3729;
							else if (West == West::Side) return 3730;
							else return 3731;
						else
							if (West == West::Up) return 3732;
							else if (West == West::Side) return 3733;
							else return 3734;
					else if (Power == 13)
						if (South == South::Up)
							if (West == West::Up) return 3735;
							else if (West == West::Side) return 3736;
							else return 3737;
						else if (South == South::Side)
							if (West == West::Up) return 3738;
							else if (West == West::Side) return 3739;
							else return 3740;
						else
							if (West == West::Up) return 3741;
							else if (West == West::Side) return 3742;
							else return 3743;
					else if (Power == 14)
						if (South == South::Up)
							if (West == West::Up) return 3744;
							else if (West == West::Side) return 3745;
							else return 3746;
						else if (South == South::Side)
							if (West == West::Up) return 3747;
							else if (West == West::Side) return 3748;
							else return 3749;
						else
							if (West == West::Up) return 3750;
							else if (West == West::Side) return 3751;
							else return 3752;
					else
						if (South == South::Up)
							if (West == West::Up) return 3753;
							else if (West == West::Side) return 3754;
							else return 3755;
						else if (South == South::Side)
							if (West == West::Up) return 3756;
							else if (West == West::Side) return 3757;
							else return 3758;
						else
							if (West == West::Up) return 3759;
							else if (West == West::Side) return 3760;
							else return 3761;
				else
					if (Power == 0)
						if (South == South::Up)
							if (West == West::Up) return 3762;
							else if (West == West::Side) return 3763;
							else return 3764;
						else if (South == South::Side)
							if (West == West::Up) return 3765;
							else if (West == West::Side) return 3766;
							else return 3767;
						else
							if (West == West::Up) return 3768;
							else if (West == West::Side) return 3769;
							else return 3770;
					else if (Power == 1)
						if (South == South::Up)
							if (West == West::Up) return 3771;
							else if (West == West::Side) return 3772;
							else return 3773;
						else if (South == South::Side)
							if (West == West::Up) return 3774;
							else if (West == West::Side) return 3775;
							else return 3776;
						else
							if (West == West::Up) return 3777;
							else if (West == West::Side) return 3778;
							else return 3779;
					else if (Power == 2)
						if (South == South::Up)
							if (West == West::Up) return 3780;
							else if (West == West::Side) return 3781;
							else return 3782;
						else if (South == South::Side)
							if (West == West::Up) return 3783;
							else if (West == West::Side) return 3784;
							else return 3785;
						else
							if (West == West::Up) return 3786;
							else if (West == West::Side) return 3787;
							else return 3788;
					else if (Power == 3)
						if (South == South::Up)
							if (West == West::Up) return 3789;
							else if (West == West::Side) return 3790;
							else return 3791;
						else if (South == South::Side)
							if (West == West::Up) return 3792;
							else if (West == West::Side) return 3793;
							else return 3794;
						else
							if (West == West::Up) return 3795;
							else if (West == West::Side) return 3796;
							else return 3797;
					else if (Power == 4)
						if (South == South::Up)
							if (West == West::Up) return 3798;
							else if (West == West::Side) return 3799;
							else return 3800;
						else if (South == South::Side)
							if (West == West::Up) return 3801;
							else if (West == West::Side) return 3802;
							else return 3803;
						else
							if (West == West::Up) return 3804;
							else if (West == West::Side) return 3805;
							else return 3806;
					else if (Power == 5)
						if (South == South::Up)
							if (West == West::Up) return 3807;
							else if (West == West::Side) return 3808;
							else return 3809;
						else if (South == South::Side)
							if (West == West::Up) return 3810;
							else if (West == West::Side) return 3811;
							else return 3812;
						else
							if (West == West::Up) return 3813;
							else if (West == West::Side) return 3814;
							else return 3815;
					else if (Power == 6)
						if (South == South::Up)
							if (West == West::Up) return 3816;
							else if (West == West::Side) return 3817;
							else return 3818;
						else if (South == South::Side)
							if (West == West::Up) return 3819;
							else if (West == West::Side) return 3820;
							else return 3821;
						else
							if (West == West::Up) return 3822;
							else if (West == West::Side) return 3823;
							else return 3824;
					else if (Power == 7)
						if (South == South::Up)
							if (West == West::Up) return 3825;
							else if (West == West::Side) return 3826;
							else return 3827;
						else if (South == South::Side)
							if (West == West::Up) return 3828;
							else if (West == West::Side) return 3829;
							else return 3830;
						else
							if (West == West::Up) return 3831;
							else if (West == West::Side) return 3832;
							else return 3833;
					else if (Power == 8)
						if (South == South::Up)
							if (West == West::Up) return 3834;
							else if (West == West::Side) return 3835;
							else return 3836;
						else if (South == South::Side)
							if (West == West::Up) return 3837;
							else if (West == West::Side) return 3838;
							else return 3839;
						else
							if (West == West::Up) return 3840;
							else if (West == West::Side) return 3841;
							else return 3842;
					else if (Power == 9)
						if (South == South::Up)
							if (West == West::Up) return 3843;
							else if (West == West::Side) return 3844;
							else return 3845;
						else if (South == South::Side)
							if (West == West::Up) return 3846;
							else if (West == West::Side) return 3847;
							else return 3848;
						else
							if (West == West::Up) return 3849;
							else if (West == West::Side) return 3850;
							else return 3851;
					else if (Power == 10)
						if (South == South::Up)
							if (West == West::Up) return 3852;
							else if (West == West::Side) return 3853;
							else return 3854;
						else if (South == South::Side)
							if (West == West::Up) return 3855;
							else if (West == West::Side) return 3856;
							else return 3857;
						else
							if (West == West::Up) return 3858;
							else if (West == West::Side) return 3859;
							else return 3860;
					else if (Power == 11)
						if (South == South::Up)
							if (West == West::Up) return 3861;
							else if (West == West::Side) return 3862;
							else return 3863;
						else if (South == South::Side)
							if (West == West::Up) return 3864;
							else if (West == West::Side) return 3865;
							else return 3866;
						else
							if (West == West::Up) return 3867;
							else if (West == West::Side) return 3868;
							else return 3869;
					else if (Power == 12)
						if (South == South::Up)
							if (West == West::Up) return 3870;
							else if (West == West::Side) return 3871;
							else return 3872;
						else if (South == South::Side)
							if (West == West::Up) return 3873;
							else if (West == West::Side) return 3874;
							else return 3875;
						else
							if (West == West::Up) return 3876;
							else if (West == West::Side) return 3877;
							else return 3878;
					else if (Power == 13)
						if (South == South::Up)
							if (West == West::Up) return 3879;
							else if (West == West::Side) return 3880;
							else return 3881;
						else if (South == South::Side)
							if (West == West::Up) return 3882;
							else if (West == West::Side) return 3883;
							else return 3884;
						else
							if (West == West::Up) return 3885;
							else if (West == West::Side) return 3886;
							else return 3887;
					else if (Power == 14)
						if (South == South::Up)
							if (West == West::Up) return 3888;
							else if (West == West::Side) return 3889;
							else return 3890;
						else if (South == South::Side)
							if (West == West::Up) return 3891;
							else if (West == West::Side) return 3892;
							else return 3893;
						else
							if (West == West::Up) return 3894;
							else if (West == West::Side) return 3895;
							else return 3896;
					else
						if (South == South::Up)
							if (West == West::Up) return 3897;
							else if (West == West::Side) return 3898;
							else return 3899;
						else if (South == South::Side)
							if (West == West::Up) return 3900;
							else if (West == West::Side) return 3901;
							else return 3902;
						else
							if (West == West::Up) return 3903;
							else if (West == West::Side) return 3904;
							else return 3905;
			else
				if (North == North::Up)
					if (Power == 0)
						if (South == South::Up)
							if (West == West::Up) return 3906;
							else if (West == West::Side) return 3907;
							else return 3908;
						else if (South == South::Side)
							if (West == West::Up) return 3909;
							else if (West == West::Side) return 3910;
							else return 3911;
						else
							if (West == West::Up) return 3912;
							else if (West == West::Side) return 3913;
							else return 3914;
					else if (Power == 1)
						if (South == South::Up)
							if (West == West::Up) return 3915;
							else if (West == West::Side) return 3916;
							else return 3917;
						else if (South == South::Side)
							if (West == West::Up) return 3918;
							else if (West == West::Side) return 3919;
							else return 3920;
						else
							if (West == West::Up) return 3921;
							else if (West == West::Side) return 3922;
							else return 3923;
					else if (Power == 2)
						if (South == South::Up)
							if (West == West::Up) return 3924;
							else if (West == West::Side) return 3925;
							else return 3926;
						else if (South == South::Side)
							if (West == West::Up) return 3927;
							else if (West == West::Side) return 3928;
							else return 3929;
						else
							if (West == West::Up) return 3930;
							else if (West == West::Side) return 3931;
							else return 3932;
					else if (Power == 3)
						if (South == South::Up)
							if (West == West::Up) return 3933;
							else if (West == West::Side) return 3934;
							else return 3935;
						else if (South == South::Side)
							if (West == West::Up) return 3936;
							else if (West == West::Side) return 3937;
							else return 3938;
						else
							if (West == West::Up) return 3939;
							else if (West == West::Side) return 3940;
							else return 3941;
					else if (Power == 4)
						if (South == South::Up)
							if (West == West::Up) return 3942;
							else if (West == West::Side) return 3943;
							else return 3944;
						else if (South == South::Side)
							if (West == West::Up) return 3945;
							else if (West == West::Side) return 3946;
							else return 3947;
						else
							if (West == West::Up) return 3948;
							else if (West == West::Side) return 3949;
							else return 3950;
					else if (Power == 5)
						if (South == South::Up)
							if (West == West::Up) return 3951;
							else if (West == West::Side) return 3952;
							else return 3953;
						else if (South == South::Side)
							if (West == West::Up) return 3954;
							else if (West == West::Side) return 3955;
							else return 3956;
						else
							if (West == West::Up) return 3957;
							else if (West == West::Side) return 3958;
							else return 3959;
					else if (Power == 6)
						if (South == South::Up)
							if (West == West::Up) return 3960;
							else if (West == West::Side) return 3961;
							else return 3962;
						else if (South == South::Side)
							if (West == West::Up) return 3963;
							else if (West == West::Side) return 3964;
							else return 3965;
						else
							if (West == West::Up) return 3966;
							else if (West == West::Side) return 3967;
							else return 3968;
					else if (Power == 7)
						if (South == South::Up)
							if (West == West::Up) return 3969;
							else if (West == West::Side) return 3970;
							else return 3971;
						else if (South == South::Side)
							if (West == West::Up) return 3972;
							else if (West == West::Side) return 3973;
							else return 3974;
						else
							if (West == West::Up) return 3975;
							else if (West == West::Side) return 3976;
							else return 3977;
					else if (Power == 8)
						if (South == South::Up)
							if (West == West::Up) return 3978;
							else if (West == West::Side) return 3979;
							else return 3980;
						else if (South == South::Side)
							if (West == West::Up) return 3981;
							else if (West == West::Side) return 3982;
							else return 3983;
						else
							if (West == West::Up) return 3984;
							else if (West == West::Side) return 3985;
							else return 3986;
					else if (Power == 9)
						if (South == South::Up)
							if (West == West::Up) return 3987;
							else if (West == West::Side) return 3988;
							else return 3989;
						else if (South == South::Side)
							if (West == West::Up) return 3990;
							else if (West == West::Side) return 3991;
							else return 3992;
						else
							if (West == West::Up) return 3993;
							else if (West == West::Side) return 3994;
							else return 3995;
					else if (Power == 10)
						if (South == South::Up)
							if (West == West::Up) return 3996;
							else if (West == West::Side) return 3997;
							else return 3998;
						else if (South == South::Side)
							if (West == West::Up) return 3999;
							else if (West == West::Side) return 4000;
							else return 4001;
						else
							if (West == West::Up) return 4002;
							else if (West == West::Side) return 4003;
							else return 4004;
					else if (Power == 11)
						if (South == South::Up)
							if (West == West::Up) return 4005;
							else if (West == West::Side) return 4006;
							else return 4007;
						else if (South == South::Side)
							if (West == West::Up) return 4008;
							else if (West == West::Side) return 4009;
							else return 4010;
						else
							if (West == West::Up) return 4011;
							else if (West == West::Side) return 4012;
							else return 4013;
					else if (Power == 12)
						if (South == South::Up)
							if (West == West::Up) return 4014;
							else if (West == West::Side) return 4015;
							else return 4016;
						else if (South == South::Side)
							if (West == West::Up) return 4017;
							else if (West == West::Side) return 4018;
							else return 4019;
						else
							if (West == West::Up) return 4020;
							else if (West == West::Side) return 4021;
							else return 4022;
					else if (Power == 13)
						if (South == South::Up)
							if (West == West::Up) return 4023;
							else if (West == West::Side) return 4024;
							else return 4025;
						else if (South == South::Side)
							if (West == West::Up) return 4026;
							else if (West == West::Side) return 4027;
							else return 4028;
						else
							if (West == West::Up) return 4029;
							else if (West == West::Side) return 4030;
							else return 4031;
					else if (Power == 14)
						if (South == South::Up)
							if (West == West::Up) return 4032;
							else if (West == West::Side) return 4033;
							else return 4034;
						else if (South == South::Side)
							if (West == West::Up) return 4035;
							else if (West == West::Side) return 4036;
							else return 4037;
						else
							if (West == West::Up) return 4038;
							else if (West == West::Side) return 4039;
							else return 4040;
					else
						if (South == South::Up)
							if (West == West::Up) return 4041;
							else if (West == West::Side) return 4042;
							else return 4043;
						else if (South == South::Side)
							if (West == West::Up) return 4044;
							else if (West == West::Side) return 4045;
							else return 4046;
						else
							if (West == West::Up) return 4047;
							else if (West == West::Side) return 4048;
							else return 4049;
				else if (North == North::Side)
					if (Power == 0)
						if (South == South::Up)
							if (West == West::Up) return 4050;
							else if (West == West::Side) return 4051;
							else return 4052;
						else if (South == South::Side)
							if (West == West::Up) return 4053;
							else if (West == West::Side) return 4054;
							else return 4055;
						else
							if (West == West::Up) return 4056;
							else if (West == West::Side) return 4057;
							else return 4058;
					else if (Power == 1)
						if (South == South::Up)
							if (West == West::Up) return 4059;
							else if (West == West::Side) return 4060;
							else return 4061;
						else if (South == South::Side)
							if (West == West::Up) return 4062;
							else if (West == West::Side) return 4063;
							else return 4064;
						else
							if (West == West::Up) return 4065;
							else if (West == West::Side) return 4066;
							else return 4067;
					else if (Power == 2)
						if (South == South::Up)
							if (West == West::Up) return 4068;
							else if (West == West::Side) return 4069;
							else return 4070;
						else if (South == South::Side)
							if (West == West::Up) return 4071;
							else if (West == West::Side) return 4072;
							else return 4073;
						else
							if (West == West::Up) return 4074;
							else if (West == West::Side) return 4075;
							else return 4076;
					else if (Power == 3)
						if (South == South::Up)
							if (West == West::Up) return 4077;
							else if (West == West::Side) return 4078;
							else return 4079;
						else if (South == South::Side)
							if (West == West::Up) return 4080;
							else if (West == West::Side) return 4081;
							else return 4082;
						else
							if (West == West::Up) return 4083;
							else if (West == West::Side) return 4084;
							else return 4085;
					else if (Power == 4)
						if (South == South::Up)
							if (West == West::Up) return 4086;
							else if (West == West::Side) return 4087;
							else return 4088;
						else if (South == South::Side)
							if (West == West::Up) return 4089;
							else if (West == West::Side) return 4090;
							else return 4091;
						else
							if (West == West::Up) return 4092;
							else if (West == West::Side) return 4093;
							else return 4094;
					else if (Power == 5)
						if (South == South::Up)
							if (West == West::Up) return 4095;
							else if (West == West::Side) return 4096;
							else return 4097;
						else if (South == South::Side)
							if (West == West::Up) return 4098;
							else if (West == West::Side) return 4099;
							else return 4100;
						else
							if (West == West::Up) return 4101;
							else if (West == West::Side) return 4102;
							else return 4103;
					else if (Power == 6)
						if (South == South::Up)
							if (West == West::Up) return 4104;
							else if (West == West::Side) return 4105;
							else return 4106;
						else if (South == South::Side)
							if (West == West::Up) return 4107;
							else if (West == West::Side) return 4108;
							else return 4109;
						else
							if (West == West::Up) return 4110;
							else if (West == West::Side) return 4111;
							else return 4112;
					else if (Power == 7)
						if (South == South::Up)
							if (West == West::Up) return 4113;
							else if (West == West::Side) return 4114;
							else return 4115;
						else if (South == South::Side)
							if (West == West::Up) return 4116;
							else if (West == West::Side) return 4117;
							else return 4118;
						else
							if (West == West::Up) return 4119;
							else if (West == West::Side) return 4120;
							else return 4121;
					else if (Power == 8)
						if (South == South::Up)
							if (West == West::Up) return 4122;
							else if (West == West::Side) return 4123;
							else return 4124;
						else if (South == South::Side)
							if (West == West::Up) return 4125;
							else if (West == West::Side) return 4126;
							else return 4127;
						else
							if (West == West::Up) return 4128;
							else if (West == West::Side) return 4129;
							else return 4130;
					else if (Power == 9)
						if (South == South::Up)
							if (West == West::Up) return 4131;
							else if (West == West::Side) return 4132;
							else return 4133;
						else if (South == South::Side)
							if (West == West::Up) return 4134;
							else if (West == West::Side) return 4135;
							else return 4136;
						else
							if (West == West::Up) return 4137;
							else if (West == West::Side) return 4138;
							else return 4139;
					else if (Power == 10)
						if (South == South::Up)
							if (West == West::Up) return 4140;
							else if (West == West::Side) return 4141;
							else return 4142;
						else if (South == South::Side)
							if (West == West::Up) return 4143;
							else if (West == West::Side) return 4144;
							else return 4145;
						else
							if (West == West::Up) return 4146;
							else if (West == West::Side) return 4147;
							else return 4148;
					else if (Power == 11)
						if (South == South::Up)
							if (West == West::Up) return 4149;
							else if (West == West::Side) return 4150;
							else return 4151;
						else if (South == South::Side)
							if (West == West::Up) return 4152;
							else if (West == West::Side) return 4153;
							else return 4154;
						else
							if (West == West::Up) return 4155;
							else if (West == West::Side) return 4156;
							else return 4157;
					else if (Power == 12)
						if (South == South::Up)
							if (West == West::Up) return 4158;
							else if (West == West::Side) return 4159;
							else return 4160;
						else if (South == South::Side)
							if (West == West::Up) return 4161;
							else if (West == West::Side) return 4162;
							else return 4163;
						else
							if (West == West::Up) return 4164;
							else if (West == West::Side) return 4165;
							else return 4166;
					else if (Power == 13)
						if (South == South::Up)
							if (West == West::Up) return 4167;
							else if (West == West::Side) return 4168;
							else return 4169;
						else if (South == South::Side)
							if (West == West::Up) return 4170;
							else if (West == West::Side) return 4171;
							else return 4172;
						else
							if (West == West::Up) return 4173;
							else if (West == West::Side) return 4174;
							else return 4175;
					else if (Power == 14)
						if (South == South::Up)
							if (West == West::Up) return 4176;
							else if (West == West::Side) return 4177;
							else return 4178;
						else if (South == South::Side)
							if (West == West::Up) return 4179;
							else if (West == West::Side) return 4180;
							else return 4181;
						else
							if (West == West::Up) return 4182;
							else if (West == West::Side) return 4183;
							else return 4184;
					else
						if (South == South::Up)
							if (West == West::Up) return 4185;
							else if (West == West::Side) return 4186;
							else return 4187;
						else if (South == South::Side)
							if (West == West::Up) return 4188;
							else if (West == West::Side) return 4189;
							else return 4190;
						else
							if (West == West::Up) return 4191;
							else if (West == West::Side) return 4192;
							else return 4193;
				else
					if (Power == 0)
						if (South == South::Up)
							if (West == West::Up) return 4194;
							else if (West == West::Side) return 4195;
							else return 4196;
						else if (South == South::Side)
							if (West == West::Up) return 4197;
							else if (West == West::Side) return 4198;
							else return 4199;
						else
							if (West == West::Up) return 4200;
							else if (West == West::Side) return 4201;
							else return 4202;
					else if (Power == 1)
						if (South == South::Up)
							if (West == West::Up) return 4203;
							else if (West == West::Side) return 4204;
							else return 4205;
						else if (South == South::Side)
							if (West == West::Up) return 4206;
							else if (West == West::Side) return 4207;
							else return 4208;
						else
							if (West == West::Up) return 4209;
							else if (West == West::Side) return 4210;
							else return 4211;
					else if (Power == 2)
						if (South == South::Up)
							if (West == West::Up) return 4212;
							else if (West == West::Side) return 4213;
							else return 4214;
						else if (South == South::Side)
							if (West == West::Up) return 4215;
							else if (West == West::Side) return 4216;
							else return 4217;
						else
							if (West == West::Up) return 4218;
							else if (West == West::Side) return 4219;
							else return 4220;
					else if (Power == 3)
						if (South == South::Up)
							if (West == West::Up) return 4221;
							else if (West == West::Side) return 4222;
							else return 4223;
						else if (South == South::Side)
							if (West == West::Up) return 4224;
							else if (West == West::Side) return 4225;
							else return 4226;
						else
							if (West == West::Up) return 4227;
							else if (West == West::Side) return 4228;
							else return 4229;
					else if (Power == 4)
						if (South == South::Up)
							if (West == West::Up) return 4230;
							else if (West == West::Side) return 4231;
							else return 4232;
						else if (South == South::Side)
							if (West == West::Up) return 4233;
							else if (West == West::Side) return 4234;
							else return 4235;
						else
							if (West == West::Up) return 4236;
							else if (West == West::Side) return 4237;
							else return 4238;
					else if (Power == 5)
						if (South == South::Up)
							if (West == West::Up) return 4239;
							else if (West == West::Side) return 4240;
							else return 4241;
						else if (South == South::Side)
							if (West == West::Up) return 4242;
							else if (West == West::Side) return 4243;
							else return 4244;
						else
							if (West == West::Up) return 4245;
							else if (West == West::Side) return 4246;
							else return 4247;
					else if (Power == 6)
						if (South == South::Up)
							if (West == West::Up) return 4248;
							else if (West == West::Side) return 4249;
							else return 4250;
						else if (South == South::Side)
							if (West == West::Up) return 4251;
							else if (West == West::Side) return 4252;
							else return 4253;
						else
							if (West == West::Up) return 4254;
							else if (West == West::Side) return 4255;
							else return 4256;
					else if (Power == 7)
						if (South == South::Up)
							if (West == West::Up) return 4257;
							else if (West == West::Side) return 4258;
							else return 4259;
						else if (South == South::Side)
							if (West == West::Up) return 4260;
							else if (West == West::Side) return 4261;
							else return 4262;
						else
							if (West == West::Up) return 4263;
							else if (West == West::Side) return 4264;
							else return 4265;
					else if (Power == 8)
						if (South == South::Up)
							if (West == West::Up) return 4266;
							else if (West == West::Side) return 4267;
							else return 4268;
						else if (South == South::Side)
							if (West == West::Up) return 4269;
							else if (West == West::Side) return 4270;
							else return 4271;
						else
							if (West == West::Up) return 4272;
							else if (West == West::Side) return 4273;
							else return 4274;
					else if (Power == 9)
						if (South == South::Up)
							if (West == West::Up) return 4275;
							else if (West == West::Side) return 4276;
							else return 4277;
						else if (South == South::Side)
							if (West == West::Up) return 4278;
							else if (West == West::Side) return 4279;
							else return 4280;
						else
							if (West == West::Up) return 4281;
							else if (West == West::Side) return 4282;
							else return 4283;
					else if (Power == 10)
						if (South == South::Up)
							if (West == West::Up) return 4284;
							else if (West == West::Side) return 4285;
							else return 4286;
						else if (South == South::Side)
							if (West == West::Up) return 4287;
							else if (West == West::Side) return 4288;
							else return 4289;
						else
							if (West == West::Up) return 4290;
							else if (West == West::Side) return 4291;
							else return 4292;
					else if (Power == 11)
						if (South == South::Up)
							if (West == West::Up) return 4293;
							else if (West == West::Side) return 4294;
							else return 4295;
						else if (South == South::Side)
							if (West == West::Up) return 4296;
							else if (West == West::Side) return 4297;
							else return 4298;
						else
							if (West == West::Up) return 4299;
							else if (West == West::Side) return 4300;
							else return 4301;
					else if (Power == 12)
						if (South == South::Up)
							if (West == West::Up) return 4302;
							else if (West == West::Side) return 4303;
							else return 4304;
						else if (South == South::Side)
							if (West == West::Up) return 4305;
							else if (West == West::Side) return 4306;
							else return 4307;
						else
							if (West == West::Up) return 4308;
							else if (West == West::Side) return 4309;
							else return 4310;
					else if (Power == 13)
						if (South == South::Up)
							if (West == West::Up) return 4311;
							else if (West == West::Side) return 4312;
							else return 4313;
						else if (South == South::Side)
							if (West == West::Up) return 4314;
							else if (West == West::Side) return 4315;
							else return 4316;
						else
							if (West == West::Up) return 4317;
							else if (West == West::Side) return 4318;
							else return 4319;
					else if (Power == 14)
						if (South == South::Up)
							if (West == West::Up) return 4320;
							else if (West == West::Side) return 4321;
							else return 4322;
						else if (South == South::Side)
							if (West == West::Up) return 4323;
							else if (West == West::Side) return 4324;
							else return 4325;
						else
							if (West == West::Up) return 4326;
							else if (West == West::Side) return 4327;
							else return 4328;
					else
						if (South == South::Up)
							if (West == West::Up) return 4329;
							else if (West == West::Side) return 4330;
							else return 4331;
						else if (South == South::Side)
							if (West == West::Up) return 4332;
							else if (West == West::Side) return 4333;
							else return 4334;
						else
							if (West == West::Up) return 4335;
							else if (West == West::Side) return 4336;
							else return 4337;
		}
		BlockState RedstoneWire();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		unsigned char Power(BlockState Block);
		enum South South(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace ReinforcedDeepslate
	{
		constexpr BlockState ReinforcedDeepslate()
		{
			return 27665;
		}
	}
	namespace Repeater
	{
		constexpr BlockState Repeater(const unsigned char Delay, const eBlockFace Facing, const bool Locked, const bool Powered)
		{
			if (Delay == 1)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Locked)
						if (Powered) return 6060;
						else return 6061;
					else
						if (Powered) return 6062;
						else return 6063;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Locked)
						if (Powered) return 6064;
						else return 6065;
					else
						if (Powered) return 6066;
						else return 6067;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Locked)
						if (Powered) return 6068;
						else return 6069;
					else
						if (Powered) return 6070;
						else return 6071;
				else
					if (Locked)
						if (Powered) return 6072;
						else return 6073;
					else
						if (Powered) return 6074;
						else return 6075;
			else if (Delay == 2)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Locked)
						if (Powered) return 6076;
						else return 6077;
					else
						if (Powered) return 6078;
						else return 6079;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Locked)
						if (Powered) return 6080;
						else return 6081;
					else
						if (Powered) return 6082;
						else return 6083;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Locked)
						if (Powered) return 6084;
						else return 6085;
					else
						if (Powered) return 6086;
						else return 6087;
				else
					if (Locked)
						if (Powered) return 6088;
						else return 6089;
					else
						if (Powered) return 6090;
						else return 6091;
			else if (Delay == 3)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Locked)
						if (Powered) return 6092;
						else return 6093;
					else
						if (Powered) return 6094;
						else return 6095;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Locked)
						if (Powered) return 6096;
						else return 6097;
					else
						if (Powered) return 6098;
						else return 6099;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Locked)
						if (Powered) return 6100;
						else return 6101;
					else
						if (Powered) return 6102;
						else return 6103;
				else
					if (Locked)
						if (Powered) return 6104;
						else return 6105;
					else
						if (Powered) return 6106;
						else return 6107;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Locked)
						if (Powered) return 6108;
						else return 6109;
					else
						if (Powered) return 6110;
						else return 6111;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Locked)
						if (Powered) return 6112;
						else return 6113;
					else
						if (Powered) return 6114;
						else return 6115;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Locked)
						if (Powered) return 6116;
						else return 6117;
					else
						if (Powered) return 6118;
						else return 6119;
				else
					if (Locked)
						if (Powered) return 6120;
						else return 6121;
					else
						if (Powered) return 6122;
						else return 6123;
		}
		BlockState Repeater();
		unsigned char Delay(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Locked(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace RepeatingCommandBlock
	{
		constexpr BlockState RepeatingCommandBlock(const bool Conditional, const eBlockFace Facing)
		{
			if (Conditional)
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13538;
				else if (Facing == eBlockFace::BLOCK_FACE_XP) return 13539;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13540;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13541;
				else if (Facing == eBlockFace::BLOCK_FACE_YP) return 13542;
				else return 13543;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13544;
				else if (Facing == eBlockFace::BLOCK_FACE_XP) return 13545;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13546;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13547;
				else if (Facing == eBlockFace::BLOCK_FACE_YP) return 13548;
				else return 13549;
		}
		BlockState RepeatingCommandBlock();
		bool Conditional(BlockState Block);
		eBlockFace Facing(BlockState Block);
	}
	namespace ResinBlock
	{
		constexpr BlockState ResinBlock()
		{
			return 7643;
		}
	}
	namespace ResinBrickSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState ResinBrickSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 7725;
				else return 7726;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 7727;
				else return 7728;
			else
				if (Waterlogged) return 7729;
				else return 7730;
		}
		BlockState ResinBrickSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace ResinBrickStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState ResinBrickStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7645;
						else return 7646;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7647;
						else return 7648;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7649;
						else return 7650;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7651;
						else return 7652;
					else
						if (Waterlogged) return 7653;
						else return 7654;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7655;
						else return 7656;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7657;
						else return 7658;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7659;
						else return 7660;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7661;
						else return 7662;
					else
						if (Waterlogged) return 7663;
						else return 7664;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7665;
						else return 7666;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7667;
						else return 7668;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7669;
						else return 7670;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7671;
						else return 7672;
					else
						if (Waterlogged) return 7673;
						else return 7674;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7675;
						else return 7676;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7677;
						else return 7678;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7679;
						else return 7680;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7681;
						else return 7682;
					else
						if (Waterlogged) return 7683;
						else return 7684;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7685;
						else return 7686;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7687;
						else return 7688;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7689;
						else return 7690;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7691;
						else return 7692;
					else
						if (Waterlogged) return 7693;
						else return 7694;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7695;
						else return 7696;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7697;
						else return 7698;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7699;
						else return 7700;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7701;
						else return 7702;
					else
						if (Waterlogged) return 7703;
						else return 7704;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7705;
						else return 7706;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7707;
						else return 7708;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7709;
						else return 7710;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7711;
						else return 7712;
					else
						if (Waterlogged) return 7713;
						else return 7714;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7715;
						else return 7716;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7717;
						else return 7718;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7719;
						else return 7720;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7721;
						else return 7722;
					else
						if (Waterlogged) return 7723;
						else return 7724;
		}
		BlockState ResinBrickStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace ResinBrickWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState ResinBrickWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7731;
								else if (West == West::Low) return 7732;
								else return 7733;
							else
								if (West == West::None) return 7734;
								else if (West == West::Low) return 7735;
								else return 7736;
						else
							if (Waterlogged)
								if (West == West::None) return 7737;
								else if (West == West::Low) return 7738;
								else return 7739;
							else
								if (West == West::None) return 7740;
								else if (West == West::Low) return 7741;
								else return 7742;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7743;
								else if (West == West::Low) return 7744;
								else return 7745;
							else
								if (West == West::None) return 7746;
								else if (West == West::Low) return 7747;
								else return 7748;
						else
							if (Waterlogged)
								if (West == West::None) return 7749;
								else if (West == West::Low) return 7750;
								else return 7751;
							else
								if (West == West::None) return 7752;
								else if (West == West::Low) return 7753;
								else return 7754;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7755;
								else if (West == West::Low) return 7756;
								else return 7757;
							else
								if (West == West::None) return 7758;
								else if (West == West::Low) return 7759;
								else return 7760;
						else
							if (Waterlogged)
								if (West == West::None) return 7761;
								else if (West == West::Low) return 7762;
								else return 7763;
							else
								if (West == West::None) return 7764;
								else if (West == West::Low) return 7765;
								else return 7766;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7767;
								else if (West == West::Low) return 7768;
								else return 7769;
							else
								if (West == West::None) return 7770;
								else if (West == West::Low) return 7771;
								else return 7772;
						else
							if (Waterlogged)
								if (West == West::None) return 7773;
								else if (West == West::Low) return 7774;
								else return 7775;
							else
								if (West == West::None) return 7776;
								else if (West == West::Low) return 7777;
								else return 7778;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7779;
								else if (West == West::Low) return 7780;
								else return 7781;
							else
								if (West == West::None) return 7782;
								else if (West == West::Low) return 7783;
								else return 7784;
						else
							if (Waterlogged)
								if (West == West::None) return 7785;
								else if (West == West::Low) return 7786;
								else return 7787;
							else
								if (West == West::None) return 7788;
								else if (West == West::Low) return 7789;
								else return 7790;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7791;
								else if (West == West::Low) return 7792;
								else return 7793;
							else
								if (West == West::None) return 7794;
								else if (West == West::Low) return 7795;
								else return 7796;
						else
							if (Waterlogged)
								if (West == West::None) return 7797;
								else if (West == West::Low) return 7798;
								else return 7799;
							else
								if (West == West::None) return 7800;
								else if (West == West::Low) return 7801;
								else return 7802;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7803;
								else if (West == West::Low) return 7804;
								else return 7805;
							else
								if (West == West::None) return 7806;
								else if (West == West::Low) return 7807;
								else return 7808;
						else
							if (Waterlogged)
								if (West == West::None) return 7809;
								else if (West == West::Low) return 7810;
								else return 7811;
							else
								if (West == West::None) return 7812;
								else if (West == West::Low) return 7813;
								else return 7814;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7815;
								else if (West == West::Low) return 7816;
								else return 7817;
							else
								if (West == West::None) return 7818;
								else if (West == West::Low) return 7819;
								else return 7820;
						else
							if (Waterlogged)
								if (West == West::None) return 7821;
								else if (West == West::Low) return 7822;
								else return 7823;
							else
								if (West == West::None) return 7824;
								else if (West == West::Low) return 7825;
								else return 7826;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7827;
								else if (West == West::Low) return 7828;
								else return 7829;
							else
								if (West == West::None) return 7830;
								else if (West == West::Low) return 7831;
								else return 7832;
						else
							if (Waterlogged)
								if (West == West::None) return 7833;
								else if (West == West::Low) return 7834;
								else return 7835;
							else
								if (West == West::None) return 7836;
								else if (West == West::Low) return 7837;
								else return 7838;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7839;
								else if (West == West::Low) return 7840;
								else return 7841;
							else
								if (West == West::None) return 7842;
								else if (West == West::Low) return 7843;
								else return 7844;
						else
							if (Waterlogged)
								if (West == West::None) return 7845;
								else if (West == West::Low) return 7846;
								else return 7847;
							else
								if (West == West::None) return 7848;
								else if (West == West::Low) return 7849;
								else return 7850;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7851;
								else if (West == West::Low) return 7852;
								else return 7853;
							else
								if (West == West::None) return 7854;
								else if (West == West::Low) return 7855;
								else return 7856;
						else
							if (Waterlogged)
								if (West == West::None) return 7857;
								else if (West == West::Low) return 7858;
								else return 7859;
							else
								if (West == West::None) return 7860;
								else if (West == West::Low) return 7861;
								else return 7862;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7863;
								else if (West == West::Low) return 7864;
								else return 7865;
							else
								if (West == West::None) return 7866;
								else if (West == West::Low) return 7867;
								else return 7868;
						else
							if (Waterlogged)
								if (West == West::None) return 7869;
								else if (West == West::Low) return 7870;
								else return 7871;
							else
								if (West == West::None) return 7872;
								else if (West == West::Low) return 7873;
								else return 7874;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7875;
								else if (West == West::Low) return 7876;
								else return 7877;
							else
								if (West == West::None) return 7878;
								else if (West == West::Low) return 7879;
								else return 7880;
						else
							if (Waterlogged)
								if (West == West::None) return 7881;
								else if (West == West::Low) return 7882;
								else return 7883;
							else
								if (West == West::None) return 7884;
								else if (West == West::Low) return 7885;
								else return 7886;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7887;
								else if (West == West::Low) return 7888;
								else return 7889;
							else
								if (West == West::None) return 7890;
								else if (West == West::Low) return 7891;
								else return 7892;
						else
							if (Waterlogged)
								if (West == West::None) return 7893;
								else if (West == West::Low) return 7894;
								else return 7895;
							else
								if (West == West::None) return 7896;
								else if (West == West::Low) return 7897;
								else return 7898;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7899;
								else if (West == West::Low) return 7900;
								else return 7901;
							else
								if (West == West::None) return 7902;
								else if (West == West::Low) return 7903;
								else return 7904;
						else
							if (Waterlogged)
								if (West == West::None) return 7905;
								else if (West == West::Low) return 7906;
								else return 7907;
							else
								if (West == West::None) return 7908;
								else if (West == West::Low) return 7909;
								else return 7910;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7911;
								else if (West == West::Low) return 7912;
								else return 7913;
							else
								if (West == West::None) return 7914;
								else if (West == West::Low) return 7915;
								else return 7916;
						else
							if (Waterlogged)
								if (West == West::None) return 7917;
								else if (West == West::Low) return 7918;
								else return 7919;
							else
								if (West == West::None) return 7920;
								else if (West == West::Low) return 7921;
								else return 7922;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7923;
								else if (West == West::Low) return 7924;
								else return 7925;
							else
								if (West == West::None) return 7926;
								else if (West == West::Low) return 7927;
								else return 7928;
						else
							if (Waterlogged)
								if (West == West::None) return 7929;
								else if (West == West::Low) return 7930;
								else return 7931;
							else
								if (West == West::None) return 7932;
								else if (West == West::Low) return 7933;
								else return 7934;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7935;
								else if (West == West::Low) return 7936;
								else return 7937;
							else
								if (West == West::None) return 7938;
								else if (West == West::Low) return 7939;
								else return 7940;
						else
							if (Waterlogged)
								if (West == West::None) return 7941;
								else if (West == West::Low) return 7942;
								else return 7943;
							else
								if (West == West::None) return 7944;
								else if (West == West::Low) return 7945;
								else return 7946;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7947;
								else if (West == West::Low) return 7948;
								else return 7949;
							else
								if (West == West::None) return 7950;
								else if (West == West::Low) return 7951;
								else return 7952;
						else
							if (Waterlogged)
								if (West == West::None) return 7953;
								else if (West == West::Low) return 7954;
								else return 7955;
							else
								if (West == West::None) return 7956;
								else if (West == West::Low) return 7957;
								else return 7958;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7959;
								else if (West == West::Low) return 7960;
								else return 7961;
							else
								if (West == West::None) return 7962;
								else if (West == West::Low) return 7963;
								else return 7964;
						else
							if (Waterlogged)
								if (West == West::None) return 7965;
								else if (West == West::Low) return 7966;
								else return 7967;
							else
								if (West == West::None) return 7968;
								else if (West == West::Low) return 7969;
								else return 7970;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7971;
								else if (West == West::Low) return 7972;
								else return 7973;
							else
								if (West == West::None) return 7974;
								else if (West == West::Low) return 7975;
								else return 7976;
						else
							if (Waterlogged)
								if (West == West::None) return 7977;
								else if (West == West::Low) return 7978;
								else return 7979;
							else
								if (West == West::None) return 7980;
								else if (West == West::Low) return 7981;
								else return 7982;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7983;
								else if (West == West::Low) return 7984;
								else return 7985;
							else
								if (West == West::None) return 7986;
								else if (West == West::Low) return 7987;
								else return 7988;
						else
							if (Waterlogged)
								if (West == West::None) return 7989;
								else if (West == West::Low) return 7990;
								else return 7991;
							else
								if (West == West::None) return 7992;
								else if (West == West::Low) return 7993;
								else return 7994;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7995;
								else if (West == West::Low) return 7996;
								else return 7997;
							else
								if (West == West::None) return 7998;
								else if (West == West::Low) return 7999;
								else return 8000;
						else
							if (Waterlogged)
								if (West == West::None) return 8001;
								else if (West == West::Low) return 8002;
								else return 8003;
							else
								if (West == West::None) return 8004;
								else if (West == West::Low) return 8005;
								else return 8006;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8007;
								else if (West == West::Low) return 8008;
								else return 8009;
							else
								if (West == West::None) return 8010;
								else if (West == West::Low) return 8011;
								else return 8012;
						else
							if (Waterlogged)
								if (West == West::None) return 8013;
								else if (West == West::Low) return 8014;
								else return 8015;
							else
								if (West == West::None) return 8016;
								else if (West == West::Low) return 8017;
								else return 8018;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8019;
								else if (West == West::Low) return 8020;
								else return 8021;
							else
								if (West == West::None) return 8022;
								else if (West == West::Low) return 8023;
								else return 8024;
						else
							if (Waterlogged)
								if (West == West::None) return 8025;
								else if (West == West::Low) return 8026;
								else return 8027;
							else
								if (West == West::None) return 8028;
								else if (West == West::Low) return 8029;
								else return 8030;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8031;
								else if (West == West::Low) return 8032;
								else return 8033;
							else
								if (West == West::None) return 8034;
								else if (West == West::Low) return 8035;
								else return 8036;
						else
							if (Waterlogged)
								if (West == West::None) return 8037;
								else if (West == West::Low) return 8038;
								else return 8039;
							else
								if (West == West::None) return 8040;
								else if (West == West::Low) return 8041;
								else return 8042;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8043;
								else if (West == West::Low) return 8044;
								else return 8045;
							else
								if (West == West::None) return 8046;
								else if (West == West::Low) return 8047;
								else return 8048;
						else
							if (Waterlogged)
								if (West == West::None) return 8049;
								else if (West == West::Low) return 8050;
								else return 8051;
							else
								if (West == West::None) return 8052;
								else if (West == West::Low) return 8053;
								else return 8054;
		}
		BlockState ResinBrickWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace ResinBricks
	{
		constexpr BlockState ResinBricks()
		{
			return 7644;
		}
	}
	namespace ResinClump
	{
		constexpr BlockState ResinClump(const bool Down, const bool East, const bool North, const bool South, const bool Up, const bool Waterlogged, const bool West)
		{
			if (Down)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 7240;
									else return 7241;
								else
									if (West) return 7242;
									else return 7243;
							else
								if (Waterlogged)
									if (West) return 7244;
									else return 7245;
								else
									if (West) return 7246;
									else return 7247;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 7248;
									else return 7249;
								else
									if (West) return 7250;
									else return 7251;
							else
								if (Waterlogged)
									if (West) return 7252;
									else return 7253;
								else
									if (West) return 7254;
									else return 7255;
					else
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 7256;
									else return 7257;
								else
									if (West) return 7258;
									else return 7259;
							else
								if (Waterlogged)
									if (West) return 7260;
									else return 7261;
								else
									if (West) return 7262;
									else return 7263;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 7264;
									else return 7265;
								else
									if (West) return 7266;
									else return 7267;
							else
								if (Waterlogged)
									if (West) return 7268;
									else return 7269;
								else
									if (West) return 7270;
									else return 7271;
				else
					if (North)
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 7272;
									else return 7273;
								else
									if (West) return 7274;
									else return 7275;
							else
								if (Waterlogged)
									if (West) return 7276;
									else return 7277;
								else
									if (West) return 7278;
									else return 7279;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 7280;
									else return 7281;
								else
									if (West) return 7282;
									else return 7283;
							else
								if (Waterlogged)
									if (West) return 7284;
									else return 7285;
								else
									if (West) return 7286;
									else return 7287;
					else
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 7288;
									else return 7289;
								else
									if (West) return 7290;
									else return 7291;
							else
								if (Waterlogged)
									if (West) return 7292;
									else return 7293;
								else
									if (West) return 7294;
									else return 7295;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 7296;
									else return 7297;
								else
									if (West) return 7298;
									else return 7299;
							else
								if (Waterlogged)
									if (West) return 7300;
									else return 7301;
								else
									if (West) return 7302;
									else return 7303;
			else
				if (East)
					if (North)
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 7304;
									else return 7305;
								else
									if (West) return 7306;
									else return 7307;
							else
								if (Waterlogged)
									if (West) return 7308;
									else return 7309;
								else
									if (West) return 7310;
									else return 7311;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 7312;
									else return 7313;
								else
									if (West) return 7314;
									else return 7315;
							else
								if (Waterlogged)
									if (West) return 7316;
									else return 7317;
								else
									if (West) return 7318;
									else return 7319;
					else
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 7320;
									else return 7321;
								else
									if (West) return 7322;
									else return 7323;
							else
								if (Waterlogged)
									if (West) return 7324;
									else return 7325;
								else
									if (West) return 7326;
									else return 7327;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 7328;
									else return 7329;
								else
									if (West) return 7330;
									else return 7331;
							else
								if (Waterlogged)
									if (West) return 7332;
									else return 7333;
								else
									if (West) return 7334;
									else return 7335;
				else
					if (North)
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 7336;
									else return 7337;
								else
									if (West) return 7338;
									else return 7339;
							else
								if (Waterlogged)
									if (West) return 7340;
									else return 7341;
								else
									if (West) return 7342;
									else return 7343;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 7344;
									else return 7345;
								else
									if (West) return 7346;
									else return 7347;
							else
								if (Waterlogged)
									if (West) return 7348;
									else return 7349;
								else
									if (West) return 7350;
									else return 7351;
					else
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 7352;
									else return 7353;
								else
									if (West) return 7354;
									else return 7355;
							else
								if (Waterlogged)
									if (West) return 7356;
									else return 7357;
								else
									if (West) return 7358;
									else return 7359;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 7360;
									else return 7361;
								else
									if (West) return 7362;
									else return 7363;
							else
								if (Waterlogged)
									if (West) return 7364;
									else return 7365;
								else
									if (West) return 7366;
									else return 7367;
		}
		BlockState ResinClump();
		bool Down(BlockState Block);
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace RespawnAnchor
	{
		constexpr BlockState RespawnAnchor(const unsigned char Charges)
		{
			if (Charges == 0) return 20510;
			else if (Charges == 1) return 20511;
			else if (Charges == 2) return 20512;
			else if (Charges == 3) return 20513;
			else return 20514;
		}
		BlockState RespawnAnchor();
		unsigned char Charges(BlockState Block);
	}
	namespace RootedDirt
	{
		constexpr BlockState RootedDirt()
		{
			return 25994;
		}
	}
	namespace RoseBush
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		constexpr BlockState RoseBush(const enum Half Half)
		{
			if (Half == Half::Upper) return 11640;
			else return 11641;
		}
		BlockState RoseBush();
		enum Half Half(BlockState Block);
	}
	namespace Sand
	{
		constexpr BlockState Sand()
		{
			return 118;
		}
	}
	namespace Sandstone
	{
		constexpr BlockState Sandstone()
		{
			return 578;
		}
	}
	namespace SandstoneSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState SandstoneSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 12129;
				else return 12130;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 12131;
				else return 12132;
			else
				if (Waterlogged) return 12133;
				else return 12134;
		}
		BlockState SandstoneSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SandstoneStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState SandstoneStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8215;
						else return 8216;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8217;
						else return 8218;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8219;
						else return 8220;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8221;
						else return 8222;
					else
						if (Waterlogged) return 8223;
						else return 8224;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8225;
						else return 8226;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8227;
						else return 8228;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8229;
						else return 8230;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8231;
						else return 8232;
					else
						if (Waterlogged) return 8233;
						else return 8234;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8235;
						else return 8236;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8237;
						else return 8238;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8239;
						else return 8240;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8241;
						else return 8242;
					else
						if (Waterlogged) return 8243;
						else return 8244;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8245;
						else return 8246;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8247;
						else return 8248;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8249;
						else return 8250;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8251;
						else return 8252;
					else
						if (Waterlogged) return 8253;
						else return 8254;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8255;
						else return 8256;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8257;
						else return 8258;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8259;
						else return 8260;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8261;
						else return 8262;
					else
						if (Waterlogged) return 8263;
						else return 8264;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8265;
						else return 8266;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8267;
						else return 8268;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8269;
						else return 8270;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8271;
						else return 8272;
					else
						if (Waterlogged) return 8273;
						else return 8274;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8275;
						else return 8276;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8277;
						else return 8278;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8279;
						else return 8280;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8281;
						else return 8282;
					else
						if (Waterlogged) return 8283;
						else return 8284;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8285;
						else return 8286;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8287;
						else return 8288;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8289;
						else return 8290;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8291;
						else return 8292;
					else
						if (Waterlogged) return 8293;
						else return 8294;
		}
		BlockState SandstoneStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SandstoneWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState SandstoneWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18455;
								else if (West == West::Low) return 18456;
								else return 18457;
							else
								if (West == West::None) return 18458;
								else if (West == West::Low) return 18459;
								else return 18460;
						else
							if (Waterlogged)
								if (West == West::None) return 18461;
								else if (West == West::Low) return 18462;
								else return 18463;
							else
								if (West == West::None) return 18464;
								else if (West == West::Low) return 18465;
								else return 18466;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18467;
								else if (West == West::Low) return 18468;
								else return 18469;
							else
								if (West == West::None) return 18470;
								else if (West == West::Low) return 18471;
								else return 18472;
						else
							if (Waterlogged)
								if (West == West::None) return 18473;
								else if (West == West::Low) return 18474;
								else return 18475;
							else
								if (West == West::None) return 18476;
								else if (West == West::Low) return 18477;
								else return 18478;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18479;
								else if (West == West::Low) return 18480;
								else return 18481;
							else
								if (West == West::None) return 18482;
								else if (West == West::Low) return 18483;
								else return 18484;
						else
							if (Waterlogged)
								if (West == West::None) return 18485;
								else if (West == West::Low) return 18486;
								else return 18487;
							else
								if (West == West::None) return 18488;
								else if (West == West::Low) return 18489;
								else return 18490;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18491;
								else if (West == West::Low) return 18492;
								else return 18493;
							else
								if (West == West::None) return 18494;
								else if (West == West::Low) return 18495;
								else return 18496;
						else
							if (Waterlogged)
								if (West == West::None) return 18497;
								else if (West == West::Low) return 18498;
								else return 18499;
							else
								if (West == West::None) return 18500;
								else if (West == West::Low) return 18501;
								else return 18502;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18503;
								else if (West == West::Low) return 18504;
								else return 18505;
							else
								if (West == West::None) return 18506;
								else if (West == West::Low) return 18507;
								else return 18508;
						else
							if (Waterlogged)
								if (West == West::None) return 18509;
								else if (West == West::Low) return 18510;
								else return 18511;
							else
								if (West == West::None) return 18512;
								else if (West == West::Low) return 18513;
								else return 18514;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18515;
								else if (West == West::Low) return 18516;
								else return 18517;
							else
								if (West == West::None) return 18518;
								else if (West == West::Low) return 18519;
								else return 18520;
						else
							if (Waterlogged)
								if (West == West::None) return 18521;
								else if (West == West::Low) return 18522;
								else return 18523;
							else
								if (West == West::None) return 18524;
								else if (West == West::Low) return 18525;
								else return 18526;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18527;
								else if (West == West::Low) return 18528;
								else return 18529;
							else
								if (West == West::None) return 18530;
								else if (West == West::Low) return 18531;
								else return 18532;
						else
							if (Waterlogged)
								if (West == West::None) return 18533;
								else if (West == West::Low) return 18534;
								else return 18535;
							else
								if (West == West::None) return 18536;
								else if (West == West::Low) return 18537;
								else return 18538;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18539;
								else if (West == West::Low) return 18540;
								else return 18541;
							else
								if (West == West::None) return 18542;
								else if (West == West::Low) return 18543;
								else return 18544;
						else
							if (Waterlogged)
								if (West == West::None) return 18545;
								else if (West == West::Low) return 18546;
								else return 18547;
							else
								if (West == West::None) return 18548;
								else if (West == West::Low) return 18549;
								else return 18550;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18551;
								else if (West == West::Low) return 18552;
								else return 18553;
							else
								if (West == West::None) return 18554;
								else if (West == West::Low) return 18555;
								else return 18556;
						else
							if (Waterlogged)
								if (West == West::None) return 18557;
								else if (West == West::Low) return 18558;
								else return 18559;
							else
								if (West == West::None) return 18560;
								else if (West == West::Low) return 18561;
								else return 18562;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18563;
								else if (West == West::Low) return 18564;
								else return 18565;
							else
								if (West == West::None) return 18566;
								else if (West == West::Low) return 18567;
								else return 18568;
						else
							if (Waterlogged)
								if (West == West::None) return 18569;
								else if (West == West::Low) return 18570;
								else return 18571;
							else
								if (West == West::None) return 18572;
								else if (West == West::Low) return 18573;
								else return 18574;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18575;
								else if (West == West::Low) return 18576;
								else return 18577;
							else
								if (West == West::None) return 18578;
								else if (West == West::Low) return 18579;
								else return 18580;
						else
							if (Waterlogged)
								if (West == West::None) return 18581;
								else if (West == West::Low) return 18582;
								else return 18583;
							else
								if (West == West::None) return 18584;
								else if (West == West::Low) return 18585;
								else return 18586;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18587;
								else if (West == West::Low) return 18588;
								else return 18589;
							else
								if (West == West::None) return 18590;
								else if (West == West::Low) return 18591;
								else return 18592;
						else
							if (Waterlogged)
								if (West == West::None) return 18593;
								else if (West == West::Low) return 18594;
								else return 18595;
							else
								if (West == West::None) return 18596;
								else if (West == West::Low) return 18597;
								else return 18598;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18599;
								else if (West == West::Low) return 18600;
								else return 18601;
							else
								if (West == West::None) return 18602;
								else if (West == West::Low) return 18603;
								else return 18604;
						else
							if (Waterlogged)
								if (West == West::None) return 18605;
								else if (West == West::Low) return 18606;
								else return 18607;
							else
								if (West == West::None) return 18608;
								else if (West == West::Low) return 18609;
								else return 18610;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18611;
								else if (West == West::Low) return 18612;
								else return 18613;
							else
								if (West == West::None) return 18614;
								else if (West == West::Low) return 18615;
								else return 18616;
						else
							if (Waterlogged)
								if (West == West::None) return 18617;
								else if (West == West::Low) return 18618;
								else return 18619;
							else
								if (West == West::None) return 18620;
								else if (West == West::Low) return 18621;
								else return 18622;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18623;
								else if (West == West::Low) return 18624;
								else return 18625;
							else
								if (West == West::None) return 18626;
								else if (West == West::Low) return 18627;
								else return 18628;
						else
							if (Waterlogged)
								if (West == West::None) return 18629;
								else if (West == West::Low) return 18630;
								else return 18631;
							else
								if (West == West::None) return 18632;
								else if (West == West::Low) return 18633;
								else return 18634;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18635;
								else if (West == West::Low) return 18636;
								else return 18637;
							else
								if (West == West::None) return 18638;
								else if (West == West::Low) return 18639;
								else return 18640;
						else
							if (Waterlogged)
								if (West == West::None) return 18641;
								else if (West == West::Low) return 18642;
								else return 18643;
							else
								if (West == West::None) return 18644;
								else if (West == West::Low) return 18645;
								else return 18646;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18647;
								else if (West == West::Low) return 18648;
								else return 18649;
							else
								if (West == West::None) return 18650;
								else if (West == West::Low) return 18651;
								else return 18652;
						else
							if (Waterlogged)
								if (West == West::None) return 18653;
								else if (West == West::Low) return 18654;
								else return 18655;
							else
								if (West == West::None) return 18656;
								else if (West == West::Low) return 18657;
								else return 18658;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18659;
								else if (West == West::Low) return 18660;
								else return 18661;
							else
								if (West == West::None) return 18662;
								else if (West == West::Low) return 18663;
								else return 18664;
						else
							if (Waterlogged)
								if (West == West::None) return 18665;
								else if (West == West::Low) return 18666;
								else return 18667;
							else
								if (West == West::None) return 18668;
								else if (West == West::Low) return 18669;
								else return 18670;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18671;
								else if (West == West::Low) return 18672;
								else return 18673;
							else
								if (West == West::None) return 18674;
								else if (West == West::Low) return 18675;
								else return 18676;
						else
							if (Waterlogged)
								if (West == West::None) return 18677;
								else if (West == West::Low) return 18678;
								else return 18679;
							else
								if (West == West::None) return 18680;
								else if (West == West::Low) return 18681;
								else return 18682;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18683;
								else if (West == West::Low) return 18684;
								else return 18685;
							else
								if (West == West::None) return 18686;
								else if (West == West::Low) return 18687;
								else return 18688;
						else
							if (Waterlogged)
								if (West == West::None) return 18689;
								else if (West == West::Low) return 18690;
								else return 18691;
							else
								if (West == West::None) return 18692;
								else if (West == West::Low) return 18693;
								else return 18694;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18695;
								else if (West == West::Low) return 18696;
								else return 18697;
							else
								if (West == West::None) return 18698;
								else if (West == West::Low) return 18699;
								else return 18700;
						else
							if (Waterlogged)
								if (West == West::None) return 18701;
								else if (West == West::Low) return 18702;
								else return 18703;
							else
								if (West == West::None) return 18704;
								else if (West == West::Low) return 18705;
								else return 18706;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18707;
								else if (West == West::Low) return 18708;
								else return 18709;
							else
								if (West == West::None) return 18710;
								else if (West == West::Low) return 18711;
								else return 18712;
						else
							if (Waterlogged)
								if (West == West::None) return 18713;
								else if (West == West::Low) return 18714;
								else return 18715;
							else
								if (West == West::None) return 18716;
								else if (West == West::Low) return 18717;
								else return 18718;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18719;
								else if (West == West::Low) return 18720;
								else return 18721;
							else
								if (West == West::None) return 18722;
								else if (West == West::Low) return 18723;
								else return 18724;
						else
							if (Waterlogged)
								if (West == West::None) return 18725;
								else if (West == West::Low) return 18726;
								else return 18727;
							else
								if (West == West::None) return 18728;
								else if (West == West::Low) return 18729;
								else return 18730;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18731;
								else if (West == West::Low) return 18732;
								else return 18733;
							else
								if (West == West::None) return 18734;
								else if (West == West::Low) return 18735;
								else return 18736;
						else
							if (Waterlogged)
								if (West == West::None) return 18737;
								else if (West == West::Low) return 18738;
								else return 18739;
							else
								if (West == West::None) return 18740;
								else if (West == West::Low) return 18741;
								else return 18742;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18743;
								else if (West == West::Low) return 18744;
								else return 18745;
							else
								if (West == West::None) return 18746;
								else if (West == West::Low) return 18747;
								else return 18748;
						else
							if (Waterlogged)
								if (West == West::None) return 18749;
								else if (West == West::Low) return 18750;
								else return 18751;
							else
								if (West == West::None) return 18752;
								else if (West == West::Low) return 18753;
								else return 18754;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18755;
								else if (West == West::Low) return 18756;
								else return 18757;
							else
								if (West == West::None) return 18758;
								else if (West == West::Low) return 18759;
								else return 18760;
						else
							if (Waterlogged)
								if (West == West::None) return 18761;
								else if (West == West::Low) return 18762;
								else return 18763;
							else
								if (West == West::None) return 18764;
								else if (West == West::Low) return 18765;
								else return 18766;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18767;
								else if (West == West::Low) return 18768;
								else return 18769;
							else
								if (West == West::None) return 18770;
								else if (West == West::Low) return 18771;
								else return 18772;
						else
							if (Waterlogged)
								if (West == West::None) return 18773;
								else if (West == West::Low) return 18774;
								else return 18775;
							else
								if (West == West::None) return 18776;
								else if (West == West::Low) return 18777;
								else return 18778;
		}
		BlockState SandstoneWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace Scaffolding
	{
		constexpr BlockState Scaffolding(const bool Bottom, const unsigned char Distance, const bool Waterlogged)
		{
			if (Bottom)
				if (Distance == 0)
					if (Waterlogged) return 19427;
					else return 19428;
				else if (Distance == 1)
					if (Waterlogged) return 19429;
					else return 19430;
				else if (Distance == 2)
					if (Waterlogged) return 19431;
					else return 19432;
				else if (Distance == 3)
					if (Waterlogged) return 19433;
					else return 19434;
				else if (Distance == 4)
					if (Waterlogged) return 19435;
					else return 19436;
				else if (Distance == 5)
					if (Waterlogged) return 19437;
					else return 19438;
				else if (Distance == 6)
					if (Waterlogged) return 19439;
					else return 19440;
				else
					if (Waterlogged) return 19441;
					else return 19442;
			else
				if (Distance == 0)
					if (Waterlogged) return 19443;
					else return 19444;
				else if (Distance == 1)
					if (Waterlogged) return 19445;
					else return 19446;
				else if (Distance == 2)
					if (Waterlogged) return 19447;
					else return 19448;
				else if (Distance == 3)
					if (Waterlogged) return 19449;
					else return 19450;
				else if (Distance == 4)
					if (Waterlogged) return 19451;
					else return 19452;
				else if (Distance == 5)
					if (Waterlogged) return 19453;
					else return 19454;
				else if (Distance == 6)
					if (Waterlogged) return 19455;
					else return 19456;
				else
					if (Waterlogged) return 19457;
					else return 19458;
		}
		BlockState Scaffolding();
		bool Bottom(BlockState Block);
		unsigned char Distance(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Sculk
	{
		constexpr BlockState Sculk()
		{
			return 23859;
		}
	}
	namespace SculkCatalyst
	{
		constexpr BlockState SculkCatalyst(const bool Bloom)
		{
			if (Bloom) return 23988;
			else return 23989;
		}
		BlockState SculkCatalyst();
		bool Bloom(BlockState Block);
	}
	namespace SculkSensor
	{
		enum class SculkSensorPhase
		{
			Inactive,
			Active,
			Cooldown,
		};
		constexpr BlockState SculkSensor(const unsigned char Power, const enum SculkSensorPhase SculkSensorPhase, const bool Waterlogged)
		{
			if (Power == 0)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 23379;
					else return 23380;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 23381;
					else return 23382;
				else
					if (Waterlogged) return 23383;
					else return 23384;
			else if (Power == 1)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 23385;
					else return 23386;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 23387;
					else return 23388;
				else
					if (Waterlogged) return 23389;
					else return 23390;
			else if (Power == 2)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 23391;
					else return 23392;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 23393;
					else return 23394;
				else
					if (Waterlogged) return 23395;
					else return 23396;
			else if (Power == 3)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 23397;
					else return 23398;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 23399;
					else return 23400;
				else
					if (Waterlogged) return 23401;
					else return 23402;
			else if (Power == 4)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 23403;
					else return 23404;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 23405;
					else return 23406;
				else
					if (Waterlogged) return 23407;
					else return 23408;
			else if (Power == 5)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 23409;
					else return 23410;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 23411;
					else return 23412;
				else
					if (Waterlogged) return 23413;
					else return 23414;
			else if (Power == 6)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 23415;
					else return 23416;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 23417;
					else return 23418;
				else
					if (Waterlogged) return 23419;
					else return 23420;
			else if (Power == 7)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 23421;
					else return 23422;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 23423;
					else return 23424;
				else
					if (Waterlogged) return 23425;
					else return 23426;
			else if (Power == 8)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 23427;
					else return 23428;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 23429;
					else return 23430;
				else
					if (Waterlogged) return 23431;
					else return 23432;
			else if (Power == 9)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 23433;
					else return 23434;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 23435;
					else return 23436;
				else
					if (Waterlogged) return 23437;
					else return 23438;
			else if (Power == 10)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 23439;
					else return 23440;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 23441;
					else return 23442;
				else
					if (Waterlogged) return 23443;
					else return 23444;
			else if (Power == 11)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 23445;
					else return 23446;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 23447;
					else return 23448;
				else
					if (Waterlogged) return 23449;
					else return 23450;
			else if (Power == 12)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 23451;
					else return 23452;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 23453;
					else return 23454;
				else
					if (Waterlogged) return 23455;
					else return 23456;
			else if (Power == 13)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 23457;
					else return 23458;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 23459;
					else return 23460;
				else
					if (Waterlogged) return 23461;
					else return 23462;
			else if (Power == 14)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 23463;
					else return 23464;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 23465;
					else return 23466;
				else
					if (Waterlogged) return 23467;
					else return 23468;
			else
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 23469;
					else return 23470;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 23471;
					else return 23472;
				else
					if (Waterlogged) return 23473;
					else return 23474;
		}
		BlockState SculkSensor();
		unsigned char Power(BlockState Block);
		enum SculkSensorPhase SculkSensorPhase(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SculkShrieker
	{
		constexpr BlockState SculkShrieker(const bool CanSummon, const bool Shrieking, const bool Waterlogged)
		{
			if (CanSummon)
				if (Shrieking)
					if (Waterlogged) return 23990;
					else return 23991;
				else
					if (Waterlogged) return 23992;
					else return 23993;
			else
				if (Shrieking)
					if (Waterlogged) return 23994;
					else return 23995;
				else
					if (Waterlogged) return 23996;
					else return 23997;
		}
		BlockState SculkShrieker();
		bool CanSummon(BlockState Block);
		bool Shrieking(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SculkVein
	{
		constexpr BlockState SculkVein(const bool Down, const bool East, const bool North, const bool South, const bool Up, const bool Waterlogged, const bool West)
		{
			if (Down)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 23860;
									else return 23861;
								else
									if (West) return 23862;
									else return 23863;
							else
								if (Waterlogged)
									if (West) return 23864;
									else return 23865;
								else
									if (West) return 23866;
									else return 23867;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 23868;
									else return 23869;
								else
									if (West) return 23870;
									else return 23871;
							else
								if (Waterlogged)
									if (West) return 23872;
									else return 23873;
								else
									if (West) return 23874;
									else return 23875;
					else
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 23876;
									else return 23877;
								else
									if (West) return 23878;
									else return 23879;
							else
								if (Waterlogged)
									if (West) return 23880;
									else return 23881;
								else
									if (West) return 23882;
									else return 23883;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 23884;
									else return 23885;
								else
									if (West) return 23886;
									else return 23887;
							else
								if (Waterlogged)
									if (West) return 23888;
									else return 23889;
								else
									if (West) return 23890;
									else return 23891;
				else
					if (North)
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 23892;
									else return 23893;
								else
									if (West) return 23894;
									else return 23895;
							else
								if (Waterlogged)
									if (West) return 23896;
									else return 23897;
								else
									if (West) return 23898;
									else return 23899;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 23900;
									else return 23901;
								else
									if (West) return 23902;
									else return 23903;
							else
								if (Waterlogged)
									if (West) return 23904;
									else return 23905;
								else
									if (West) return 23906;
									else return 23907;
					else
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 23908;
									else return 23909;
								else
									if (West) return 23910;
									else return 23911;
							else
								if (Waterlogged)
									if (West) return 23912;
									else return 23913;
								else
									if (West) return 23914;
									else return 23915;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 23916;
									else return 23917;
								else
									if (West) return 23918;
									else return 23919;
							else
								if (Waterlogged)
									if (West) return 23920;
									else return 23921;
								else
									if (West) return 23922;
									else return 23923;
			else
				if (East)
					if (North)
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 23924;
									else return 23925;
								else
									if (West) return 23926;
									else return 23927;
							else
								if (Waterlogged)
									if (West) return 23928;
									else return 23929;
								else
									if (West) return 23930;
									else return 23931;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 23932;
									else return 23933;
								else
									if (West) return 23934;
									else return 23935;
							else
								if (Waterlogged)
									if (West) return 23936;
									else return 23937;
								else
									if (West) return 23938;
									else return 23939;
					else
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 23940;
									else return 23941;
								else
									if (West) return 23942;
									else return 23943;
							else
								if (Waterlogged)
									if (West) return 23944;
									else return 23945;
								else
									if (West) return 23946;
									else return 23947;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 23948;
									else return 23949;
								else
									if (West) return 23950;
									else return 23951;
							else
								if (Waterlogged)
									if (West) return 23952;
									else return 23953;
								else
									if (West) return 23954;
									else return 23955;
				else
					if (North)
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 23956;
									else return 23957;
								else
									if (West) return 23958;
									else return 23959;
							else
								if (Waterlogged)
									if (West) return 23960;
									else return 23961;
								else
									if (West) return 23962;
									else return 23963;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 23964;
									else return 23965;
								else
									if (West) return 23966;
									else return 23967;
							else
								if (Waterlogged)
									if (West) return 23968;
									else return 23969;
								else
									if (West) return 23970;
									else return 23971;
					else
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 23972;
									else return 23973;
								else
									if (West) return 23974;
									else return 23975;
							else
								if (Waterlogged)
									if (West) return 23976;
									else return 23977;
								else
									if (West) return 23978;
									else return 23979;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 23980;
									else return 23981;
								else
									if (West) return 23982;
									else return 23983;
							else
								if (Waterlogged)
									if (West) return 23984;
									else return 23985;
								else
									if (West) return 23986;
									else return 23987;
		}
		BlockState SculkVein();
		bool Down(BlockState Block);
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace SeaLantern
	{
		constexpr BlockState SeaLantern()
		{
			return 11613;
		}
	}
	namespace SeaPickle
	{
		constexpr BlockState SeaPickle(const unsigned char Pickles, const bool Waterlogged)
		{
			if (Pickles == 1)
				if (Waterlogged) return 13988;
				else return 13989;
			else if (Pickles == 2)
				if (Waterlogged) return 13990;
				else return 13991;
			else if (Pickles == 3)
				if (Waterlogged) return 13992;
				else return 13993;
			else
				if (Waterlogged) return 13994;
				else return 13995;
		}
		BlockState SeaPickle();
		unsigned char Pickles(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Seagrass
	{
		constexpr BlockState Seagrass()
		{
			return 2054;
		}
	}
	namespace ShortDryGrass
	{
		constexpr BlockState ShortDryGrass()
		{
			return 2052;
		}
	}
	namespace ShortGrass
	{
		constexpr BlockState ShortGrass()
		{
			return 2048;
		}
	}
	namespace Shroomlight
	{
		constexpr BlockState Shroomlight()
		{
			return 19665;
		}
	}
	namespace ShulkerBox
	{
		constexpr BlockState ShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13585;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 13586;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13587;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13588;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 13589;
			else return 13590;
		}
		BlockState ShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace SkeletonSkull
	{
		constexpr BlockState SkeletonSkull(const bool Powered, const unsigned char Rotation)
		{
			if (Powered)
				if (Rotation == 0) return 9636;
				else if (Rotation == 1) return 9637;
				else if (Rotation == 2) return 9638;
				else if (Rotation == 3) return 9639;
				else if (Rotation == 4) return 9640;
				else if (Rotation == 5) return 9641;
				else if (Rotation == 6) return 9642;
				else if (Rotation == 7) return 9643;
				else if (Rotation == 8) return 9644;
				else if (Rotation == 9) return 9645;
				else if (Rotation == 10) return 9646;
				else if (Rotation == 11) return 9647;
				else if (Rotation == 12) return 9648;
				else if (Rotation == 13) return 9649;
				else if (Rotation == 14) return 9650;
				else return 9651;
			else
				if (Rotation == 0) return 9652;
				else if (Rotation == 1) return 9653;
				else if (Rotation == 2) return 9654;
				else if (Rotation == 3) return 9655;
				else if (Rotation == 4) return 9656;
				else if (Rotation == 5) return 9657;
				else if (Rotation == 6) return 9658;
				else if (Rotation == 7) return 9659;
				else if (Rotation == 8) return 9660;
				else if (Rotation == 9) return 9661;
				else if (Rotation == 10) return 9662;
				else if (Rotation == 11) return 9663;
				else if (Rotation == 12) return 9664;
				else if (Rotation == 13) return 9665;
				else if (Rotation == 14) return 9666;
				else return 9667;
		}
		BlockState SkeletonSkull();
		bool Powered(BlockState Block);
		unsigned char Rotation(BlockState Block);
	}
	namespace SkeletonWallSkull
	{
		constexpr BlockState SkeletonWallSkull(const eBlockFace Facing, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Powered) return 9668;
				else return 9669;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Powered) return 9670;
				else return 9671;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Powered) return 9672;
				else return 9673;
			else
				if (Powered) return 9674;
				else return 9675;
		}
		BlockState SkeletonWallSkull();
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace SlimeBlock
	{
		constexpr BlockState SlimeBlock()
		{
			return 11253;
		}
	}
	namespace SmallAmethystBud
	{
		constexpr BlockState SmallAmethystBud(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 22129;
				else return 22130;
			else if (Facing == eBlockFace::BLOCK_FACE_XP)
				if (Waterlogged) return 22131;
				else return 22132;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 22133;
				else return 22134;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 22135;
				else return 22136;
			else if (Facing == eBlockFace::BLOCK_FACE_YP)
				if (Waterlogged) return 22137;
				else return 22138;
			else
				if (Waterlogged) return 22139;
				else return 22140;
		}
		BlockState SmallAmethystBud();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SmallDripleaf
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		constexpr BlockState SmallDripleaf(const eBlockFace Facing, const enum Half Half, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Waterlogged) return 25976;
					else return 25977;
				else
					if (Waterlogged) return 25978;
					else return 25979;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Waterlogged) return 25980;
					else return 25981;
				else
					if (Waterlogged) return 25982;
					else return 25983;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Waterlogged) return 25984;
					else return 25985;
				else
					if (Waterlogged) return 25986;
					else return 25987;
			else
				if (Half == Half::Upper)
					if (Waterlogged) return 25988;
					else return 25989;
				else
					if (Waterlogged) return 25990;
					else return 25991;
		}
		BlockState SmallDripleaf();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SmithingTable
	{
		constexpr BlockState SmithingTable()
		{
			return 19521;
		}
	}
	namespace Smoker
	{
		constexpr BlockState Smoker(const eBlockFace Facing, const bool Lit)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Lit) return 19475;
				else return 19476;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Lit) return 19477;
				else return 19478;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Lit) return 19479;
				else return 19480;
			else
				if (Lit) return 19481;
				else return 19482;
		}
		BlockState Smoker();
		eBlockFace Facing(BlockState Block);
		bool Lit(BlockState Block);
	}
	namespace SmoothBasalt
	{
		constexpr BlockState SmoothBasalt()
		{
			return 27649;
		}
	}
	namespace SmoothQuartz
	{
		constexpr BlockState SmoothQuartz()
		{
			return 12203;
		}
	}
	namespace SmoothQuartzSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState SmoothQuartzSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 15179;
				else return 15180;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 15181;
				else return 15182;
			else
				if (Waterlogged) return 15183;
				else return 15184;
		}
		BlockState SmoothQuartzSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SmoothQuartzStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState SmoothQuartzStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14657;
						else return 14658;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14659;
						else return 14660;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14661;
						else return 14662;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14663;
						else return 14664;
					else
						if (Waterlogged) return 14665;
						else return 14666;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14667;
						else return 14668;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14669;
						else return 14670;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14671;
						else return 14672;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14673;
						else return 14674;
					else
						if (Waterlogged) return 14675;
						else return 14676;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14677;
						else return 14678;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14679;
						else return 14680;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14681;
						else return 14682;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14683;
						else return 14684;
					else
						if (Waterlogged) return 14685;
						else return 14686;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14687;
						else return 14688;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14689;
						else return 14690;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14691;
						else return 14692;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14693;
						else return 14694;
					else
						if (Waterlogged) return 14695;
						else return 14696;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14697;
						else return 14698;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14699;
						else return 14700;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14701;
						else return 14702;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14703;
						else return 14704;
					else
						if (Waterlogged) return 14705;
						else return 14706;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14707;
						else return 14708;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14709;
						else return 14710;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14711;
						else return 14712;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14713;
						else return 14714;
					else
						if (Waterlogged) return 14715;
						else return 14716;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14717;
						else return 14718;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14719;
						else return 14720;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14721;
						else return 14722;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14723;
						else return 14724;
					else
						if (Waterlogged) return 14725;
						else return 14726;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14727;
						else return 14728;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14729;
						else return 14730;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14731;
						else return 14732;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14733;
						else return 14734;
					else
						if (Waterlogged) return 14735;
						else return 14736;
		}
		BlockState SmoothQuartzStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SmoothRedSandstone
	{
		constexpr BlockState SmoothRedSandstone()
		{
			return 12204;
		}
	}
	namespace SmoothRedSandstoneSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState SmoothRedSandstoneSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 15143;
				else return 15144;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 15145;
				else return 15146;
			else
				if (Waterlogged) return 15147;
				else return 15148;
		}
		BlockState SmoothRedSandstoneSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SmoothRedSandstoneStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState SmoothRedSandstoneStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14097;
						else return 14098;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14099;
						else return 14100;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14101;
						else return 14102;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14103;
						else return 14104;
					else
						if (Waterlogged) return 14105;
						else return 14106;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14107;
						else return 14108;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14109;
						else return 14110;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14111;
						else return 14112;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14113;
						else return 14114;
					else
						if (Waterlogged) return 14115;
						else return 14116;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14117;
						else return 14118;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14119;
						else return 14120;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14121;
						else return 14122;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14123;
						else return 14124;
					else
						if (Waterlogged) return 14125;
						else return 14126;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14127;
						else return 14128;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14129;
						else return 14130;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14131;
						else return 14132;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14133;
						else return 14134;
					else
						if (Waterlogged) return 14135;
						else return 14136;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14137;
						else return 14138;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14139;
						else return 14140;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14141;
						else return 14142;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14143;
						else return 14144;
					else
						if (Waterlogged) return 14145;
						else return 14146;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14147;
						else return 14148;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14149;
						else return 14150;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14151;
						else return 14152;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14153;
						else return 14154;
					else
						if (Waterlogged) return 14155;
						else return 14156;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14157;
						else return 14158;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14159;
						else return 14160;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14161;
						else return 14162;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14163;
						else return 14164;
					else
						if (Waterlogged) return 14165;
						else return 14166;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14167;
						else return 14168;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14169;
						else return 14170;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14171;
						else return 14172;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14173;
						else return 14174;
					else
						if (Waterlogged) return 14175;
						else return 14176;
		}
		BlockState SmoothRedSandstoneStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SmoothSandstone
	{
		constexpr BlockState SmoothSandstone()
		{
			return 12202;
		}
	}
	namespace SmoothSandstoneSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState SmoothSandstoneSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 15173;
				else return 15174;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 15175;
				else return 15176;
			else
				if (Waterlogged) return 15177;
				else return 15178;
		}
		BlockState SmoothSandstoneSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SmoothSandstoneStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState SmoothSandstoneStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14577;
						else return 14578;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14579;
						else return 14580;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14581;
						else return 14582;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14583;
						else return 14584;
					else
						if (Waterlogged) return 14585;
						else return 14586;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14587;
						else return 14588;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14589;
						else return 14590;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14591;
						else return 14592;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14593;
						else return 14594;
					else
						if (Waterlogged) return 14595;
						else return 14596;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14597;
						else return 14598;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14599;
						else return 14600;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14601;
						else return 14602;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14603;
						else return 14604;
					else
						if (Waterlogged) return 14605;
						else return 14606;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14607;
						else return 14608;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14609;
						else return 14610;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14611;
						else return 14612;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14613;
						else return 14614;
					else
						if (Waterlogged) return 14615;
						else return 14616;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14617;
						else return 14618;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14619;
						else return 14620;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14621;
						else return 14622;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14623;
						else return 14624;
					else
						if (Waterlogged) return 14625;
						else return 14626;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14627;
						else return 14628;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14629;
						else return 14630;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14631;
						else return 14632;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14633;
						else return 14634;
					else
						if (Waterlogged) return 14635;
						else return 14636;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14637;
						else return 14638;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14639;
						else return 14640;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14641;
						else return 14642;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14643;
						else return 14644;
					else
						if (Waterlogged) return 14645;
						else return 14646;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14647;
						else return 14648;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14649;
						else return 14650;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14651;
						else return 14652;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14653;
						else return 14654;
					else
						if (Waterlogged) return 14655;
						else return 14656;
		}
		BlockState SmoothSandstoneStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SmoothStone
	{
		constexpr BlockState SmoothStone()
		{
			return 12201;
		}
	}
	namespace SmoothStoneSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState SmoothStoneSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 12123;
				else return 12124;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 12125;
				else return 12126;
			else
				if (Waterlogged) return 12127;
				else return 12128;
		}
		BlockState SmoothStoneSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SnifferEgg
	{
		constexpr BlockState SnifferEgg(const unsigned char Hatch)
		{
			if (Hatch == 0) return 13823;
			else if (Hatch == 1) return 13824;
			else return 13825;
		}
		BlockState SnifferEgg();
		unsigned char Hatch(BlockState Block);
	}
	namespace Snow
	{
		constexpr BlockState Snow(const unsigned char Layers)
		{
			if (Layers == 1) return 5950;
			else if (Layers == 2) return 5951;
			else if (Layers == 3) return 5952;
			else if (Layers == 4) return 5953;
			else if (Layers == 5) return 5954;
			else if (Layers == 6) return 5955;
			else if (Layers == 7) return 5956;
			else return 5957;
		}
		BlockState Snow();
		unsigned char Layers(BlockState Block);
	}
	namespace SnowBlock
	{
		constexpr BlockState SnowBlock()
		{
			return 5959;
		}
	}
	namespace SoulCampfire
	{
		constexpr BlockState SoulCampfire(const eBlockFace Facing, const bool Lit, const bool SignalFire, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Lit)
					if (SignalFire)
						if (Waterlogged) return 19598;
						else return 19599;
					else
						if (Waterlogged) return 19600;
						else return 19601;
				else
					if (SignalFire)
						if (Waterlogged) return 19602;
						else return 19603;
					else
						if (Waterlogged) return 19604;
						else return 19605;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Lit)
					if (SignalFire)
						if (Waterlogged) return 19606;
						else return 19607;
					else
						if (Waterlogged) return 19608;
						else return 19609;
				else
					if (SignalFire)
						if (Waterlogged) return 19610;
						else return 19611;
					else
						if (Waterlogged) return 19612;
						else return 19613;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Lit)
					if (SignalFire)
						if (Waterlogged) return 19614;
						else return 19615;
					else
						if (Waterlogged) return 19616;
						else return 19617;
				else
					if (SignalFire)
						if (Waterlogged) return 19618;
						else return 19619;
					else
						if (Waterlogged) return 19620;
						else return 19621;
			else
				if (Lit)
					if (SignalFire)
						if (Waterlogged) return 19622;
						else return 19623;
					else
						if (Waterlogged) return 19624;
						else return 19625;
				else
					if (SignalFire)
						if (Waterlogged) return 19626;
						else return 19627;
					else
						if (Waterlogged) return 19628;
						else return 19629;
		}
		BlockState SoulCampfire();
		eBlockFace Facing(BlockState Block);
		bool Lit(BlockState Block);
		bool SignalFire(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SoulFire
	{
		constexpr BlockState SoulFire()
		{
			return 2918;
		}
	}
	namespace SoulLantern
	{
		constexpr BlockState SoulLantern(const bool Hanging, const bool Waterlogged)
		{
			if (Hanging)
				if (Waterlogged) return 19562;
				else return 19563;
			else
				if (Waterlogged) return 19564;
				else return 19565;
		}
		BlockState SoulLantern();
		bool Hanging(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SoulSand
	{
		constexpr BlockState SoulSand()
		{
			return 6029;
		}
	}
	namespace SoulSoil
	{
		constexpr BlockState SoulSoil()
		{
			return 6030;
		}
	}
	namespace SoulTorch
	{
		constexpr BlockState SoulTorch()
		{
			return 6037;
		}
	}
	namespace SoulWallTorch
	{
		constexpr BlockState SoulWallTorch(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 6038;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 6039;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 6040;
			else return 6041;
		}
		BlockState SoulWallTorch();
		eBlockFace Facing(BlockState Block);
	}
	namespace Spawner
	{
		constexpr BlockState Spawner()
		{
			return 2919;
		}
	}
	namespace Sponge
	{
		constexpr BlockState Sponge()
		{
			return 560;
		}
	}
	namespace SporeBlossom
	{
		constexpr BlockState SporeBlossom()
		{
			return 25883;
		}
	}
	namespace SpruceButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState SpruceButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9420;
					else return 9421;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9422;
					else return 9423;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9424;
					else return 9425;
				else
					if (Powered) return 9426;
					else return 9427;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9428;
					else return 9429;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9430;
					else return 9431;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9432;
					else return 9433;
				else
					if (Powered) return 9434;
					else return 9435;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 9436;
					else return 9437;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 9438;
					else return 9439;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 9440;
					else return 9441;
				else
					if (Powered) return 9442;
					else return 9443;
		}
		BlockState SpruceButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace SpruceDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState SpruceDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12781;
							else return 12782;
						else
							if (Powered) return 12783;
							else return 12784;
					else
						if (Open)
							if (Powered) return 12785;
							else return 12786;
						else
							if (Powered) return 12787;
							else return 12788;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12789;
							else return 12790;
						else
							if (Powered) return 12791;
							else return 12792;
					else
						if (Open)
							if (Powered) return 12793;
							else return 12794;
						else
							if (Powered) return 12795;
							else return 12796;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12797;
							else return 12798;
						else
							if (Powered) return 12799;
							else return 12800;
					else
						if (Open)
							if (Powered) return 12801;
							else return 12802;
						else
							if (Powered) return 12803;
							else return 12804;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12805;
							else return 12806;
						else
							if (Powered) return 12807;
							else return 12808;
					else
						if (Open)
							if (Powered) return 12809;
							else return 12810;
						else
							if (Powered) return 12811;
							else return 12812;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12813;
							else return 12814;
						else
							if (Powered) return 12815;
							else return 12816;
					else
						if (Open)
							if (Powered) return 12817;
							else return 12818;
						else
							if (Powered) return 12819;
							else return 12820;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12821;
							else return 12822;
						else
							if (Powered) return 12823;
							else return 12824;
					else
						if (Open)
							if (Powered) return 12825;
							else return 12826;
						else
							if (Powered) return 12827;
							else return 12828;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12829;
							else return 12830;
						else
							if (Powered) return 12831;
							else return 12832;
					else
						if (Open)
							if (Powered) return 12833;
							else return 12834;
						else
							if (Powered) return 12835;
							else return 12836;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12837;
							else return 12838;
						else
							if (Powered) return 12839;
							else return 12840;
					else
						if (Open)
							if (Powered) return 12841;
							else return 12842;
						else
							if (Powered) return 12843;
							else return 12844;
		}
		BlockState SpruceDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace SpruceFence
	{
		constexpr BlockState SpruceFence(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 12493;
							else return 12494;
						else
							if (West) return 12495;
							else return 12496;
					else
						if (Waterlogged)
							if (West) return 12497;
							else return 12498;
						else
							if (West) return 12499;
							else return 12500;
				else
					if (South)
						if (Waterlogged)
							if (West) return 12501;
							else return 12502;
						else
							if (West) return 12503;
							else return 12504;
					else
						if (Waterlogged)
							if (West) return 12505;
							else return 12506;
						else
							if (West) return 12507;
							else return 12508;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 12509;
							else return 12510;
						else
							if (West) return 12511;
							else return 12512;
					else
						if (Waterlogged)
							if (West) return 12513;
							else return 12514;
						else
							if (West) return 12515;
							else return 12516;
				else
					if (South)
						if (Waterlogged)
							if (West) return 12517;
							else return 12518;
						else
							if (West) return 12519;
							else return 12520;
					else
						if (Waterlogged)
							if (West) return 12521;
							else return 12522;
						else
							if (West) return 12523;
							else return 12524;
		}
		BlockState SpruceFence();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace SpruceFenceGate
	{
		constexpr BlockState SpruceFenceGate(const eBlockFace Facing, const bool InWall, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (InWall)
					if (Open)
						if (Powered) return 12205;
						else return 12206;
					else
						if (Powered) return 12207;
						else return 12208;
				else
					if (Open)
						if (Powered) return 12209;
						else return 12210;
					else
						if (Powered) return 12211;
						else return 12212;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (InWall)
					if (Open)
						if (Powered) return 12213;
						else return 12214;
					else
						if (Powered) return 12215;
						else return 12216;
				else
					if (Open)
						if (Powered) return 12217;
						else return 12218;
					else
						if (Powered) return 12219;
						else return 12220;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (InWall)
					if (Open)
						if (Powered) return 12221;
						else return 12222;
					else
						if (Powered) return 12223;
						else return 12224;
				else
					if (Open)
						if (Powered) return 12225;
						else return 12226;
					else
						if (Powered) return 12227;
						else return 12228;
			else
				if (InWall)
					if (Open)
						if (Powered) return 12229;
						else return 12230;
					else
						if (Powered) return 12231;
						else return 12232;
				else
					if (Open)
						if (Powered) return 12233;
						else return 12234;
					else
						if (Powered) return 12235;
						else return 12236;
		}
		BlockState SpruceFenceGate();
		eBlockFace Facing(BlockState Block);
		bool InWall(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace SpruceHangingSign
	{
		constexpr BlockState SpruceHangingSign(const bool Attached, const unsigned char Rotation, const bool Waterlogged)
		{
			if (Attached)
				if (Rotation == 0)
					if (Waterlogged) return 5002;
					else return 5003;
				else if (Rotation == 1)
					if (Waterlogged) return 5004;
					else return 5005;
				else if (Rotation == 2)
					if (Waterlogged) return 5006;
					else return 5007;
				else if (Rotation == 3)
					if (Waterlogged) return 5008;
					else return 5009;
				else if (Rotation == 4)
					if (Waterlogged) return 5010;
					else return 5011;
				else if (Rotation == 5)
					if (Waterlogged) return 5012;
					else return 5013;
				else if (Rotation == 6)
					if (Waterlogged) return 5014;
					else return 5015;
				else if (Rotation == 7)
					if (Waterlogged) return 5016;
					else return 5017;
				else if (Rotation == 8)
					if (Waterlogged) return 5018;
					else return 5019;
				else if (Rotation == 9)
					if (Waterlogged) return 5020;
					else return 5021;
				else if (Rotation == 10)
					if (Waterlogged) return 5022;
					else return 5023;
				else if (Rotation == 11)
					if (Waterlogged) return 5024;
					else return 5025;
				else if (Rotation == 12)
					if (Waterlogged) return 5026;
					else return 5027;
				else if (Rotation == 13)
					if (Waterlogged) return 5028;
					else return 5029;
				else if (Rotation == 14)
					if (Waterlogged) return 5030;
					else return 5031;
				else
					if (Waterlogged) return 5032;
					else return 5033;
			else
				if (Rotation == 0)
					if (Waterlogged) return 5034;
					else return 5035;
				else if (Rotation == 1)
					if (Waterlogged) return 5036;
					else return 5037;
				else if (Rotation == 2)
					if (Waterlogged) return 5038;
					else return 5039;
				else if (Rotation == 3)
					if (Waterlogged) return 5040;
					else return 5041;
				else if (Rotation == 4)
					if (Waterlogged) return 5042;
					else return 5043;
				else if (Rotation == 5)
					if (Waterlogged) return 5044;
					else return 5045;
				else if (Rotation == 6)
					if (Waterlogged) return 5046;
					else return 5047;
				else if (Rotation == 7)
					if (Waterlogged) return 5048;
					else return 5049;
				else if (Rotation == 8)
					if (Waterlogged) return 5050;
					else return 5051;
				else if (Rotation == 9)
					if (Waterlogged) return 5052;
					else return 5053;
				else if (Rotation == 10)
					if (Waterlogged) return 5054;
					else return 5055;
				else if (Rotation == 11)
					if (Waterlogged) return 5056;
					else return 5057;
				else if (Rotation == 12)
					if (Waterlogged) return 5058;
					else return 5059;
				else if (Rotation == 13)
					if (Waterlogged) return 5060;
					else return 5061;
				else if (Rotation == 14)
					if (Waterlogged) return 5062;
					else return 5063;
				else
					if (Waterlogged) return 5064;
					else return 5065;
		}
		BlockState SpruceHangingSign();
		bool Attached(BlockState Block);
		unsigned char Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SpruceLeaves
	{
		constexpr BlockState SpruceLeaves(const unsigned char Distance, const bool Persistent, const bool Waterlogged)
		{
			if (Distance == 1)
				if (Persistent)
					if (Waterlogged) return 280;
					else return 281;
				else
					if (Waterlogged) return 282;
					else return 283;
			else if (Distance == 2)
				if (Persistent)
					if (Waterlogged) return 284;
					else return 285;
				else
					if (Waterlogged) return 286;
					else return 287;
			else if (Distance == 3)
				if (Persistent)
					if (Waterlogged) return 288;
					else return 289;
				else
					if (Waterlogged) return 290;
					else return 291;
			else if (Distance == 4)
				if (Persistent)
					if (Waterlogged) return 292;
					else return 293;
				else
					if (Waterlogged) return 294;
					else return 295;
			else if (Distance == 5)
				if (Persistent)
					if (Waterlogged) return 296;
					else return 297;
				else
					if (Waterlogged) return 298;
					else return 299;
			else if (Distance == 6)
				if (Persistent)
					if (Waterlogged) return 300;
					else return 301;
				else
					if (Waterlogged) return 302;
					else return 303;
			else
				if (Persistent)
					if (Waterlogged) return 304;
					else return 305;
				else
					if (Waterlogged) return 306;
					else return 307;
		}
		BlockState SpruceLeaves();
		unsigned char Distance(BlockState Block);
		bool Persistent(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SpruceLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState SpruceLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 139;
			else if (Axis == Axis::Y) return 140;
			else return 141;
		}
		BlockState SpruceLog();
		enum Axis Axis(BlockState Block);
	}
	namespace SprucePlanks
	{
		constexpr BlockState SprucePlanks()
		{
			return 16;
		}
	}
	namespace SprucePressurePlate
	{
		constexpr BlockState SprucePressurePlate(const bool Powered)
		{
			if (Powered) return 5894;
			else return 5895;
		}
		BlockState SprucePressurePlate();
		bool Powered(BlockState Block);
	}
	namespace SpruceSapling
	{
		constexpr BlockState SpruceSapling(const unsigned char Stage)
		{
			if (Stage == 0) return 31;
			else return 32;
		}
		BlockState SpruceSapling();
		unsigned char Stage(BlockState Block);
	}
	namespace SpruceSign
	{
		constexpr BlockState SpruceSign(const unsigned char Rotation, const bool Waterlogged)
		{
			if (Rotation == 0)
				if (Waterlogged) return 4398;
				else return 4399;
			else if (Rotation == 1)
				if (Waterlogged) return 4400;
				else return 4401;
			else if (Rotation == 2)
				if (Waterlogged) return 4402;
				else return 4403;
			else if (Rotation == 3)
				if (Waterlogged) return 4404;
				else return 4405;
			else if (Rotation == 4)
				if (Waterlogged) return 4406;
				else return 4407;
			else if (Rotation == 5)
				if (Waterlogged) return 4408;
				else return 4409;
			else if (Rotation == 6)
				if (Waterlogged) return 4410;
				else return 4411;
			else if (Rotation == 7)
				if (Waterlogged) return 4412;
				else return 4413;
			else if (Rotation == 8)
				if (Waterlogged) return 4414;
				else return 4415;
			else if (Rotation == 9)
				if (Waterlogged) return 4416;
				else return 4417;
			else if (Rotation == 10)
				if (Waterlogged) return 4418;
				else return 4419;
			else if (Rotation == 11)
				if (Waterlogged) return 4420;
				else return 4421;
			else if (Rotation == 12)
				if (Waterlogged) return 4422;
				else return 4423;
			else if (Rotation == 13)
				if (Waterlogged) return 4424;
				else return 4425;
			else if (Rotation == 14)
				if (Waterlogged) return 4426;
				else return 4427;
			else
				if (Waterlogged) return 4428;
				else return 4429;
		}
		BlockState SpruceSign();
		unsigned char Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SpruceSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState SpruceSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 12057;
				else return 12058;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 12059;
				else return 12060;
			else
				if (Waterlogged) return 12061;
				else return 12062;
		}
		BlockState SpruceSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SpruceStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState SpruceStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8450;
						else return 8451;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8452;
						else return 8453;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8454;
						else return 8455;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8456;
						else return 8457;
					else
						if (Waterlogged) return 8458;
						else return 8459;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8460;
						else return 8461;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8462;
						else return 8463;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8464;
						else return 8465;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8466;
						else return 8467;
					else
						if (Waterlogged) return 8468;
						else return 8469;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8470;
						else return 8471;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8472;
						else return 8473;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8474;
						else return 8475;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8476;
						else return 8477;
					else
						if (Waterlogged) return 8478;
						else return 8479;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8480;
						else return 8481;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8482;
						else return 8483;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8484;
						else return 8485;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8486;
						else return 8487;
					else
						if (Waterlogged) return 8488;
						else return 8489;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8490;
						else return 8491;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8492;
						else return 8493;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8494;
						else return 8495;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8496;
						else return 8497;
					else
						if (Waterlogged) return 8498;
						else return 8499;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8500;
						else return 8501;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8502;
						else return 8503;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8504;
						else return 8505;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8506;
						else return 8507;
					else
						if (Waterlogged) return 8508;
						else return 8509;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8510;
						else return 8511;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8512;
						else return 8513;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8514;
						else return 8515;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8516;
						else return 8517;
					else
						if (Waterlogged) return 8518;
						else return 8519;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 8520;
						else return 8521;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 8522;
						else return 8523;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 8524;
						else return 8525;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 8526;
						else return 8527;
					else
						if (Waterlogged) return 8528;
						else return 8529;
		}
		BlockState SpruceStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SpruceTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState SpruceTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6204;
							else return 6205;
						else
							if (Waterlogged) return 6206;
							else return 6207;
					else
						if (Powered)
							if (Waterlogged) return 6208;
							else return 6209;
						else
							if (Waterlogged) return 6210;
							else return 6211;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6212;
							else return 6213;
						else
							if (Waterlogged) return 6214;
							else return 6215;
					else
						if (Powered)
							if (Waterlogged) return 6216;
							else return 6217;
						else
							if (Waterlogged) return 6218;
							else return 6219;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6220;
							else return 6221;
						else
							if (Waterlogged) return 6222;
							else return 6223;
					else
						if (Powered)
							if (Waterlogged) return 6224;
							else return 6225;
						else
							if (Waterlogged) return 6226;
							else return 6227;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6228;
							else return 6229;
						else
							if (Waterlogged) return 6230;
							else return 6231;
					else
						if (Powered)
							if (Waterlogged) return 6232;
							else return 6233;
						else
							if (Waterlogged) return 6234;
							else return 6235;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6236;
							else return 6237;
						else
							if (Waterlogged) return 6238;
							else return 6239;
					else
						if (Powered)
							if (Waterlogged) return 6240;
							else return 6241;
						else
							if (Waterlogged) return 6242;
							else return 6243;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6244;
							else return 6245;
						else
							if (Waterlogged) return 6246;
							else return 6247;
					else
						if (Powered)
							if (Waterlogged) return 6248;
							else return 6249;
						else
							if (Waterlogged) return 6250;
							else return 6251;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6252;
							else return 6253;
						else
							if (Waterlogged) return 6254;
							else return 6255;
					else
						if (Powered)
							if (Waterlogged) return 6256;
							else return 6257;
						else
							if (Waterlogged) return 6258;
							else return 6259;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6260;
							else return 6261;
						else
							if (Waterlogged) return 6262;
							else return 6263;
					else
						if (Powered)
							if (Waterlogged) return 6264;
							else return 6265;
						else
							if (Waterlogged) return 6266;
							else return 6267;
		}
		BlockState SpruceTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SpruceWallHangingSign
	{
		constexpr BlockState SpruceWallHangingSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 5714;
				else return 5715;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 5716;
				else return 5717;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 5718;
				else return 5719;
			else
				if (Waterlogged) return 5720;
				else return 5721;
		}
		BlockState SpruceWallHangingSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SpruceWallSign
	{
		constexpr BlockState SpruceWallSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 4866;
				else return 4867;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 4868;
				else return 4869;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 4870;
				else return 4871;
			else
				if (Waterlogged) return 4872;
				else return 4873;
		}
		BlockState SpruceWallSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SpruceWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState SpruceWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 204;
			else if (Axis == Axis::Y) return 205;
			else return 206;
		}
		BlockState SpruceWood();
		enum Axis Axis(BlockState Block);
	}
	namespace StickyPiston
	{
		constexpr BlockState StickyPiston(const bool Extended, const eBlockFace Facing)
		{
			if (Extended)
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 2035;
				else if (Facing == eBlockFace::BLOCK_FACE_XP) return 2036;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 2037;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 2038;
				else if (Facing == eBlockFace::BLOCK_FACE_YP) return 2039;
				else return 2040;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 2041;
				else if (Facing == eBlockFace::BLOCK_FACE_XP) return 2042;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 2043;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 2044;
				else if (Facing == eBlockFace::BLOCK_FACE_YP) return 2045;
				else return 2046;
		}
		BlockState StickyPiston();
		bool Extended(BlockState Block);
		eBlockFace Facing(BlockState Block);
	}
	namespace Stone
	{
		constexpr BlockState Stone()
		{
			return 1;
		}
	}
	namespace StoneBrickSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState StoneBrickSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 12159;
				else return 12160;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 12161;
				else return 12162;
			else
				if (Waterlogged) return 12163;
				else return 12164;
		}
		BlockState StoneBrickSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace StoneBrickStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState StoneBrickStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7480;
						else return 7481;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7482;
						else return 7483;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7484;
						else return 7485;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7486;
						else return 7487;
					else
						if (Waterlogged) return 7488;
						else return 7489;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7490;
						else return 7491;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7492;
						else return 7493;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7494;
						else return 7495;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7496;
						else return 7497;
					else
						if (Waterlogged) return 7498;
						else return 7499;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7500;
						else return 7501;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7502;
						else return 7503;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7504;
						else return 7505;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7506;
						else return 7507;
					else
						if (Waterlogged) return 7508;
						else return 7509;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7510;
						else return 7511;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7512;
						else return 7513;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7514;
						else return 7515;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7516;
						else return 7517;
					else
						if (Waterlogged) return 7518;
						else return 7519;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7520;
						else return 7521;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7522;
						else return 7523;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7524;
						else return 7525;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7526;
						else return 7527;
					else
						if (Waterlogged) return 7528;
						else return 7529;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7530;
						else return 7531;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7532;
						else return 7533;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7534;
						else return 7535;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7536;
						else return 7537;
					else
						if (Waterlogged) return 7538;
						else return 7539;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7540;
						else return 7541;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7542;
						else return 7543;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7544;
						else return 7545;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7546;
						else return 7547;
					else
						if (Waterlogged) return 7548;
						else return 7549;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7550;
						else return 7551;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7552;
						else return 7553;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7554;
						else return 7555;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7556;
						else return 7557;
					else
						if (Waterlogged) return 7558;
						else return 7559;
		}
		BlockState StoneBrickStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace StoneBrickWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState StoneBrickWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16835;
								else if (West == West::Low) return 16836;
								else return 16837;
							else
								if (West == West::None) return 16838;
								else if (West == West::Low) return 16839;
								else return 16840;
						else
							if (Waterlogged)
								if (West == West::None) return 16841;
								else if (West == West::Low) return 16842;
								else return 16843;
							else
								if (West == West::None) return 16844;
								else if (West == West::Low) return 16845;
								else return 16846;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16847;
								else if (West == West::Low) return 16848;
								else return 16849;
							else
								if (West == West::None) return 16850;
								else if (West == West::Low) return 16851;
								else return 16852;
						else
							if (Waterlogged)
								if (West == West::None) return 16853;
								else if (West == West::Low) return 16854;
								else return 16855;
							else
								if (West == West::None) return 16856;
								else if (West == West::Low) return 16857;
								else return 16858;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16859;
								else if (West == West::Low) return 16860;
								else return 16861;
							else
								if (West == West::None) return 16862;
								else if (West == West::Low) return 16863;
								else return 16864;
						else
							if (Waterlogged)
								if (West == West::None) return 16865;
								else if (West == West::Low) return 16866;
								else return 16867;
							else
								if (West == West::None) return 16868;
								else if (West == West::Low) return 16869;
								else return 16870;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16871;
								else if (West == West::Low) return 16872;
								else return 16873;
							else
								if (West == West::None) return 16874;
								else if (West == West::Low) return 16875;
								else return 16876;
						else
							if (Waterlogged)
								if (West == West::None) return 16877;
								else if (West == West::Low) return 16878;
								else return 16879;
							else
								if (West == West::None) return 16880;
								else if (West == West::Low) return 16881;
								else return 16882;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16883;
								else if (West == West::Low) return 16884;
								else return 16885;
							else
								if (West == West::None) return 16886;
								else if (West == West::Low) return 16887;
								else return 16888;
						else
							if (Waterlogged)
								if (West == West::None) return 16889;
								else if (West == West::Low) return 16890;
								else return 16891;
							else
								if (West == West::None) return 16892;
								else if (West == West::Low) return 16893;
								else return 16894;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16895;
								else if (West == West::Low) return 16896;
								else return 16897;
							else
								if (West == West::None) return 16898;
								else if (West == West::Low) return 16899;
								else return 16900;
						else
							if (Waterlogged)
								if (West == West::None) return 16901;
								else if (West == West::Low) return 16902;
								else return 16903;
							else
								if (West == West::None) return 16904;
								else if (West == West::Low) return 16905;
								else return 16906;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16907;
								else if (West == West::Low) return 16908;
								else return 16909;
							else
								if (West == West::None) return 16910;
								else if (West == West::Low) return 16911;
								else return 16912;
						else
							if (Waterlogged)
								if (West == West::None) return 16913;
								else if (West == West::Low) return 16914;
								else return 16915;
							else
								if (West == West::None) return 16916;
								else if (West == West::Low) return 16917;
								else return 16918;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16919;
								else if (West == West::Low) return 16920;
								else return 16921;
							else
								if (West == West::None) return 16922;
								else if (West == West::Low) return 16923;
								else return 16924;
						else
							if (Waterlogged)
								if (West == West::None) return 16925;
								else if (West == West::Low) return 16926;
								else return 16927;
							else
								if (West == West::None) return 16928;
								else if (West == West::Low) return 16929;
								else return 16930;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16931;
								else if (West == West::Low) return 16932;
								else return 16933;
							else
								if (West == West::None) return 16934;
								else if (West == West::Low) return 16935;
								else return 16936;
						else
							if (Waterlogged)
								if (West == West::None) return 16937;
								else if (West == West::Low) return 16938;
								else return 16939;
							else
								if (West == West::None) return 16940;
								else if (West == West::Low) return 16941;
								else return 16942;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16943;
								else if (West == West::Low) return 16944;
								else return 16945;
							else
								if (West == West::None) return 16946;
								else if (West == West::Low) return 16947;
								else return 16948;
						else
							if (Waterlogged)
								if (West == West::None) return 16949;
								else if (West == West::Low) return 16950;
								else return 16951;
							else
								if (West == West::None) return 16952;
								else if (West == West::Low) return 16953;
								else return 16954;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16955;
								else if (West == West::Low) return 16956;
								else return 16957;
							else
								if (West == West::None) return 16958;
								else if (West == West::Low) return 16959;
								else return 16960;
						else
							if (Waterlogged)
								if (West == West::None) return 16961;
								else if (West == West::Low) return 16962;
								else return 16963;
							else
								if (West == West::None) return 16964;
								else if (West == West::Low) return 16965;
								else return 16966;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16967;
								else if (West == West::Low) return 16968;
								else return 16969;
							else
								if (West == West::None) return 16970;
								else if (West == West::Low) return 16971;
								else return 16972;
						else
							if (Waterlogged)
								if (West == West::None) return 16973;
								else if (West == West::Low) return 16974;
								else return 16975;
							else
								if (West == West::None) return 16976;
								else if (West == West::Low) return 16977;
								else return 16978;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16979;
								else if (West == West::Low) return 16980;
								else return 16981;
							else
								if (West == West::None) return 16982;
								else if (West == West::Low) return 16983;
								else return 16984;
						else
							if (Waterlogged)
								if (West == West::None) return 16985;
								else if (West == West::Low) return 16986;
								else return 16987;
							else
								if (West == West::None) return 16988;
								else if (West == West::Low) return 16989;
								else return 16990;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16991;
								else if (West == West::Low) return 16992;
								else return 16993;
							else
								if (West == West::None) return 16994;
								else if (West == West::Low) return 16995;
								else return 16996;
						else
							if (Waterlogged)
								if (West == West::None) return 16997;
								else if (West == West::Low) return 16998;
								else return 16999;
							else
								if (West == West::None) return 17000;
								else if (West == West::Low) return 17001;
								else return 17002;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17003;
								else if (West == West::Low) return 17004;
								else return 17005;
							else
								if (West == West::None) return 17006;
								else if (West == West::Low) return 17007;
								else return 17008;
						else
							if (Waterlogged)
								if (West == West::None) return 17009;
								else if (West == West::Low) return 17010;
								else return 17011;
							else
								if (West == West::None) return 17012;
								else if (West == West::Low) return 17013;
								else return 17014;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17015;
								else if (West == West::Low) return 17016;
								else return 17017;
							else
								if (West == West::None) return 17018;
								else if (West == West::Low) return 17019;
								else return 17020;
						else
							if (Waterlogged)
								if (West == West::None) return 17021;
								else if (West == West::Low) return 17022;
								else return 17023;
							else
								if (West == West::None) return 17024;
								else if (West == West::Low) return 17025;
								else return 17026;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17027;
								else if (West == West::Low) return 17028;
								else return 17029;
							else
								if (West == West::None) return 17030;
								else if (West == West::Low) return 17031;
								else return 17032;
						else
							if (Waterlogged)
								if (West == West::None) return 17033;
								else if (West == West::Low) return 17034;
								else return 17035;
							else
								if (West == West::None) return 17036;
								else if (West == West::Low) return 17037;
								else return 17038;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17039;
								else if (West == West::Low) return 17040;
								else return 17041;
							else
								if (West == West::None) return 17042;
								else if (West == West::Low) return 17043;
								else return 17044;
						else
							if (Waterlogged)
								if (West == West::None) return 17045;
								else if (West == West::Low) return 17046;
								else return 17047;
							else
								if (West == West::None) return 17048;
								else if (West == West::Low) return 17049;
								else return 17050;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17051;
								else if (West == West::Low) return 17052;
								else return 17053;
							else
								if (West == West::None) return 17054;
								else if (West == West::Low) return 17055;
								else return 17056;
						else
							if (Waterlogged)
								if (West == West::None) return 17057;
								else if (West == West::Low) return 17058;
								else return 17059;
							else
								if (West == West::None) return 17060;
								else if (West == West::Low) return 17061;
								else return 17062;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17063;
								else if (West == West::Low) return 17064;
								else return 17065;
							else
								if (West == West::None) return 17066;
								else if (West == West::Low) return 17067;
								else return 17068;
						else
							if (Waterlogged)
								if (West == West::None) return 17069;
								else if (West == West::Low) return 17070;
								else return 17071;
							else
								if (West == West::None) return 17072;
								else if (West == West::Low) return 17073;
								else return 17074;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17075;
								else if (West == West::Low) return 17076;
								else return 17077;
							else
								if (West == West::None) return 17078;
								else if (West == West::Low) return 17079;
								else return 17080;
						else
							if (Waterlogged)
								if (West == West::None) return 17081;
								else if (West == West::Low) return 17082;
								else return 17083;
							else
								if (West == West::None) return 17084;
								else if (West == West::Low) return 17085;
								else return 17086;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17087;
								else if (West == West::Low) return 17088;
								else return 17089;
							else
								if (West == West::None) return 17090;
								else if (West == West::Low) return 17091;
								else return 17092;
						else
							if (Waterlogged)
								if (West == West::None) return 17093;
								else if (West == West::Low) return 17094;
								else return 17095;
							else
								if (West == West::None) return 17096;
								else if (West == West::Low) return 17097;
								else return 17098;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17099;
								else if (West == West::Low) return 17100;
								else return 17101;
							else
								if (West == West::None) return 17102;
								else if (West == West::Low) return 17103;
								else return 17104;
						else
							if (Waterlogged)
								if (West == West::None) return 17105;
								else if (West == West::Low) return 17106;
								else return 17107;
							else
								if (West == West::None) return 17108;
								else if (West == West::Low) return 17109;
								else return 17110;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17111;
								else if (West == West::Low) return 17112;
								else return 17113;
							else
								if (West == West::None) return 17114;
								else if (West == West::Low) return 17115;
								else return 17116;
						else
							if (Waterlogged)
								if (West == West::None) return 17117;
								else if (West == West::Low) return 17118;
								else return 17119;
							else
								if (West == West::None) return 17120;
								else if (West == West::Low) return 17121;
								else return 17122;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17123;
								else if (West == West::Low) return 17124;
								else return 17125;
							else
								if (West == West::None) return 17126;
								else if (West == West::Low) return 17127;
								else return 17128;
						else
							if (Waterlogged)
								if (West == West::None) return 17129;
								else if (West == West::Low) return 17130;
								else return 17131;
							else
								if (West == West::None) return 17132;
								else if (West == West::Low) return 17133;
								else return 17134;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17135;
								else if (West == West::Low) return 17136;
								else return 17137;
							else
								if (West == West::None) return 17138;
								else if (West == West::Low) return 17139;
								else return 17140;
						else
							if (Waterlogged)
								if (West == West::None) return 17141;
								else if (West == West::Low) return 17142;
								else return 17143;
							else
								if (West == West::None) return 17144;
								else if (West == West::Low) return 17145;
								else return 17146;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17147;
								else if (West == West::Low) return 17148;
								else return 17149;
							else
								if (West == West::None) return 17150;
								else if (West == West::Low) return 17151;
								else return 17152;
						else
							if (Waterlogged)
								if (West == West::None) return 17153;
								else if (West == West::Low) return 17154;
								else return 17155;
							else
								if (West == West::None) return 17156;
								else if (West == West::Low) return 17157;
								else return 17158;
		}
		BlockState StoneBrickWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace StoneBricks
	{
		constexpr BlockState StoneBricks()
		{
			return 6780;
		}
	}
	namespace StoneButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState StoneButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 5926;
					else return 5927;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 5928;
					else return 5929;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 5930;
					else return 5931;
				else
					if (Powered) return 5932;
					else return 5933;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 5934;
					else return 5935;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 5936;
					else return 5937;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 5938;
					else return 5939;
				else
					if (Powered) return 5940;
					else return 5941;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 5942;
					else return 5943;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 5944;
					else return 5945;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 5946;
					else return 5947;
				else
					if (Powered) return 5948;
					else return 5949;
		}
		BlockState StoneButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace StonePressurePlate
	{
		constexpr BlockState StonePressurePlate(const bool Powered)
		{
			if (Powered) return 5826;
			else return 5827;
		}
		BlockState StonePressurePlate();
		bool Powered(BlockState Block);
	}
	namespace StoneSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState StoneSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 12117;
				else return 12118;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 12119;
				else return 12120;
			else
				if (Waterlogged) return 12121;
				else return 12122;
		}
		BlockState StoneSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace StoneStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState StoneStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14497;
						else return 14498;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14499;
						else return 14500;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14501;
						else return 14502;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14503;
						else return 14504;
					else
						if (Waterlogged) return 14505;
						else return 14506;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14507;
						else return 14508;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14509;
						else return 14510;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14511;
						else return 14512;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14513;
						else return 14514;
					else
						if (Waterlogged) return 14515;
						else return 14516;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14517;
						else return 14518;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14519;
						else return 14520;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14521;
						else return 14522;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14523;
						else return 14524;
					else
						if (Waterlogged) return 14525;
						else return 14526;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14527;
						else return 14528;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14529;
						else return 14530;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14531;
						else return 14532;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14533;
						else return 14534;
					else
						if (Waterlogged) return 14535;
						else return 14536;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14537;
						else return 14538;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14539;
						else return 14540;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14541;
						else return 14542;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14543;
						else return 14544;
					else
						if (Waterlogged) return 14545;
						else return 14546;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14547;
						else return 14548;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14549;
						else return 14550;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14551;
						else return 14552;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14553;
						else return 14554;
					else
						if (Waterlogged) return 14555;
						else return 14556;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14557;
						else return 14558;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14559;
						else return 14560;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14561;
						else return 14562;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14563;
						else return 14564;
					else
						if (Waterlogged) return 14565;
						else return 14566;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14567;
						else return 14568;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14569;
						else return 14570;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14571;
						else return 14572;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14573;
						else return 14574;
					else
						if (Waterlogged) return 14575;
						else return 14576;
		}
		BlockState StoneStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Stonecutter
	{
		constexpr BlockState Stonecutter(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 19522;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 19523;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 19524;
			else return 19525;
		}
		BlockState Stonecutter();
		eBlockFace Facing(BlockState Block);
	}
	namespace StrippedAcaciaLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedAcaciaLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 180;
			else if (Axis == Axis::Y) return 181;
			else return 182;
		}
		BlockState StrippedAcaciaLog();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedAcaciaWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedAcaciaWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 237;
			else if (Axis == Axis::Y) return 238;
			else return 239;
		}
		BlockState StrippedAcaciaWood();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedBambooBlock
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedBambooBlock(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 198;
			else if (Axis == Axis::Y) return 199;
			else return 200;
		}
		BlockState StrippedBambooBlock();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedBirchLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedBirchLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 174;
			else if (Axis == Axis::Y) return 175;
			else return 176;
		}
		BlockState StrippedBirchLog();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedBirchWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedBirchWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 231;
			else if (Axis == Axis::Y) return 232;
			else return 233;
		}
		BlockState StrippedBirchWood();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedCherryLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedCherryLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 183;
			else if (Axis == Axis::Y) return 184;
			else return 185;
		}
		BlockState StrippedCherryLog();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedCherryWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedCherryWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 240;
			else if (Axis == Axis::Y) return 241;
			else return 242;
		}
		BlockState StrippedCherryWood();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedCrimsonHyphae
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedCrimsonHyphae(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 19660;
			else if (Axis == Axis::Y) return 19661;
			else return 19662;
		}
		BlockState StrippedCrimsonHyphae();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedCrimsonStem
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedCrimsonStem(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 19654;
			else if (Axis == Axis::Y) return 19655;
			else return 19656;
		}
		BlockState StrippedCrimsonStem();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedDarkOakLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedDarkOakLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 186;
			else if (Axis == Axis::Y) return 187;
			else return 188;
		}
		BlockState StrippedDarkOakLog();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedDarkOakWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedDarkOakWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 243;
			else if (Axis == Axis::Y) return 244;
			else return 245;
		}
		BlockState StrippedDarkOakWood();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedJungleLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedJungleLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 177;
			else if (Axis == Axis::Y) return 178;
			else return 179;
		}
		BlockState StrippedJungleLog();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedJungleWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedJungleWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 234;
			else if (Axis == Axis::Y) return 235;
			else return 236;
		}
		BlockState StrippedJungleWood();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedMangroveLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedMangroveLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 195;
			else if (Axis == Axis::Y) return 196;
			else return 197;
		}
		BlockState StrippedMangroveLog();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedMangroveWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedMangroveWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 249;
			else if (Axis == Axis::Y) return 250;
			else return 251;
		}
		BlockState StrippedMangroveWood();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedOakLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedOakLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 192;
			else if (Axis == Axis::Y) return 193;
			else return 194;
		}
		BlockState StrippedOakLog();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedOakWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedOakWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 225;
			else if (Axis == Axis::Y) return 226;
			else return 227;
		}
		BlockState StrippedOakWood();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedPaleOakLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedPaleOakLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 189;
			else if (Axis == Axis::Y) return 190;
			else return 191;
		}
		BlockState StrippedPaleOakLog();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedPaleOakWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedPaleOakWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 246;
			else if (Axis == Axis::Y) return 247;
			else return 248;
		}
		BlockState StrippedPaleOakWood();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedSpruceLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedSpruceLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 171;
			else if (Axis == Axis::Y) return 172;
			else return 173;
		}
		BlockState StrippedSpruceLog();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedSpruceWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedSpruceWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 228;
			else if (Axis == Axis::Y) return 229;
			else return 230;
		}
		BlockState StrippedSpruceWood();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedWarpedHyphae
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedWarpedHyphae(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 19643;
			else if (Axis == Axis::Y) return 19644;
			else return 19645;
		}
		BlockState StrippedWarpedHyphae();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedWarpedStem
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedWarpedStem(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 19637;
			else if (Axis == Axis::Y) return 19638;
			else return 19639;
		}
		BlockState StrippedWarpedStem();
		enum Axis Axis(BlockState Block);
	}
	namespace StructureBlock
	{
		enum class Mode
		{
			Save,
			Load,
			Corner,
			Data,
		};
		constexpr BlockState StructureBlock(const enum Mode Mode)
		{
			if (Mode == Mode::Save) return 20411;
			else if (Mode == Mode::Load) return 20412;
			else if (Mode == Mode::Corner) return 20413;
			else return 20414;
		}
		BlockState StructureBlock();
		enum Mode Mode(BlockState Block);
	}
	namespace StructureVoid
	{
		constexpr BlockState StructureVoid()
		{
			return 13572;
		}
	}
	namespace SugarCane
	{
		constexpr BlockState SugarCane(const unsigned char Age)
		{
			if (Age == 0) return 5978;
			else if (Age == 1) return 5979;
			else if (Age == 2) return 5980;
			else if (Age == 3) return 5981;
			else if (Age == 4) return 5982;
			else if (Age == 5) return 5983;
			else if (Age == 6) return 5984;
			else if (Age == 7) return 5985;
			else if (Age == 8) return 5986;
			else if (Age == 9) return 5987;
			else if (Age == 10) return 5988;
			else if (Age == 11) return 5989;
			else if (Age == 12) return 5990;
			else if (Age == 13) return 5991;
			else if (Age == 14) return 5992;
			else return 5993;
		}
		BlockState SugarCane();
		unsigned char Age(BlockState Block);
	}
	namespace Sunflower
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		constexpr BlockState Sunflower(const enum Half Half)
		{
			if (Half == Half::Upper) return 11636;
			else return 11637;
		}
		BlockState Sunflower();
		enum Half Half(BlockState Block);
	}
	namespace SuspiciousGravel
	{
		constexpr BlockState SuspiciousGravel(const unsigned char Dusted)
		{
			if (Dusted == 0) return 125;
			else if (Dusted == 1) return 126;
			else if (Dusted == 2) return 127;
			else return 128;
		}
		BlockState SuspiciousGravel();
		unsigned char Dusted(BlockState Block);
	}
	namespace SuspiciousSand
	{
		constexpr BlockState SuspiciousSand(const unsigned char Dusted)
		{
			if (Dusted == 0) return 119;
			else if (Dusted == 1) return 120;
			else if (Dusted == 2) return 121;
			else return 122;
		}
		BlockState SuspiciousSand();
		unsigned char Dusted(BlockState Block);
	}
	namespace SweetBerryBush
	{
		constexpr BlockState SweetBerryBush(const unsigned char Age)
		{
			if (Age == 0) return 19630;
			else if (Age == 1) return 19631;
			else if (Age == 2) return 19632;
			else return 19633;
		}
		BlockState SweetBerryBush();
		unsigned char Age(BlockState Block);
	}
	namespace TallDryGrass
	{
		constexpr BlockState TallDryGrass()
		{
			return 2053;
		}
	}
	namespace TallGrass
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		constexpr BlockState TallGrass(const enum Half Half)
		{
			if (Half == Half::Upper) return 11644;
			else return 11645;
		}
		BlockState TallGrass();
		enum Half Half(BlockState Block);
	}
	namespace TallSeagrass
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		constexpr BlockState TallSeagrass(const enum Half Half)
		{
			if (Half == Half::Upper) return 2055;
			else return 2056;
		}
		BlockState TallSeagrass();
		enum Half Half(BlockState Block);
	}
	namespace Target
	{
		constexpr BlockState Target(const unsigned char Power)
		{
			if (Power == 0) return 20441;
			else if (Power == 1) return 20442;
			else if (Power == 2) return 20443;
			else if (Power == 3) return 20444;
			else if (Power == 4) return 20445;
			else if (Power == 5) return 20446;
			else if (Power == 6) return 20447;
			else if (Power == 7) return 20448;
			else if (Power == 8) return 20449;
			else if (Power == 9) return 20450;
			else if (Power == 10) return 20451;
			else if (Power == 11) return 20452;
			else if (Power == 12) return 20453;
			else if (Power == 13) return 20454;
			else if (Power == 14) return 20455;
			else return 20456;
		}
		BlockState Target();
		unsigned char Power(BlockState Block);
	}
	namespace Terracotta
	{
		constexpr BlockState Terracotta()
		{
			return 11633;
		}
	}
	namespace TestBlock
	{
		enum class Mode
		{
			Start,
			Log,
			Fail,
			Accept,
		};
		constexpr BlockState TestBlock(const enum Mode Mode)
		{
			if (Mode == Mode::Start) return 20427;
			else if (Mode == Mode::Log) return 20428;
			else if (Mode == Mode::Fail) return 20429;
			else return 20430;
		}
		BlockState TestBlock();
		enum Mode Mode(BlockState Block);
	}
	namespace TestInstanceBlock
	{
		constexpr BlockState TestInstanceBlock()
		{
			return 20431;
		}
	}
	namespace TintedGlass
	{
		constexpr BlockState TintedGlass()
		{
			return 23377;
		}
	}
	namespace Tnt
	{
		constexpr BlockState Tnt(const bool Unstable)
		{
			if (Unstable) return 2140;
			else return 2141;
		}
		BlockState Tnt();
		bool Unstable(BlockState Block);
	}
	namespace Torch
	{
		constexpr BlockState Torch()
		{
			return 2401;
		}
	}
	namespace Torchflower
	{
		constexpr BlockState Torchflower()
		{
			return 2122;
		}
	}
	namespace TorchflowerCrop
	{
		constexpr BlockState TorchflowerCrop(const unsigned char Age)
		{
			if (Age == 0) return 13518;
			else return 13519;
		}
		BlockState TorchflowerCrop();
		unsigned char Age(BlockState Block);
	}
	namespace TrappedChest
	{
		enum class Type
		{
			Single,
			Left,
			Right,
		};
		constexpr BlockState TrappedChest(const eBlockFace Facing, const enum Type Type, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Type == Type::Single)
					if (Waterlogged) return 9928;
					else return 9929;
				else if (Type == Type::Left)
					if (Waterlogged) return 9930;
					else return 9931;
				else
					if (Waterlogged) return 9932;
					else return 9933;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Type == Type::Single)
					if (Waterlogged) return 9934;
					else return 9935;
				else if (Type == Type::Left)
					if (Waterlogged) return 9936;
					else return 9937;
				else
					if (Waterlogged) return 9938;
					else return 9939;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Type == Type::Single)
					if (Waterlogged) return 9940;
					else return 9941;
				else if (Type == Type::Left)
					if (Waterlogged) return 9942;
					else return 9943;
				else
					if (Waterlogged) return 9944;
					else return 9945;
			else
				if (Type == Type::Single)
					if (Waterlogged) return 9946;
					else return 9947;
				else if (Type == Type::Left)
					if (Waterlogged) return 9948;
					else return 9949;
				else
					if (Waterlogged) return 9950;
					else return 9951;
		}
		BlockState TrappedChest();
		eBlockFace Facing(BlockState Block);
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace TrialSpawner
	{
		enum class TrialSpawnerState
		{
			Inactive,
			WaitingForPlayers,
			Active,
			WaitingForRewardEjection,
			EjectingReward,
			Cooldown,
		};
		constexpr BlockState TrialSpawner(const bool Ominous, const enum TrialSpawnerState TrialSpawnerState)
		{
			if (Ominous)
				if (TrialSpawnerState == TrialSpawnerState::Inactive) return 27730;
				else if (TrialSpawnerState == TrialSpawnerState::WaitingForPlayers) return 27731;
				else if (TrialSpawnerState == TrialSpawnerState::Active) return 27732;
				else if (TrialSpawnerState == TrialSpawnerState::WaitingForRewardEjection) return 27733;
				else if (TrialSpawnerState == TrialSpawnerState::EjectingReward) return 27734;
				else return 27735;
			else
				if (TrialSpawnerState == TrialSpawnerState::Inactive) return 27736;
				else if (TrialSpawnerState == TrialSpawnerState::WaitingForPlayers) return 27737;
				else if (TrialSpawnerState == TrialSpawnerState::Active) return 27738;
				else if (TrialSpawnerState == TrialSpawnerState::WaitingForRewardEjection) return 27739;
				else if (TrialSpawnerState == TrialSpawnerState::EjectingReward) return 27740;
				else return 27741;
		}
		BlockState TrialSpawner();
		bool Ominous(BlockState Block);
		enum TrialSpawnerState TrialSpawnerState(BlockState Block);
	}
	namespace Tripwire
	{
		constexpr BlockState Tripwire(const bool Attached, const bool Disarmed, const bool East, const bool North, const bool Powered, const bool South, const bool West)
		{
			if (Attached)
				if (Disarmed)
					if (East)
						if (North)
							if (Powered)
								if (South)
									if (West) return 8321;
									else return 8322;
								else
									if (West) return 8323;
									else return 8324;
							else
								if (South)
									if (West) return 8325;
									else return 8326;
								else
									if (West) return 8327;
									else return 8328;
						else
							if (Powered)
								if (South)
									if (West) return 8329;
									else return 8330;
								else
									if (West) return 8331;
									else return 8332;
							else
								if (South)
									if (West) return 8333;
									else return 8334;
								else
									if (West) return 8335;
									else return 8336;
					else
						if (North)
							if (Powered)
								if (South)
									if (West) return 8337;
									else return 8338;
								else
									if (West) return 8339;
									else return 8340;
							else
								if (South)
									if (West) return 8341;
									else return 8342;
								else
									if (West) return 8343;
									else return 8344;
						else
							if (Powered)
								if (South)
									if (West) return 8345;
									else return 8346;
								else
									if (West) return 8347;
									else return 8348;
							else
								if (South)
									if (West) return 8349;
									else return 8350;
								else
									if (West) return 8351;
									else return 8352;
				else
					if (East)
						if (North)
							if (Powered)
								if (South)
									if (West) return 8353;
									else return 8354;
								else
									if (West) return 8355;
									else return 8356;
							else
								if (South)
									if (West) return 8357;
									else return 8358;
								else
									if (West) return 8359;
									else return 8360;
						else
							if (Powered)
								if (South)
									if (West) return 8361;
									else return 8362;
								else
									if (West) return 8363;
									else return 8364;
							else
								if (South)
									if (West) return 8365;
									else return 8366;
								else
									if (West) return 8367;
									else return 8368;
					else
						if (North)
							if (Powered)
								if (South)
									if (West) return 8369;
									else return 8370;
								else
									if (West) return 8371;
									else return 8372;
							else
								if (South)
									if (West) return 8373;
									else return 8374;
								else
									if (West) return 8375;
									else return 8376;
						else
							if (Powered)
								if (South)
									if (West) return 8377;
									else return 8378;
								else
									if (West) return 8379;
									else return 8380;
							else
								if (South)
									if (West) return 8381;
									else return 8382;
								else
									if (West) return 8383;
									else return 8384;
			else
				if (Disarmed)
					if (East)
						if (North)
							if (Powered)
								if (South)
									if (West) return 8385;
									else return 8386;
								else
									if (West) return 8387;
									else return 8388;
							else
								if (South)
									if (West) return 8389;
									else return 8390;
								else
									if (West) return 8391;
									else return 8392;
						else
							if (Powered)
								if (South)
									if (West) return 8393;
									else return 8394;
								else
									if (West) return 8395;
									else return 8396;
							else
								if (South)
									if (West) return 8397;
									else return 8398;
								else
									if (West) return 8399;
									else return 8400;
					else
						if (North)
							if (Powered)
								if (South)
									if (West) return 8401;
									else return 8402;
								else
									if (West) return 8403;
									else return 8404;
							else
								if (South)
									if (West) return 8405;
									else return 8406;
								else
									if (West) return 8407;
									else return 8408;
						else
							if (Powered)
								if (South)
									if (West) return 8409;
									else return 8410;
								else
									if (West) return 8411;
									else return 8412;
							else
								if (South)
									if (West) return 8413;
									else return 8414;
								else
									if (West) return 8415;
									else return 8416;
				else
					if (East)
						if (North)
							if (Powered)
								if (South)
									if (West) return 8417;
									else return 8418;
								else
									if (West) return 8419;
									else return 8420;
							else
								if (South)
									if (West) return 8421;
									else return 8422;
								else
									if (West) return 8423;
									else return 8424;
						else
							if (Powered)
								if (South)
									if (West) return 8425;
									else return 8426;
								else
									if (West) return 8427;
									else return 8428;
							else
								if (South)
									if (West) return 8429;
									else return 8430;
								else
									if (West) return 8431;
									else return 8432;
					else
						if (North)
							if (Powered)
								if (South)
									if (West) return 8433;
									else return 8434;
								else
									if (West) return 8435;
									else return 8436;
							else
								if (South)
									if (West) return 8437;
									else return 8438;
								else
									if (West) return 8439;
									else return 8440;
						else
							if (Powered)
								if (South)
									if (West) return 8441;
									else return 8442;
								else
									if (West) return 8443;
									else return 8444;
							else
								if (South)
									if (West) return 8445;
									else return 8446;
								else
									if (West) return 8447;
									else return 8448;
		}
		BlockState Tripwire();
		bool Attached(BlockState Block);
		bool Disarmed(BlockState Block);
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool Powered(BlockState Block);
		bool South(BlockState Block);
		bool West(BlockState Block);
	}
	namespace TripwireHook
	{
		constexpr BlockState TripwireHook(const bool Attached, const eBlockFace Facing, const bool Powered)
		{
			if (Attached)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8305;
					else return 8306;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8307;
					else return 8308;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8309;
					else return 8310;
				else
					if (Powered) return 8311;
					else return 8312;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8313;
					else return 8314;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8315;
					else return 8316;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8317;
					else return 8318;
				else
					if (Powered) return 8319;
					else return 8320;
		}
		BlockState TripwireHook();
		bool Attached(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace TubeCoral
	{
		constexpr BlockState TubeCoral(const bool Waterlogged)
		{
			if (Waterlogged) return 13878;
			else return 13879;
		}
		BlockState TubeCoral();
		bool Waterlogged(BlockState Block);
	}
	namespace TubeCoralBlock
	{
		constexpr BlockState TubeCoralBlock()
		{
			return 13863;
		}
	}
	namespace TubeCoralFan
	{
		constexpr BlockState TubeCoralFan(const bool Waterlogged)
		{
			if (Waterlogged) return 13898;
			else return 13899;
		}
		BlockState TubeCoralFan();
		bool Waterlogged(BlockState Block);
	}
	namespace TubeCoralWallFan
	{
		constexpr BlockState TubeCoralWallFan(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 13948;
				else return 13949;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 13950;
				else return 13951;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 13952;
				else return 13953;
			else
				if (Waterlogged) return 13954;
				else return 13955;
		}
		BlockState TubeCoralWallFan();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Tuff
	{
		constexpr BlockState Tuff()
		{
			return 22141;
		}
	}
	namespace TuffBrickSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState TuffBrickSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 22965;
				else return 22966;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 22967;
				else return 22968;
			else
				if (Waterlogged) return 22969;
				else return 22970;
		}
		BlockState TuffBrickSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace TuffBrickStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState TuffBrickStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 22971;
						else return 22972;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 22973;
						else return 22974;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 22975;
						else return 22976;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 22977;
						else return 22978;
					else
						if (Waterlogged) return 22979;
						else return 22980;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 22981;
						else return 22982;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 22983;
						else return 22984;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 22985;
						else return 22986;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 22987;
						else return 22988;
					else
						if (Waterlogged) return 22989;
						else return 22990;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 22991;
						else return 22992;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 22993;
						else return 22994;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 22995;
						else return 22996;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 22997;
						else return 22998;
					else
						if (Waterlogged) return 22999;
						else return 23000;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23001;
						else return 23002;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23003;
						else return 23004;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23005;
						else return 23006;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23007;
						else return 23008;
					else
						if (Waterlogged) return 23009;
						else return 23010;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23011;
						else return 23012;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23013;
						else return 23014;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23015;
						else return 23016;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23017;
						else return 23018;
					else
						if (Waterlogged) return 23019;
						else return 23020;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23021;
						else return 23022;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23023;
						else return 23024;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23025;
						else return 23026;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23027;
						else return 23028;
					else
						if (Waterlogged) return 23029;
						else return 23030;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23031;
						else return 23032;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23033;
						else return 23034;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23035;
						else return 23036;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23037;
						else return 23038;
					else
						if (Waterlogged) return 23039;
						else return 23040;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23041;
						else return 23042;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23043;
						else return 23044;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23045;
						else return 23046;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23047;
						else return 23048;
					else
						if (Waterlogged) return 23049;
						else return 23050;
		}
		BlockState TuffBrickStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace TuffBrickWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState TuffBrickWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23051;
								else if (West == West::Low) return 23052;
								else return 23053;
							else
								if (West == West::None) return 23054;
								else if (West == West::Low) return 23055;
								else return 23056;
						else
							if (Waterlogged)
								if (West == West::None) return 23057;
								else if (West == West::Low) return 23058;
								else return 23059;
							else
								if (West == West::None) return 23060;
								else if (West == West::Low) return 23061;
								else return 23062;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23063;
								else if (West == West::Low) return 23064;
								else return 23065;
							else
								if (West == West::None) return 23066;
								else if (West == West::Low) return 23067;
								else return 23068;
						else
							if (Waterlogged)
								if (West == West::None) return 23069;
								else if (West == West::Low) return 23070;
								else return 23071;
							else
								if (West == West::None) return 23072;
								else if (West == West::Low) return 23073;
								else return 23074;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23075;
								else if (West == West::Low) return 23076;
								else return 23077;
							else
								if (West == West::None) return 23078;
								else if (West == West::Low) return 23079;
								else return 23080;
						else
							if (Waterlogged)
								if (West == West::None) return 23081;
								else if (West == West::Low) return 23082;
								else return 23083;
							else
								if (West == West::None) return 23084;
								else if (West == West::Low) return 23085;
								else return 23086;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23087;
								else if (West == West::Low) return 23088;
								else return 23089;
							else
								if (West == West::None) return 23090;
								else if (West == West::Low) return 23091;
								else return 23092;
						else
							if (Waterlogged)
								if (West == West::None) return 23093;
								else if (West == West::Low) return 23094;
								else return 23095;
							else
								if (West == West::None) return 23096;
								else if (West == West::Low) return 23097;
								else return 23098;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23099;
								else if (West == West::Low) return 23100;
								else return 23101;
							else
								if (West == West::None) return 23102;
								else if (West == West::Low) return 23103;
								else return 23104;
						else
							if (Waterlogged)
								if (West == West::None) return 23105;
								else if (West == West::Low) return 23106;
								else return 23107;
							else
								if (West == West::None) return 23108;
								else if (West == West::Low) return 23109;
								else return 23110;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23111;
								else if (West == West::Low) return 23112;
								else return 23113;
							else
								if (West == West::None) return 23114;
								else if (West == West::Low) return 23115;
								else return 23116;
						else
							if (Waterlogged)
								if (West == West::None) return 23117;
								else if (West == West::Low) return 23118;
								else return 23119;
							else
								if (West == West::None) return 23120;
								else if (West == West::Low) return 23121;
								else return 23122;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23123;
								else if (West == West::Low) return 23124;
								else return 23125;
							else
								if (West == West::None) return 23126;
								else if (West == West::Low) return 23127;
								else return 23128;
						else
							if (Waterlogged)
								if (West == West::None) return 23129;
								else if (West == West::Low) return 23130;
								else return 23131;
							else
								if (West == West::None) return 23132;
								else if (West == West::Low) return 23133;
								else return 23134;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23135;
								else if (West == West::Low) return 23136;
								else return 23137;
							else
								if (West == West::None) return 23138;
								else if (West == West::Low) return 23139;
								else return 23140;
						else
							if (Waterlogged)
								if (West == West::None) return 23141;
								else if (West == West::Low) return 23142;
								else return 23143;
							else
								if (West == West::None) return 23144;
								else if (West == West::Low) return 23145;
								else return 23146;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23147;
								else if (West == West::Low) return 23148;
								else return 23149;
							else
								if (West == West::None) return 23150;
								else if (West == West::Low) return 23151;
								else return 23152;
						else
							if (Waterlogged)
								if (West == West::None) return 23153;
								else if (West == West::Low) return 23154;
								else return 23155;
							else
								if (West == West::None) return 23156;
								else if (West == West::Low) return 23157;
								else return 23158;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23159;
								else if (West == West::Low) return 23160;
								else return 23161;
							else
								if (West == West::None) return 23162;
								else if (West == West::Low) return 23163;
								else return 23164;
						else
							if (Waterlogged)
								if (West == West::None) return 23165;
								else if (West == West::Low) return 23166;
								else return 23167;
							else
								if (West == West::None) return 23168;
								else if (West == West::Low) return 23169;
								else return 23170;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23171;
								else if (West == West::Low) return 23172;
								else return 23173;
							else
								if (West == West::None) return 23174;
								else if (West == West::Low) return 23175;
								else return 23176;
						else
							if (Waterlogged)
								if (West == West::None) return 23177;
								else if (West == West::Low) return 23178;
								else return 23179;
							else
								if (West == West::None) return 23180;
								else if (West == West::Low) return 23181;
								else return 23182;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23183;
								else if (West == West::Low) return 23184;
								else return 23185;
							else
								if (West == West::None) return 23186;
								else if (West == West::Low) return 23187;
								else return 23188;
						else
							if (Waterlogged)
								if (West == West::None) return 23189;
								else if (West == West::Low) return 23190;
								else return 23191;
							else
								if (West == West::None) return 23192;
								else if (West == West::Low) return 23193;
								else return 23194;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23195;
								else if (West == West::Low) return 23196;
								else return 23197;
							else
								if (West == West::None) return 23198;
								else if (West == West::Low) return 23199;
								else return 23200;
						else
							if (Waterlogged)
								if (West == West::None) return 23201;
								else if (West == West::Low) return 23202;
								else return 23203;
							else
								if (West == West::None) return 23204;
								else if (West == West::Low) return 23205;
								else return 23206;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23207;
								else if (West == West::Low) return 23208;
								else return 23209;
							else
								if (West == West::None) return 23210;
								else if (West == West::Low) return 23211;
								else return 23212;
						else
							if (Waterlogged)
								if (West == West::None) return 23213;
								else if (West == West::Low) return 23214;
								else return 23215;
							else
								if (West == West::None) return 23216;
								else if (West == West::Low) return 23217;
								else return 23218;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23219;
								else if (West == West::Low) return 23220;
								else return 23221;
							else
								if (West == West::None) return 23222;
								else if (West == West::Low) return 23223;
								else return 23224;
						else
							if (Waterlogged)
								if (West == West::None) return 23225;
								else if (West == West::Low) return 23226;
								else return 23227;
							else
								if (West == West::None) return 23228;
								else if (West == West::Low) return 23229;
								else return 23230;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23231;
								else if (West == West::Low) return 23232;
								else return 23233;
							else
								if (West == West::None) return 23234;
								else if (West == West::Low) return 23235;
								else return 23236;
						else
							if (Waterlogged)
								if (West == West::None) return 23237;
								else if (West == West::Low) return 23238;
								else return 23239;
							else
								if (West == West::None) return 23240;
								else if (West == West::Low) return 23241;
								else return 23242;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23243;
								else if (West == West::Low) return 23244;
								else return 23245;
							else
								if (West == West::None) return 23246;
								else if (West == West::Low) return 23247;
								else return 23248;
						else
							if (Waterlogged)
								if (West == West::None) return 23249;
								else if (West == West::Low) return 23250;
								else return 23251;
							else
								if (West == West::None) return 23252;
								else if (West == West::Low) return 23253;
								else return 23254;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23255;
								else if (West == West::Low) return 23256;
								else return 23257;
							else
								if (West == West::None) return 23258;
								else if (West == West::Low) return 23259;
								else return 23260;
						else
							if (Waterlogged)
								if (West == West::None) return 23261;
								else if (West == West::Low) return 23262;
								else return 23263;
							else
								if (West == West::None) return 23264;
								else if (West == West::Low) return 23265;
								else return 23266;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23267;
								else if (West == West::Low) return 23268;
								else return 23269;
							else
								if (West == West::None) return 23270;
								else if (West == West::Low) return 23271;
								else return 23272;
						else
							if (Waterlogged)
								if (West == West::None) return 23273;
								else if (West == West::Low) return 23274;
								else return 23275;
							else
								if (West == West::None) return 23276;
								else if (West == West::Low) return 23277;
								else return 23278;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23279;
								else if (West == West::Low) return 23280;
								else return 23281;
							else
								if (West == West::None) return 23282;
								else if (West == West::Low) return 23283;
								else return 23284;
						else
							if (Waterlogged)
								if (West == West::None) return 23285;
								else if (West == West::Low) return 23286;
								else return 23287;
							else
								if (West == West::None) return 23288;
								else if (West == West::Low) return 23289;
								else return 23290;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23291;
								else if (West == West::Low) return 23292;
								else return 23293;
							else
								if (West == West::None) return 23294;
								else if (West == West::Low) return 23295;
								else return 23296;
						else
							if (Waterlogged)
								if (West == West::None) return 23297;
								else if (West == West::Low) return 23298;
								else return 23299;
							else
								if (West == West::None) return 23300;
								else if (West == West::Low) return 23301;
								else return 23302;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23303;
								else if (West == West::Low) return 23304;
								else return 23305;
							else
								if (West == West::None) return 23306;
								else if (West == West::Low) return 23307;
								else return 23308;
						else
							if (Waterlogged)
								if (West == West::None) return 23309;
								else if (West == West::Low) return 23310;
								else return 23311;
							else
								if (West == West::None) return 23312;
								else if (West == West::Low) return 23313;
								else return 23314;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23315;
								else if (West == West::Low) return 23316;
								else return 23317;
							else
								if (West == West::None) return 23318;
								else if (West == West::Low) return 23319;
								else return 23320;
						else
							if (Waterlogged)
								if (West == West::None) return 23321;
								else if (West == West::Low) return 23322;
								else return 23323;
							else
								if (West == West::None) return 23324;
								else if (West == West::Low) return 23325;
								else return 23326;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23327;
								else if (West == West::Low) return 23328;
								else return 23329;
							else
								if (West == West::None) return 23330;
								else if (West == West::Low) return 23331;
								else return 23332;
						else
							if (Waterlogged)
								if (West == West::None) return 23333;
								else if (West == West::Low) return 23334;
								else return 23335;
							else
								if (West == West::None) return 23336;
								else if (West == West::Low) return 23337;
								else return 23338;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23339;
								else if (West == West::Low) return 23340;
								else return 23341;
							else
								if (West == West::None) return 23342;
								else if (West == West::Low) return 23343;
								else return 23344;
						else
							if (Waterlogged)
								if (West == West::None) return 23345;
								else if (West == West::Low) return 23346;
								else return 23347;
							else
								if (West == West::None) return 23348;
								else if (West == West::Low) return 23349;
								else return 23350;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23351;
								else if (West == West::Low) return 23352;
								else return 23353;
							else
								if (West == West::None) return 23354;
								else if (West == West::Low) return 23355;
								else return 23356;
						else
							if (Waterlogged)
								if (West == West::None) return 23357;
								else if (West == West::Low) return 23358;
								else return 23359;
							else
								if (West == West::None) return 23360;
								else if (West == West::Low) return 23361;
								else return 23362;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 23363;
								else if (West == West::Low) return 23364;
								else return 23365;
							else
								if (West == West::None) return 23366;
								else if (West == West::Low) return 23367;
								else return 23368;
						else
							if (Waterlogged)
								if (West == West::None) return 23369;
								else if (West == West::Low) return 23370;
								else return 23371;
							else
								if (West == West::None) return 23372;
								else if (West == West::Low) return 23373;
								else return 23374;
		}
		BlockState TuffBrickWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace TuffBricks
	{
		constexpr BlockState TuffBricks()
		{
			return 22964;
		}
	}
	namespace TuffSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState TuffSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 22142;
				else return 22143;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 22144;
				else return 22145;
			else
				if (Waterlogged) return 22146;
				else return 22147;
		}
		BlockState TuffSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace TuffStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState TuffStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 22148;
						else return 22149;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 22150;
						else return 22151;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 22152;
						else return 22153;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 22154;
						else return 22155;
					else
						if (Waterlogged) return 22156;
						else return 22157;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 22158;
						else return 22159;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 22160;
						else return 22161;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 22162;
						else return 22163;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 22164;
						else return 22165;
					else
						if (Waterlogged) return 22166;
						else return 22167;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 22168;
						else return 22169;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 22170;
						else return 22171;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 22172;
						else return 22173;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 22174;
						else return 22175;
					else
						if (Waterlogged) return 22176;
						else return 22177;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 22178;
						else return 22179;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 22180;
						else return 22181;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 22182;
						else return 22183;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 22184;
						else return 22185;
					else
						if (Waterlogged) return 22186;
						else return 22187;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 22188;
						else return 22189;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 22190;
						else return 22191;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 22192;
						else return 22193;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 22194;
						else return 22195;
					else
						if (Waterlogged) return 22196;
						else return 22197;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 22198;
						else return 22199;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 22200;
						else return 22201;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 22202;
						else return 22203;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 22204;
						else return 22205;
					else
						if (Waterlogged) return 22206;
						else return 22207;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 22208;
						else return 22209;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 22210;
						else return 22211;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 22212;
						else return 22213;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 22214;
						else return 22215;
					else
						if (Waterlogged) return 22216;
						else return 22217;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 22218;
						else return 22219;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 22220;
						else return 22221;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 22222;
						else return 22223;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 22224;
						else return 22225;
					else
						if (Waterlogged) return 22226;
						else return 22227;
		}
		BlockState TuffStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace TuffWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState TuffWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22228;
								else if (West == West::Low) return 22229;
								else return 22230;
							else
								if (West == West::None) return 22231;
								else if (West == West::Low) return 22232;
								else return 22233;
						else
							if (Waterlogged)
								if (West == West::None) return 22234;
								else if (West == West::Low) return 22235;
								else return 22236;
							else
								if (West == West::None) return 22237;
								else if (West == West::Low) return 22238;
								else return 22239;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22240;
								else if (West == West::Low) return 22241;
								else return 22242;
							else
								if (West == West::None) return 22243;
								else if (West == West::Low) return 22244;
								else return 22245;
						else
							if (Waterlogged)
								if (West == West::None) return 22246;
								else if (West == West::Low) return 22247;
								else return 22248;
							else
								if (West == West::None) return 22249;
								else if (West == West::Low) return 22250;
								else return 22251;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22252;
								else if (West == West::Low) return 22253;
								else return 22254;
							else
								if (West == West::None) return 22255;
								else if (West == West::Low) return 22256;
								else return 22257;
						else
							if (Waterlogged)
								if (West == West::None) return 22258;
								else if (West == West::Low) return 22259;
								else return 22260;
							else
								if (West == West::None) return 22261;
								else if (West == West::Low) return 22262;
								else return 22263;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22264;
								else if (West == West::Low) return 22265;
								else return 22266;
							else
								if (West == West::None) return 22267;
								else if (West == West::Low) return 22268;
								else return 22269;
						else
							if (Waterlogged)
								if (West == West::None) return 22270;
								else if (West == West::Low) return 22271;
								else return 22272;
							else
								if (West == West::None) return 22273;
								else if (West == West::Low) return 22274;
								else return 22275;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22276;
								else if (West == West::Low) return 22277;
								else return 22278;
							else
								if (West == West::None) return 22279;
								else if (West == West::Low) return 22280;
								else return 22281;
						else
							if (Waterlogged)
								if (West == West::None) return 22282;
								else if (West == West::Low) return 22283;
								else return 22284;
							else
								if (West == West::None) return 22285;
								else if (West == West::Low) return 22286;
								else return 22287;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22288;
								else if (West == West::Low) return 22289;
								else return 22290;
							else
								if (West == West::None) return 22291;
								else if (West == West::Low) return 22292;
								else return 22293;
						else
							if (Waterlogged)
								if (West == West::None) return 22294;
								else if (West == West::Low) return 22295;
								else return 22296;
							else
								if (West == West::None) return 22297;
								else if (West == West::Low) return 22298;
								else return 22299;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22300;
								else if (West == West::Low) return 22301;
								else return 22302;
							else
								if (West == West::None) return 22303;
								else if (West == West::Low) return 22304;
								else return 22305;
						else
							if (Waterlogged)
								if (West == West::None) return 22306;
								else if (West == West::Low) return 22307;
								else return 22308;
							else
								if (West == West::None) return 22309;
								else if (West == West::Low) return 22310;
								else return 22311;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22312;
								else if (West == West::Low) return 22313;
								else return 22314;
							else
								if (West == West::None) return 22315;
								else if (West == West::Low) return 22316;
								else return 22317;
						else
							if (Waterlogged)
								if (West == West::None) return 22318;
								else if (West == West::Low) return 22319;
								else return 22320;
							else
								if (West == West::None) return 22321;
								else if (West == West::Low) return 22322;
								else return 22323;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22324;
								else if (West == West::Low) return 22325;
								else return 22326;
							else
								if (West == West::None) return 22327;
								else if (West == West::Low) return 22328;
								else return 22329;
						else
							if (Waterlogged)
								if (West == West::None) return 22330;
								else if (West == West::Low) return 22331;
								else return 22332;
							else
								if (West == West::None) return 22333;
								else if (West == West::Low) return 22334;
								else return 22335;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22336;
								else if (West == West::Low) return 22337;
								else return 22338;
							else
								if (West == West::None) return 22339;
								else if (West == West::Low) return 22340;
								else return 22341;
						else
							if (Waterlogged)
								if (West == West::None) return 22342;
								else if (West == West::Low) return 22343;
								else return 22344;
							else
								if (West == West::None) return 22345;
								else if (West == West::Low) return 22346;
								else return 22347;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22348;
								else if (West == West::Low) return 22349;
								else return 22350;
							else
								if (West == West::None) return 22351;
								else if (West == West::Low) return 22352;
								else return 22353;
						else
							if (Waterlogged)
								if (West == West::None) return 22354;
								else if (West == West::Low) return 22355;
								else return 22356;
							else
								if (West == West::None) return 22357;
								else if (West == West::Low) return 22358;
								else return 22359;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22360;
								else if (West == West::Low) return 22361;
								else return 22362;
							else
								if (West == West::None) return 22363;
								else if (West == West::Low) return 22364;
								else return 22365;
						else
							if (Waterlogged)
								if (West == West::None) return 22366;
								else if (West == West::Low) return 22367;
								else return 22368;
							else
								if (West == West::None) return 22369;
								else if (West == West::Low) return 22370;
								else return 22371;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22372;
								else if (West == West::Low) return 22373;
								else return 22374;
							else
								if (West == West::None) return 22375;
								else if (West == West::Low) return 22376;
								else return 22377;
						else
							if (Waterlogged)
								if (West == West::None) return 22378;
								else if (West == West::Low) return 22379;
								else return 22380;
							else
								if (West == West::None) return 22381;
								else if (West == West::Low) return 22382;
								else return 22383;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22384;
								else if (West == West::Low) return 22385;
								else return 22386;
							else
								if (West == West::None) return 22387;
								else if (West == West::Low) return 22388;
								else return 22389;
						else
							if (Waterlogged)
								if (West == West::None) return 22390;
								else if (West == West::Low) return 22391;
								else return 22392;
							else
								if (West == West::None) return 22393;
								else if (West == West::Low) return 22394;
								else return 22395;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22396;
								else if (West == West::Low) return 22397;
								else return 22398;
							else
								if (West == West::None) return 22399;
								else if (West == West::Low) return 22400;
								else return 22401;
						else
							if (Waterlogged)
								if (West == West::None) return 22402;
								else if (West == West::Low) return 22403;
								else return 22404;
							else
								if (West == West::None) return 22405;
								else if (West == West::Low) return 22406;
								else return 22407;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22408;
								else if (West == West::Low) return 22409;
								else return 22410;
							else
								if (West == West::None) return 22411;
								else if (West == West::Low) return 22412;
								else return 22413;
						else
							if (Waterlogged)
								if (West == West::None) return 22414;
								else if (West == West::Low) return 22415;
								else return 22416;
							else
								if (West == West::None) return 22417;
								else if (West == West::Low) return 22418;
								else return 22419;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22420;
								else if (West == West::Low) return 22421;
								else return 22422;
							else
								if (West == West::None) return 22423;
								else if (West == West::Low) return 22424;
								else return 22425;
						else
							if (Waterlogged)
								if (West == West::None) return 22426;
								else if (West == West::Low) return 22427;
								else return 22428;
							else
								if (West == West::None) return 22429;
								else if (West == West::Low) return 22430;
								else return 22431;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22432;
								else if (West == West::Low) return 22433;
								else return 22434;
							else
								if (West == West::None) return 22435;
								else if (West == West::Low) return 22436;
								else return 22437;
						else
							if (Waterlogged)
								if (West == West::None) return 22438;
								else if (West == West::Low) return 22439;
								else return 22440;
							else
								if (West == West::None) return 22441;
								else if (West == West::Low) return 22442;
								else return 22443;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22444;
								else if (West == West::Low) return 22445;
								else return 22446;
							else
								if (West == West::None) return 22447;
								else if (West == West::Low) return 22448;
								else return 22449;
						else
							if (Waterlogged)
								if (West == West::None) return 22450;
								else if (West == West::Low) return 22451;
								else return 22452;
							else
								if (West == West::None) return 22453;
								else if (West == West::Low) return 22454;
								else return 22455;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22456;
								else if (West == West::Low) return 22457;
								else return 22458;
							else
								if (West == West::None) return 22459;
								else if (West == West::Low) return 22460;
								else return 22461;
						else
							if (Waterlogged)
								if (West == West::None) return 22462;
								else if (West == West::Low) return 22463;
								else return 22464;
							else
								if (West == West::None) return 22465;
								else if (West == West::Low) return 22466;
								else return 22467;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22468;
								else if (West == West::Low) return 22469;
								else return 22470;
							else
								if (West == West::None) return 22471;
								else if (West == West::Low) return 22472;
								else return 22473;
						else
							if (Waterlogged)
								if (West == West::None) return 22474;
								else if (West == West::Low) return 22475;
								else return 22476;
							else
								if (West == West::None) return 22477;
								else if (West == West::Low) return 22478;
								else return 22479;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22480;
								else if (West == West::Low) return 22481;
								else return 22482;
							else
								if (West == West::None) return 22483;
								else if (West == West::Low) return 22484;
								else return 22485;
						else
							if (Waterlogged)
								if (West == West::None) return 22486;
								else if (West == West::Low) return 22487;
								else return 22488;
							else
								if (West == West::None) return 22489;
								else if (West == West::Low) return 22490;
								else return 22491;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22492;
								else if (West == West::Low) return 22493;
								else return 22494;
							else
								if (West == West::None) return 22495;
								else if (West == West::Low) return 22496;
								else return 22497;
						else
							if (Waterlogged)
								if (West == West::None) return 22498;
								else if (West == West::Low) return 22499;
								else return 22500;
							else
								if (West == West::None) return 22501;
								else if (West == West::Low) return 22502;
								else return 22503;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22504;
								else if (West == West::Low) return 22505;
								else return 22506;
							else
								if (West == West::None) return 22507;
								else if (West == West::Low) return 22508;
								else return 22509;
						else
							if (Waterlogged)
								if (West == West::None) return 22510;
								else if (West == West::Low) return 22511;
								else return 22512;
							else
								if (West == West::None) return 22513;
								else if (West == West::Low) return 22514;
								else return 22515;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22516;
								else if (West == West::Low) return 22517;
								else return 22518;
							else
								if (West == West::None) return 22519;
								else if (West == West::Low) return 22520;
								else return 22521;
						else
							if (Waterlogged)
								if (West == West::None) return 22522;
								else if (West == West::Low) return 22523;
								else return 22524;
							else
								if (West == West::None) return 22525;
								else if (West == West::Low) return 22526;
								else return 22527;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22528;
								else if (West == West::Low) return 22529;
								else return 22530;
							else
								if (West == West::None) return 22531;
								else if (West == West::Low) return 22532;
								else return 22533;
						else
							if (Waterlogged)
								if (West == West::None) return 22534;
								else if (West == West::Low) return 22535;
								else return 22536;
							else
								if (West == West::None) return 22537;
								else if (West == West::Low) return 22538;
								else return 22539;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22540;
								else if (West == West::Low) return 22541;
								else return 22542;
							else
								if (West == West::None) return 22543;
								else if (West == West::Low) return 22544;
								else return 22545;
						else
							if (Waterlogged)
								if (West == West::None) return 22546;
								else if (West == West::Low) return 22547;
								else return 22548;
							else
								if (West == West::None) return 22549;
								else if (West == West::Low) return 22550;
								else return 22551;
		}
		BlockState TuffWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace TurtleEgg
	{
		constexpr BlockState TurtleEgg(const unsigned char Eggs, const unsigned char Hatch)
		{
			if (Eggs == 1)
				if (Hatch == 0) return 13811;
				else if (Hatch == 1) return 13812;
				else return 13813;
			else if (Eggs == 2)
				if (Hatch == 0) return 13814;
				else if (Hatch == 1) return 13815;
				else return 13816;
			else if (Eggs == 3)
				if (Hatch == 0) return 13817;
				else if (Hatch == 1) return 13818;
				else return 13819;
			else
				if (Hatch == 0) return 13820;
				else if (Hatch == 1) return 13821;
				else return 13822;
		}
		BlockState TurtleEgg();
		unsigned char Eggs(BlockState Block);
		unsigned char Hatch(BlockState Block);
	}
	namespace TwistingVines
	{
		constexpr BlockState TwistingVines(const unsigned char Age)
		{
			if (Age == 0) return 19693;
			else if (Age == 1) return 19694;
			else if (Age == 2) return 19695;
			else if (Age == 3) return 19696;
			else if (Age == 4) return 19697;
			else if (Age == 5) return 19698;
			else if (Age == 6) return 19699;
			else if (Age == 7) return 19700;
			else if (Age == 8) return 19701;
			else if (Age == 9) return 19702;
			else if (Age == 10) return 19703;
			else if (Age == 11) return 19704;
			else if (Age == 12) return 19705;
			else if (Age == 13) return 19706;
			else if (Age == 14) return 19707;
			else if (Age == 15) return 19708;
			else if (Age == 16) return 19709;
			else if (Age == 17) return 19710;
			else if (Age == 18) return 19711;
			else if (Age == 19) return 19712;
			else if (Age == 20) return 19713;
			else if (Age == 21) return 19714;
			else if (Age == 22) return 19715;
			else if (Age == 23) return 19716;
			else if (Age == 24) return 19717;
			else return 19718;
		}
		BlockState TwistingVines();
		unsigned char Age(BlockState Block);
	}
	namespace TwistingVinesPlant
	{
		constexpr BlockState TwistingVinesPlant()
		{
			return 19719;
		}
	}
	namespace Vault
	{
		enum class VaultState
		{
			Inactive,
			Active,
			Unlocking,
			Ejecting,
		};
		constexpr BlockState Vault(const eBlockFace Facing, const bool Ominous, const enum VaultState VaultState)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Ominous)
					if (VaultState == VaultState::Inactive) return 27742;
					else if (VaultState == VaultState::Active) return 27743;
					else if (VaultState == VaultState::Unlocking) return 27744;
					else return 27745;
				else
					if (VaultState == VaultState::Inactive) return 27746;
					else if (VaultState == VaultState::Active) return 27747;
					else if (VaultState == VaultState::Unlocking) return 27748;
					else return 27749;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Ominous)
					if (VaultState == VaultState::Inactive) return 27750;
					else if (VaultState == VaultState::Active) return 27751;
					else if (VaultState == VaultState::Unlocking) return 27752;
					else return 27753;
				else
					if (VaultState == VaultState::Inactive) return 27754;
					else if (VaultState == VaultState::Active) return 27755;
					else if (VaultState == VaultState::Unlocking) return 27756;
					else return 27757;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Ominous)
					if (VaultState == VaultState::Inactive) return 27758;
					else if (VaultState == VaultState::Active) return 27759;
					else if (VaultState == VaultState::Unlocking) return 27760;
					else return 27761;
				else
					if (VaultState == VaultState::Inactive) return 27762;
					else if (VaultState == VaultState::Active) return 27763;
					else if (VaultState == VaultState::Unlocking) return 27764;
					else return 27765;
			else
				if (Ominous)
					if (VaultState == VaultState::Inactive) return 27766;
					else if (VaultState == VaultState::Active) return 27767;
					else if (VaultState == VaultState::Unlocking) return 27768;
					else return 27769;
				else
					if (VaultState == VaultState::Inactive) return 27770;
					else if (VaultState == VaultState::Active) return 27771;
					else if (VaultState == VaultState::Unlocking) return 27772;
					else return 27773;
		}
		BlockState Vault();
		eBlockFace Facing(BlockState Block);
		bool Ominous(BlockState Block);
		enum VaultState VaultState(BlockState Block);
	}
	namespace VerdantFroglight
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState VerdantFroglight(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 27658;
			else if (Axis == Axis::Y) return 27659;
			else return 27660;
		}
		BlockState VerdantFroglight();
		enum Axis Axis(BlockState Block);
	}
	namespace Vine
	{
		constexpr BlockState Vine(const bool East, const bool North, const bool South, const bool Up, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Up)
							if (West) return 7080;
							else return 7081;
						else
							if (West) return 7082;
							else return 7083;
					else
						if (Up)
							if (West) return 7084;
							else return 7085;
						else
							if (West) return 7086;
							else return 7087;
				else
					if (South)
						if (Up)
							if (West) return 7088;
							else return 7089;
						else
							if (West) return 7090;
							else return 7091;
					else
						if (Up)
							if (West) return 7092;
							else return 7093;
						else
							if (West) return 7094;
							else return 7095;
			else
				if (North)
					if (South)
						if (Up)
							if (West) return 7096;
							else return 7097;
						else
							if (West) return 7098;
							else return 7099;
					else
						if (Up)
							if (West) return 7100;
							else return 7101;
						else
							if (West) return 7102;
							else return 7103;
				else
					if (South)
						if (Up)
							if (West) return 7104;
							else return 7105;
						else
							if (West) return 7106;
							else return 7107;
					else
						if (Up)
							if (West) return 7108;
							else return 7109;
						else
							if (West) return 7110;
							else return 7111;
		}
		BlockState Vine();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Up(BlockState Block);
		bool West(BlockState Block);
	}
	namespace VoidAir
	{
		constexpr BlockState VoidAir()
		{
			return 14013;
		}
	}
	namespace WallTorch
	{
		constexpr BlockState WallTorch(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 2402;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 2403;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 2404;
			else return 2405;
		}
		BlockState WallTorch();
		eBlockFace Facing(BlockState Block);
	}
	namespace WarpedButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState WarpedButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 20179;
					else return 20180;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 20181;
					else return 20182;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 20183;
					else return 20184;
				else
					if (Powered) return 20185;
					else return 20186;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 20187;
					else return 20188;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 20189;
					else return 20190;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 20191;
					else return 20192;
				else
					if (Powered) return 20193;
					else return 20194;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 20195;
					else return 20196;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 20197;
					else return 20198;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 20199;
					else return 20200;
				else
					if (Powered) return 20201;
					else return 20202;
		}
		BlockState WarpedButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WarpedDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState WarpedDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 20267;
							else return 20268;
						else
							if (Powered) return 20269;
							else return 20270;
					else
						if (Open)
							if (Powered) return 20271;
							else return 20272;
						else
							if (Powered) return 20273;
							else return 20274;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 20275;
							else return 20276;
						else
							if (Powered) return 20277;
							else return 20278;
					else
						if (Open)
							if (Powered) return 20279;
							else return 20280;
						else
							if (Powered) return 20281;
							else return 20282;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 20283;
							else return 20284;
						else
							if (Powered) return 20285;
							else return 20286;
					else
						if (Open)
							if (Powered) return 20287;
							else return 20288;
						else
							if (Powered) return 20289;
							else return 20290;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 20291;
							else return 20292;
						else
							if (Powered) return 20293;
							else return 20294;
					else
						if (Open)
							if (Powered) return 20295;
							else return 20296;
						else
							if (Powered) return 20297;
							else return 20298;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 20299;
							else return 20300;
						else
							if (Powered) return 20301;
							else return 20302;
					else
						if (Open)
							if (Powered) return 20303;
							else return 20304;
						else
							if (Powered) return 20305;
							else return 20306;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 20307;
							else return 20308;
						else
							if (Powered) return 20309;
							else return 20310;
					else
						if (Open)
							if (Powered) return 20311;
							else return 20312;
						else
							if (Powered) return 20313;
							else return 20314;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 20315;
							else return 20316;
						else
							if (Powered) return 20317;
							else return 20318;
					else
						if (Open)
							if (Powered) return 20319;
							else return 20320;
						else
							if (Powered) return 20321;
							else return 20322;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 20323;
							else return 20324;
						else
							if (Powered) return 20325;
							else return 20326;
					else
						if (Open)
							if (Powered) return 20327;
							else return 20328;
						else
							if (Powered) return 20329;
							else return 20330;
		}
		BlockState WarpedDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WarpedFence
	{
		constexpr BlockState WarpedFence(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 19771;
							else return 19772;
						else
							if (West) return 19773;
							else return 19774;
					else
						if (Waterlogged)
							if (West) return 19775;
							else return 19776;
						else
							if (West) return 19777;
							else return 19778;
				else
					if (South)
						if (Waterlogged)
							if (West) return 19779;
							else return 19780;
						else
							if (West) return 19781;
							else return 19782;
					else
						if (Waterlogged)
							if (West) return 19783;
							else return 19784;
						else
							if (West) return 19785;
							else return 19786;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 19787;
							else return 19788;
						else
							if (West) return 19789;
							else return 19790;
					else
						if (Waterlogged)
							if (West) return 19791;
							else return 19792;
						else
							if (West) return 19793;
							else return 19794;
				else
					if (South)
						if (Waterlogged)
							if (West) return 19795;
							else return 19796;
						else
							if (West) return 19797;
							else return 19798;
					else
						if (Waterlogged)
							if (West) return 19799;
							else return 19800;
						else
							if (West) return 19801;
							else return 19802;
		}
		BlockState WarpedFence();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace WarpedFenceGate
	{
		constexpr BlockState WarpedFenceGate(const eBlockFace Facing, const bool InWall, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (InWall)
					if (Open)
						if (Powered) return 19963;
						else return 19964;
					else
						if (Powered) return 19965;
						else return 19966;
				else
					if (Open)
						if (Powered) return 19967;
						else return 19968;
					else
						if (Powered) return 19969;
						else return 19970;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (InWall)
					if (Open)
						if (Powered) return 19971;
						else return 19972;
					else
						if (Powered) return 19973;
						else return 19974;
				else
					if (Open)
						if (Powered) return 19975;
						else return 19976;
					else
						if (Powered) return 19977;
						else return 19978;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (InWall)
					if (Open)
						if (Powered) return 19979;
						else return 19980;
					else
						if (Powered) return 19981;
						else return 19982;
				else
					if (Open)
						if (Powered) return 19983;
						else return 19984;
					else
						if (Powered) return 19985;
						else return 19986;
			else
				if (InWall)
					if (Open)
						if (Powered) return 19987;
						else return 19988;
					else
						if (Powered) return 19989;
						else return 19990;
				else
					if (Open)
						if (Powered) return 19991;
						else return 19992;
					else
						if (Powered) return 19993;
						else return 19994;
		}
		BlockState WarpedFenceGate();
		eBlockFace Facing(BlockState Block);
		bool InWall(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WarpedFungus
	{
		constexpr BlockState WarpedFungus()
		{
			return 19647;
		}
	}
	namespace WarpedHangingSign
	{
		constexpr BlockState WarpedHangingSign(const bool Attached, const unsigned char Rotation, const bool Waterlogged)
		{
			if (Attached)
				if (Rotation == 0)
					if (Waterlogged) return 5514;
					else return 5515;
				else if (Rotation == 1)
					if (Waterlogged) return 5516;
					else return 5517;
				else if (Rotation == 2)
					if (Waterlogged) return 5518;
					else return 5519;
				else if (Rotation == 3)
					if (Waterlogged) return 5520;
					else return 5521;
				else if (Rotation == 4)
					if (Waterlogged) return 5522;
					else return 5523;
				else if (Rotation == 5)
					if (Waterlogged) return 5524;
					else return 5525;
				else if (Rotation == 6)
					if (Waterlogged) return 5526;
					else return 5527;
				else if (Rotation == 7)
					if (Waterlogged) return 5528;
					else return 5529;
				else if (Rotation == 8)
					if (Waterlogged) return 5530;
					else return 5531;
				else if (Rotation == 9)
					if (Waterlogged) return 5532;
					else return 5533;
				else if (Rotation == 10)
					if (Waterlogged) return 5534;
					else return 5535;
				else if (Rotation == 11)
					if (Waterlogged) return 5536;
					else return 5537;
				else if (Rotation == 12)
					if (Waterlogged) return 5538;
					else return 5539;
				else if (Rotation == 13)
					if (Waterlogged) return 5540;
					else return 5541;
				else if (Rotation == 14)
					if (Waterlogged) return 5542;
					else return 5543;
				else
					if (Waterlogged) return 5544;
					else return 5545;
			else
				if (Rotation == 0)
					if (Waterlogged) return 5546;
					else return 5547;
				else if (Rotation == 1)
					if (Waterlogged) return 5548;
					else return 5549;
				else if (Rotation == 2)
					if (Waterlogged) return 5550;
					else return 5551;
				else if (Rotation == 3)
					if (Waterlogged) return 5552;
					else return 5553;
				else if (Rotation == 4)
					if (Waterlogged) return 5554;
					else return 5555;
				else if (Rotation == 5)
					if (Waterlogged) return 5556;
					else return 5557;
				else if (Rotation == 6)
					if (Waterlogged) return 5558;
					else return 5559;
				else if (Rotation == 7)
					if (Waterlogged) return 5560;
					else return 5561;
				else if (Rotation == 8)
					if (Waterlogged) return 5562;
					else return 5563;
				else if (Rotation == 9)
					if (Waterlogged) return 5564;
					else return 5565;
				else if (Rotation == 10)
					if (Waterlogged) return 5566;
					else return 5567;
				else if (Rotation == 11)
					if (Waterlogged) return 5568;
					else return 5569;
				else if (Rotation == 12)
					if (Waterlogged) return 5570;
					else return 5571;
				else if (Rotation == 13)
					if (Waterlogged) return 5572;
					else return 5573;
				else if (Rotation == 14)
					if (Waterlogged) return 5574;
					else return 5575;
				else
					if (Waterlogged) return 5576;
					else return 5577;
		}
		BlockState WarpedHangingSign();
		bool Attached(BlockState Block);
		unsigned char Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WarpedHyphae
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState WarpedHyphae(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 19640;
			else if (Axis == Axis::Y) return 19641;
			else return 19642;
		}
		BlockState WarpedHyphae();
		enum Axis Axis(BlockState Block);
	}
	namespace WarpedNylium
	{
		constexpr BlockState WarpedNylium()
		{
			return 19646;
		}
	}
	namespace WarpedPlanks
	{
		constexpr BlockState WarpedPlanks()
		{
			return 19722;
		}
	}
	namespace WarpedPressurePlate
	{
		constexpr BlockState WarpedPressurePlate(const bool Powered)
		{
			if (Powered) return 19737;
			else return 19738;
		}
		BlockState WarpedPressurePlate();
		bool Powered(BlockState Block);
	}
	namespace WarpedRoots
	{
		constexpr BlockState WarpedRoots()
		{
			return 19649;
		}
	}
	namespace WarpedSign
	{
		constexpr BlockState WarpedSign(const unsigned char Rotation, const bool Waterlogged)
		{
			if (Rotation == 0)
				if (Waterlogged) return 20363;
				else return 20364;
			else if (Rotation == 1)
				if (Waterlogged) return 20365;
				else return 20366;
			else if (Rotation == 2)
				if (Waterlogged) return 20367;
				else return 20368;
			else if (Rotation == 3)
				if (Waterlogged) return 20369;
				else return 20370;
			else if (Rotation == 4)
				if (Waterlogged) return 20371;
				else return 20372;
			else if (Rotation == 5)
				if (Waterlogged) return 20373;
				else return 20374;
			else if (Rotation == 6)
				if (Waterlogged) return 20375;
				else return 20376;
			else if (Rotation == 7)
				if (Waterlogged) return 20377;
				else return 20378;
			else if (Rotation == 8)
				if (Waterlogged) return 20379;
				else return 20380;
			else if (Rotation == 9)
				if (Waterlogged) return 20381;
				else return 20382;
			else if (Rotation == 10)
				if (Waterlogged) return 20383;
				else return 20384;
			else if (Rotation == 11)
				if (Waterlogged) return 20385;
				else return 20386;
			else if (Rotation == 12)
				if (Waterlogged) return 20387;
				else return 20388;
			else if (Rotation == 13)
				if (Waterlogged) return 20389;
				else return 20390;
			else if (Rotation == 14)
				if (Waterlogged) return 20391;
				else return 20392;
			else
				if (Waterlogged) return 20393;
				else return 20394;
		}
		BlockState WarpedSign();
		unsigned char Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WarpedSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState WarpedSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 19729;
				else return 19730;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 19731;
				else return 19732;
			else
				if (Waterlogged) return 19733;
				else return 19734;
		}
		BlockState WarpedSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WarpedStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState WarpedStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20075;
						else return 20076;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20077;
						else return 20078;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20079;
						else return 20080;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20081;
						else return 20082;
					else
						if (Waterlogged) return 20083;
						else return 20084;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20085;
						else return 20086;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20087;
						else return 20088;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20089;
						else return 20090;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20091;
						else return 20092;
					else
						if (Waterlogged) return 20093;
						else return 20094;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20095;
						else return 20096;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20097;
						else return 20098;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20099;
						else return 20100;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20101;
						else return 20102;
					else
						if (Waterlogged) return 20103;
						else return 20104;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20105;
						else return 20106;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20107;
						else return 20108;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20109;
						else return 20110;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20111;
						else return 20112;
					else
						if (Waterlogged) return 20113;
						else return 20114;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20115;
						else return 20116;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20117;
						else return 20118;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20119;
						else return 20120;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20121;
						else return 20122;
					else
						if (Waterlogged) return 20123;
						else return 20124;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20125;
						else return 20126;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20127;
						else return 20128;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20129;
						else return 20130;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20131;
						else return 20132;
					else
						if (Waterlogged) return 20133;
						else return 20134;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20135;
						else return 20136;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20137;
						else return 20138;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20139;
						else return 20140;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20141;
						else return 20142;
					else
						if (Waterlogged) return 20143;
						else return 20144;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20145;
						else return 20146;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20147;
						else return 20148;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20149;
						else return 20150;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20151;
						else return 20152;
					else
						if (Waterlogged) return 20153;
						else return 20154;
		}
		BlockState WarpedStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WarpedStem
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState WarpedStem(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 19634;
			else if (Axis == Axis::Y) return 19635;
			else return 19636;
		}
		BlockState WarpedStem();
		enum Axis Axis(BlockState Block);
	}
	namespace WarpedTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState WarpedTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 19867;
							else return 19868;
						else
							if (Waterlogged) return 19869;
							else return 19870;
					else
						if (Powered)
							if (Waterlogged) return 19871;
							else return 19872;
						else
							if (Waterlogged) return 19873;
							else return 19874;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 19875;
							else return 19876;
						else
							if (Waterlogged) return 19877;
							else return 19878;
					else
						if (Powered)
							if (Waterlogged) return 19879;
							else return 19880;
						else
							if (Waterlogged) return 19881;
							else return 19882;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 19883;
							else return 19884;
						else
							if (Waterlogged) return 19885;
							else return 19886;
					else
						if (Powered)
							if (Waterlogged) return 19887;
							else return 19888;
						else
							if (Waterlogged) return 19889;
							else return 19890;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 19891;
							else return 19892;
						else
							if (Waterlogged) return 19893;
							else return 19894;
					else
						if (Powered)
							if (Waterlogged) return 19895;
							else return 19896;
						else
							if (Waterlogged) return 19897;
							else return 19898;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 19899;
							else return 19900;
						else
							if (Waterlogged) return 19901;
							else return 19902;
					else
						if (Powered)
							if (Waterlogged) return 19903;
							else return 19904;
						else
							if (Waterlogged) return 19905;
							else return 19906;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 19907;
							else return 19908;
						else
							if (Waterlogged) return 19909;
							else return 19910;
					else
						if (Powered)
							if (Waterlogged) return 19911;
							else return 19912;
						else
							if (Waterlogged) return 19913;
							else return 19914;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 19915;
							else return 19916;
						else
							if (Waterlogged) return 19917;
							else return 19918;
					else
						if (Powered)
							if (Waterlogged) return 19919;
							else return 19920;
						else
							if (Waterlogged) return 19921;
							else return 19922;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 19923;
							else return 19924;
						else
							if (Waterlogged) return 19925;
							else return 19926;
					else
						if (Powered)
							if (Waterlogged) return 19927;
							else return 19928;
						else
							if (Waterlogged) return 19929;
							else return 19930;
		}
		BlockState WarpedTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WarpedWallHangingSign
	{
		constexpr BlockState WarpedWallHangingSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 5786;
				else return 5787;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 5788;
				else return 5789;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 5790;
				else return 5791;
			else
				if (Waterlogged) return 5792;
				else return 5793;
		}
		BlockState WarpedWallHangingSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WarpedWallSign
	{
		constexpr BlockState WarpedWallSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 20403;
				else return 20404;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 20405;
				else return 20406;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 20407;
				else return 20408;
			else
				if (Waterlogged) return 20409;
				else return 20410;
		}
		BlockState WarpedWallSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WarpedWartBlock
	{
		constexpr BlockState WarpedWartBlock()
		{
			return 19648;
		}
	}
	namespace Water
	{
		constexpr BlockState Water(const unsigned char Level)
		{
			if (Level == 0) return 86;
			else if (Level == 1) return 87;
			else if (Level == 2) return 88;
			else if (Level == 3) return 89;
			else if (Level == 4) return 90;
			else if (Level == 5) return 91;
			else if (Level == 6) return 92;
			else if (Level == 7) return 93;
			else if (Level == 8) return 94;
			else if (Level == 9) return 95;
			else if (Level == 10) return 96;
			else if (Level == 11) return 97;
			else if (Level == 12) return 98;
			else if (Level == 13) return 99;
			else if (Level == 14) return 100;
			else return 101;
		}
		BlockState Water();
		unsigned char Level(BlockState Block);
	}
	namespace WaterCauldron
	{
		constexpr BlockState WaterCauldron(const unsigned char Level)
		{
			if (Level == 1) return 8183;
			else if (Level == 2) return 8184;
			else return 8185;
		}
		BlockState WaterCauldron();
		unsigned char Level(BlockState Block);
	}
	namespace WaxedChiseledCopper
	{
		constexpr BlockState WaxedChiseledCopper()
		{
			return 24015;
		}
	}
	namespace WaxedCopperBlock
	{
		constexpr BlockState WaxedCopperBlock()
		{
			return 24360;
		}
	}
	namespace WaxedCopperBulb
	{
		constexpr BlockState WaxedCopperBulb(const bool Lit, const bool Powered)
		{
			if (Lit)
				if (Powered) return 25768;
				else return 25769;
			else
				if (Powered) return 25770;
				else return 25771;
		}
		BlockState WaxedCopperBulb();
		bool Lit(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WaxedCopperDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState WaxedCopperDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24968;
							else return 24969;
						else
							if (Powered) return 24970;
							else return 24971;
					else
						if (Open)
							if (Powered) return 24972;
							else return 24973;
						else
							if (Powered) return 24974;
							else return 24975;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24976;
							else return 24977;
						else
							if (Powered) return 24978;
							else return 24979;
					else
						if (Open)
							if (Powered) return 24980;
							else return 24981;
						else
							if (Powered) return 24982;
							else return 24983;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24984;
							else return 24985;
						else
							if (Powered) return 24986;
							else return 24987;
					else
						if (Open)
							if (Powered) return 24988;
							else return 24989;
						else
							if (Powered) return 24990;
							else return 24991;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24992;
							else return 24993;
						else
							if (Powered) return 24994;
							else return 24995;
					else
						if (Open)
							if (Powered) return 24996;
							else return 24997;
						else
							if (Powered) return 24998;
							else return 24999;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25000;
							else return 25001;
						else
							if (Powered) return 25002;
							else return 25003;
					else
						if (Open)
							if (Powered) return 25004;
							else return 25005;
						else
							if (Powered) return 25006;
							else return 25007;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25008;
							else return 25009;
						else
							if (Powered) return 25010;
							else return 25011;
					else
						if (Open)
							if (Powered) return 25012;
							else return 25013;
						else
							if (Powered) return 25014;
							else return 25015;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25016;
							else return 25017;
						else
							if (Powered) return 25018;
							else return 25019;
					else
						if (Open)
							if (Powered) return 25020;
							else return 25021;
						else
							if (Powered) return 25022;
							else return 25023;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25024;
							else return 25025;
						else
							if (Powered) return 25026;
							else return 25027;
					else
						if (Open)
							if (Powered) return 25028;
							else return 25029;
						else
							if (Powered) return 25030;
							else return 25031;
		}
		BlockState WaxedCopperDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WaxedCopperGrate
	{
		constexpr BlockState WaxedCopperGrate(const bool Waterlogged)
		{
			if (Waterlogged) return 25744;
			else return 25745;
		}
		BlockState WaxedCopperGrate();
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedCopperTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState WaxedCopperTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25480;
							else return 25481;
						else
							if (Waterlogged) return 25482;
							else return 25483;
					else
						if (Powered)
							if (Waterlogged) return 25484;
							else return 25485;
						else
							if (Waterlogged) return 25486;
							else return 25487;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25488;
							else return 25489;
						else
							if (Waterlogged) return 25490;
							else return 25491;
					else
						if (Powered)
							if (Waterlogged) return 25492;
							else return 25493;
						else
							if (Waterlogged) return 25494;
							else return 25495;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25496;
							else return 25497;
						else
							if (Waterlogged) return 25498;
							else return 25499;
					else
						if (Powered)
							if (Waterlogged) return 25500;
							else return 25501;
						else
							if (Waterlogged) return 25502;
							else return 25503;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25504;
							else return 25505;
						else
							if (Waterlogged) return 25506;
							else return 25507;
					else
						if (Powered)
							if (Waterlogged) return 25508;
							else return 25509;
						else
							if (Waterlogged) return 25510;
							else return 25511;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25512;
							else return 25513;
						else
							if (Waterlogged) return 25514;
							else return 25515;
					else
						if (Powered)
							if (Waterlogged) return 25516;
							else return 25517;
						else
							if (Waterlogged) return 25518;
							else return 25519;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25520;
							else return 25521;
						else
							if (Waterlogged) return 25522;
							else return 25523;
					else
						if (Powered)
							if (Waterlogged) return 25524;
							else return 25525;
						else
							if (Waterlogged) return 25526;
							else return 25527;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25528;
							else return 25529;
						else
							if (Waterlogged) return 25530;
							else return 25531;
					else
						if (Powered)
							if (Waterlogged) return 25532;
							else return 25533;
						else
							if (Waterlogged) return 25534;
							else return 25535;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25536;
							else return 25537;
						else
							if (Waterlogged) return 25538;
							else return 25539;
					else
						if (Powered)
							if (Waterlogged) return 25540;
							else return 25541;
						else
							if (Waterlogged) return 25542;
							else return 25543;
		}
		BlockState WaxedCopperTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedCutCopper
	{
		constexpr BlockState WaxedCutCopper()
		{
			return 24367;
		}
	}
	namespace WaxedCutCopperSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState WaxedCutCopperSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 24706;
				else return 24707;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 24708;
				else return 24709;
			else
				if (Waterlogged) return 24710;
				else return 24711;
		}
		BlockState WaxedCutCopperSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedCutCopperStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState WaxedCutCopperStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24608;
						else return 24609;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24610;
						else return 24611;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24612;
						else return 24613;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24614;
						else return 24615;
					else
						if (Waterlogged) return 24616;
						else return 24617;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24618;
						else return 24619;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24620;
						else return 24621;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24622;
						else return 24623;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24624;
						else return 24625;
					else
						if (Waterlogged) return 24626;
						else return 24627;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24628;
						else return 24629;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24630;
						else return 24631;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24632;
						else return 24633;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24634;
						else return 24635;
					else
						if (Waterlogged) return 24636;
						else return 24637;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24638;
						else return 24639;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24640;
						else return 24641;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24642;
						else return 24643;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24644;
						else return 24645;
					else
						if (Waterlogged) return 24646;
						else return 24647;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24648;
						else return 24649;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24650;
						else return 24651;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24652;
						else return 24653;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24654;
						else return 24655;
					else
						if (Waterlogged) return 24656;
						else return 24657;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24658;
						else return 24659;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24660;
						else return 24661;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24662;
						else return 24663;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24664;
						else return 24665;
					else
						if (Waterlogged) return 24666;
						else return 24667;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24668;
						else return 24669;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24670;
						else return 24671;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24672;
						else return 24673;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24674;
						else return 24675;
					else
						if (Waterlogged) return 24676;
						else return 24677;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24678;
						else return 24679;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24680;
						else return 24681;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24682;
						else return 24683;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24684;
						else return 24685;
					else
						if (Waterlogged) return 24686;
						else return 24687;
		}
		BlockState WaxedCutCopperStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedExposedChiseledCopper
	{
		constexpr BlockState WaxedExposedChiseledCopper()
		{
			return 24014;
		}
	}
	namespace WaxedExposedCopper
	{
		constexpr BlockState WaxedExposedCopper()
		{
			return 24362;
		}
	}
	namespace WaxedExposedCopperBulb
	{
		constexpr BlockState WaxedExposedCopperBulb(const bool Lit, const bool Powered)
		{
			if (Lit)
				if (Powered) return 25772;
				else return 25773;
			else
				if (Powered) return 25774;
				else return 25775;
		}
		BlockState WaxedExposedCopperBulb();
		bool Lit(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WaxedExposedCopperDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState WaxedExposedCopperDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25032;
							else return 25033;
						else
							if (Powered) return 25034;
							else return 25035;
					else
						if (Open)
							if (Powered) return 25036;
							else return 25037;
						else
							if (Powered) return 25038;
							else return 25039;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25040;
							else return 25041;
						else
							if (Powered) return 25042;
							else return 25043;
					else
						if (Open)
							if (Powered) return 25044;
							else return 25045;
						else
							if (Powered) return 25046;
							else return 25047;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25048;
							else return 25049;
						else
							if (Powered) return 25050;
							else return 25051;
					else
						if (Open)
							if (Powered) return 25052;
							else return 25053;
						else
							if (Powered) return 25054;
							else return 25055;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25056;
							else return 25057;
						else
							if (Powered) return 25058;
							else return 25059;
					else
						if (Open)
							if (Powered) return 25060;
							else return 25061;
						else
							if (Powered) return 25062;
							else return 25063;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25064;
							else return 25065;
						else
							if (Powered) return 25066;
							else return 25067;
					else
						if (Open)
							if (Powered) return 25068;
							else return 25069;
						else
							if (Powered) return 25070;
							else return 25071;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25072;
							else return 25073;
						else
							if (Powered) return 25074;
							else return 25075;
					else
						if (Open)
							if (Powered) return 25076;
							else return 25077;
						else
							if (Powered) return 25078;
							else return 25079;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25080;
							else return 25081;
						else
							if (Powered) return 25082;
							else return 25083;
					else
						if (Open)
							if (Powered) return 25084;
							else return 25085;
						else
							if (Powered) return 25086;
							else return 25087;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25088;
							else return 25089;
						else
							if (Powered) return 25090;
							else return 25091;
					else
						if (Open)
							if (Powered) return 25092;
							else return 25093;
						else
							if (Powered) return 25094;
							else return 25095;
		}
		BlockState WaxedExposedCopperDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WaxedExposedCopperGrate
	{
		constexpr BlockState WaxedExposedCopperGrate(const bool Waterlogged)
		{
			if (Waterlogged) return 25746;
			else return 25747;
		}
		BlockState WaxedExposedCopperGrate();
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedExposedCopperTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState WaxedExposedCopperTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25544;
							else return 25545;
						else
							if (Waterlogged) return 25546;
							else return 25547;
					else
						if (Powered)
							if (Waterlogged) return 25548;
							else return 25549;
						else
							if (Waterlogged) return 25550;
							else return 25551;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25552;
							else return 25553;
						else
							if (Waterlogged) return 25554;
							else return 25555;
					else
						if (Powered)
							if (Waterlogged) return 25556;
							else return 25557;
						else
							if (Waterlogged) return 25558;
							else return 25559;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25560;
							else return 25561;
						else
							if (Waterlogged) return 25562;
							else return 25563;
					else
						if (Powered)
							if (Waterlogged) return 25564;
							else return 25565;
						else
							if (Waterlogged) return 25566;
							else return 25567;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25568;
							else return 25569;
						else
							if (Waterlogged) return 25570;
							else return 25571;
					else
						if (Powered)
							if (Waterlogged) return 25572;
							else return 25573;
						else
							if (Waterlogged) return 25574;
							else return 25575;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25576;
							else return 25577;
						else
							if (Waterlogged) return 25578;
							else return 25579;
					else
						if (Powered)
							if (Waterlogged) return 25580;
							else return 25581;
						else
							if (Waterlogged) return 25582;
							else return 25583;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25584;
							else return 25585;
						else
							if (Waterlogged) return 25586;
							else return 25587;
					else
						if (Powered)
							if (Waterlogged) return 25588;
							else return 25589;
						else
							if (Waterlogged) return 25590;
							else return 25591;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25592;
							else return 25593;
						else
							if (Waterlogged) return 25594;
							else return 25595;
					else
						if (Powered)
							if (Waterlogged) return 25596;
							else return 25597;
						else
							if (Waterlogged) return 25598;
							else return 25599;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25600;
							else return 25601;
						else
							if (Waterlogged) return 25602;
							else return 25603;
					else
						if (Powered)
							if (Waterlogged) return 25604;
							else return 25605;
						else
							if (Waterlogged) return 25606;
							else return 25607;
		}
		BlockState WaxedExposedCopperTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedExposedCutCopper
	{
		constexpr BlockState WaxedExposedCutCopper()
		{
			return 24366;
		}
	}
	namespace WaxedExposedCutCopperSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState WaxedExposedCutCopperSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 24700;
				else return 24701;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 24702;
				else return 24703;
			else
				if (Waterlogged) return 24704;
				else return 24705;
		}
		BlockState WaxedExposedCutCopperSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedExposedCutCopperStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState WaxedExposedCutCopperStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24528;
						else return 24529;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24530;
						else return 24531;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24532;
						else return 24533;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24534;
						else return 24535;
					else
						if (Waterlogged) return 24536;
						else return 24537;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24538;
						else return 24539;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24540;
						else return 24541;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24542;
						else return 24543;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24544;
						else return 24545;
					else
						if (Waterlogged) return 24546;
						else return 24547;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24548;
						else return 24549;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24550;
						else return 24551;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24552;
						else return 24553;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24554;
						else return 24555;
					else
						if (Waterlogged) return 24556;
						else return 24557;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24558;
						else return 24559;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24560;
						else return 24561;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24562;
						else return 24563;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24564;
						else return 24565;
					else
						if (Waterlogged) return 24566;
						else return 24567;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24568;
						else return 24569;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24570;
						else return 24571;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24572;
						else return 24573;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24574;
						else return 24575;
					else
						if (Waterlogged) return 24576;
						else return 24577;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24578;
						else return 24579;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24580;
						else return 24581;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24582;
						else return 24583;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24584;
						else return 24585;
					else
						if (Waterlogged) return 24586;
						else return 24587;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24588;
						else return 24589;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24590;
						else return 24591;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24592;
						else return 24593;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24594;
						else return 24595;
					else
						if (Waterlogged) return 24596;
						else return 24597;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24598;
						else return 24599;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24600;
						else return 24601;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24602;
						else return 24603;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24604;
						else return 24605;
					else
						if (Waterlogged) return 24606;
						else return 24607;
		}
		BlockState WaxedExposedCutCopperStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedOxidizedChiseledCopper
	{
		constexpr BlockState WaxedOxidizedChiseledCopper()
		{
			return 24012;
		}
	}
	namespace WaxedOxidizedCopper
	{
		constexpr BlockState WaxedOxidizedCopper()
		{
			return 24363;
		}
	}
	namespace WaxedOxidizedCopperBulb
	{
		constexpr BlockState WaxedOxidizedCopperBulb(const bool Lit, const bool Powered)
		{
			if (Lit)
				if (Powered) return 25780;
				else return 25781;
			else
				if (Powered) return 25782;
				else return 25783;
		}
		BlockState WaxedOxidizedCopperBulb();
		bool Lit(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WaxedOxidizedCopperDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState WaxedOxidizedCopperDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25096;
							else return 25097;
						else
							if (Powered) return 25098;
							else return 25099;
					else
						if (Open)
							if (Powered) return 25100;
							else return 25101;
						else
							if (Powered) return 25102;
							else return 25103;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25104;
							else return 25105;
						else
							if (Powered) return 25106;
							else return 25107;
					else
						if (Open)
							if (Powered) return 25108;
							else return 25109;
						else
							if (Powered) return 25110;
							else return 25111;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25112;
							else return 25113;
						else
							if (Powered) return 25114;
							else return 25115;
					else
						if (Open)
							if (Powered) return 25116;
							else return 25117;
						else
							if (Powered) return 25118;
							else return 25119;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25120;
							else return 25121;
						else
							if (Powered) return 25122;
							else return 25123;
					else
						if (Open)
							if (Powered) return 25124;
							else return 25125;
						else
							if (Powered) return 25126;
							else return 25127;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25128;
							else return 25129;
						else
							if (Powered) return 25130;
							else return 25131;
					else
						if (Open)
							if (Powered) return 25132;
							else return 25133;
						else
							if (Powered) return 25134;
							else return 25135;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25136;
							else return 25137;
						else
							if (Powered) return 25138;
							else return 25139;
					else
						if (Open)
							if (Powered) return 25140;
							else return 25141;
						else
							if (Powered) return 25142;
							else return 25143;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25144;
							else return 25145;
						else
							if (Powered) return 25146;
							else return 25147;
					else
						if (Open)
							if (Powered) return 25148;
							else return 25149;
						else
							if (Powered) return 25150;
							else return 25151;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25152;
							else return 25153;
						else
							if (Powered) return 25154;
							else return 25155;
					else
						if (Open)
							if (Powered) return 25156;
							else return 25157;
						else
							if (Powered) return 25158;
							else return 25159;
		}
		BlockState WaxedOxidizedCopperDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WaxedOxidizedCopperGrate
	{
		constexpr BlockState WaxedOxidizedCopperGrate(const bool Waterlogged)
		{
			if (Waterlogged) return 25750;
			else return 25751;
		}
		BlockState WaxedOxidizedCopperGrate();
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedOxidizedCopperTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState WaxedOxidizedCopperTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25608;
							else return 25609;
						else
							if (Waterlogged) return 25610;
							else return 25611;
					else
						if (Powered)
							if (Waterlogged) return 25612;
							else return 25613;
						else
							if (Waterlogged) return 25614;
							else return 25615;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25616;
							else return 25617;
						else
							if (Waterlogged) return 25618;
							else return 25619;
					else
						if (Powered)
							if (Waterlogged) return 25620;
							else return 25621;
						else
							if (Waterlogged) return 25622;
							else return 25623;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25624;
							else return 25625;
						else
							if (Waterlogged) return 25626;
							else return 25627;
					else
						if (Powered)
							if (Waterlogged) return 25628;
							else return 25629;
						else
							if (Waterlogged) return 25630;
							else return 25631;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25632;
							else return 25633;
						else
							if (Waterlogged) return 25634;
							else return 25635;
					else
						if (Powered)
							if (Waterlogged) return 25636;
							else return 25637;
						else
							if (Waterlogged) return 25638;
							else return 25639;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25640;
							else return 25641;
						else
							if (Waterlogged) return 25642;
							else return 25643;
					else
						if (Powered)
							if (Waterlogged) return 25644;
							else return 25645;
						else
							if (Waterlogged) return 25646;
							else return 25647;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25648;
							else return 25649;
						else
							if (Waterlogged) return 25650;
							else return 25651;
					else
						if (Powered)
							if (Waterlogged) return 25652;
							else return 25653;
						else
							if (Waterlogged) return 25654;
							else return 25655;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25656;
							else return 25657;
						else
							if (Waterlogged) return 25658;
							else return 25659;
					else
						if (Powered)
							if (Waterlogged) return 25660;
							else return 25661;
						else
							if (Waterlogged) return 25662;
							else return 25663;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25664;
							else return 25665;
						else
							if (Waterlogged) return 25666;
							else return 25667;
					else
						if (Powered)
							if (Waterlogged) return 25668;
							else return 25669;
						else
							if (Waterlogged) return 25670;
							else return 25671;
		}
		BlockState WaxedOxidizedCopperTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedOxidizedCutCopper
	{
		constexpr BlockState WaxedOxidizedCutCopper()
		{
			return 24364;
		}
	}
	namespace WaxedOxidizedCutCopperSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState WaxedOxidizedCutCopperSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 24688;
				else return 24689;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 24690;
				else return 24691;
			else
				if (Waterlogged) return 24692;
				else return 24693;
		}
		BlockState WaxedOxidizedCutCopperSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedOxidizedCutCopperStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState WaxedOxidizedCutCopperStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24368;
						else return 24369;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24370;
						else return 24371;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24372;
						else return 24373;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24374;
						else return 24375;
					else
						if (Waterlogged) return 24376;
						else return 24377;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24378;
						else return 24379;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24380;
						else return 24381;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24382;
						else return 24383;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24384;
						else return 24385;
					else
						if (Waterlogged) return 24386;
						else return 24387;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24388;
						else return 24389;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24390;
						else return 24391;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24392;
						else return 24393;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24394;
						else return 24395;
					else
						if (Waterlogged) return 24396;
						else return 24397;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24398;
						else return 24399;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24400;
						else return 24401;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24402;
						else return 24403;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24404;
						else return 24405;
					else
						if (Waterlogged) return 24406;
						else return 24407;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24408;
						else return 24409;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24410;
						else return 24411;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24412;
						else return 24413;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24414;
						else return 24415;
					else
						if (Waterlogged) return 24416;
						else return 24417;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24418;
						else return 24419;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24420;
						else return 24421;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24422;
						else return 24423;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24424;
						else return 24425;
					else
						if (Waterlogged) return 24426;
						else return 24427;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24428;
						else return 24429;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24430;
						else return 24431;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24432;
						else return 24433;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24434;
						else return 24435;
					else
						if (Waterlogged) return 24436;
						else return 24437;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24438;
						else return 24439;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24440;
						else return 24441;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24442;
						else return 24443;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24444;
						else return 24445;
					else
						if (Waterlogged) return 24446;
						else return 24447;
		}
		BlockState WaxedOxidizedCutCopperStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedWeatheredChiseledCopper
	{
		constexpr BlockState WaxedWeatheredChiseledCopper()
		{
			return 24013;
		}
	}
	namespace WaxedWeatheredCopper
	{
		constexpr BlockState WaxedWeatheredCopper()
		{
			return 24361;
		}
	}
	namespace WaxedWeatheredCopperBulb
	{
		constexpr BlockState WaxedWeatheredCopperBulb(const bool Lit, const bool Powered)
		{
			if (Lit)
				if (Powered) return 25776;
				else return 25777;
			else
				if (Powered) return 25778;
				else return 25779;
		}
		BlockState WaxedWeatheredCopperBulb();
		bool Lit(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WaxedWeatheredCopperDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState WaxedWeatheredCopperDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25160;
							else return 25161;
						else
							if (Powered) return 25162;
							else return 25163;
					else
						if (Open)
							if (Powered) return 25164;
							else return 25165;
						else
							if (Powered) return 25166;
							else return 25167;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25168;
							else return 25169;
						else
							if (Powered) return 25170;
							else return 25171;
					else
						if (Open)
							if (Powered) return 25172;
							else return 25173;
						else
							if (Powered) return 25174;
							else return 25175;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25176;
							else return 25177;
						else
							if (Powered) return 25178;
							else return 25179;
					else
						if (Open)
							if (Powered) return 25180;
							else return 25181;
						else
							if (Powered) return 25182;
							else return 25183;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25184;
							else return 25185;
						else
							if (Powered) return 25186;
							else return 25187;
					else
						if (Open)
							if (Powered) return 25188;
							else return 25189;
						else
							if (Powered) return 25190;
							else return 25191;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25192;
							else return 25193;
						else
							if (Powered) return 25194;
							else return 25195;
					else
						if (Open)
							if (Powered) return 25196;
							else return 25197;
						else
							if (Powered) return 25198;
							else return 25199;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25200;
							else return 25201;
						else
							if (Powered) return 25202;
							else return 25203;
					else
						if (Open)
							if (Powered) return 25204;
							else return 25205;
						else
							if (Powered) return 25206;
							else return 25207;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25208;
							else return 25209;
						else
							if (Powered) return 25210;
							else return 25211;
					else
						if (Open)
							if (Powered) return 25212;
							else return 25213;
						else
							if (Powered) return 25214;
							else return 25215;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 25216;
							else return 25217;
						else
							if (Powered) return 25218;
							else return 25219;
					else
						if (Open)
							if (Powered) return 25220;
							else return 25221;
						else
							if (Powered) return 25222;
							else return 25223;
		}
		BlockState WaxedWeatheredCopperDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WaxedWeatheredCopperGrate
	{
		constexpr BlockState WaxedWeatheredCopperGrate(const bool Waterlogged)
		{
			if (Waterlogged) return 25748;
			else return 25749;
		}
		BlockState WaxedWeatheredCopperGrate();
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedWeatheredCopperTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState WaxedWeatheredCopperTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25672;
							else return 25673;
						else
							if (Waterlogged) return 25674;
							else return 25675;
					else
						if (Powered)
							if (Waterlogged) return 25676;
							else return 25677;
						else
							if (Waterlogged) return 25678;
							else return 25679;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25680;
							else return 25681;
						else
							if (Waterlogged) return 25682;
							else return 25683;
					else
						if (Powered)
							if (Waterlogged) return 25684;
							else return 25685;
						else
							if (Waterlogged) return 25686;
							else return 25687;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25688;
							else return 25689;
						else
							if (Waterlogged) return 25690;
							else return 25691;
					else
						if (Powered)
							if (Waterlogged) return 25692;
							else return 25693;
						else
							if (Waterlogged) return 25694;
							else return 25695;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25696;
							else return 25697;
						else
							if (Waterlogged) return 25698;
							else return 25699;
					else
						if (Powered)
							if (Waterlogged) return 25700;
							else return 25701;
						else
							if (Waterlogged) return 25702;
							else return 25703;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25704;
							else return 25705;
						else
							if (Waterlogged) return 25706;
							else return 25707;
					else
						if (Powered)
							if (Waterlogged) return 25708;
							else return 25709;
						else
							if (Waterlogged) return 25710;
							else return 25711;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25712;
							else return 25713;
						else
							if (Waterlogged) return 25714;
							else return 25715;
					else
						if (Powered)
							if (Waterlogged) return 25716;
							else return 25717;
						else
							if (Waterlogged) return 25718;
							else return 25719;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25720;
							else return 25721;
						else
							if (Waterlogged) return 25722;
							else return 25723;
					else
						if (Powered)
							if (Waterlogged) return 25724;
							else return 25725;
						else
							if (Waterlogged) return 25726;
							else return 25727;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25728;
							else return 25729;
						else
							if (Waterlogged) return 25730;
							else return 25731;
					else
						if (Powered)
							if (Waterlogged) return 25732;
							else return 25733;
						else
							if (Waterlogged) return 25734;
							else return 25735;
		}
		BlockState WaxedWeatheredCopperTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedWeatheredCutCopper
	{
		constexpr BlockState WaxedWeatheredCutCopper()
		{
			return 24365;
		}
	}
	namespace WaxedWeatheredCutCopperSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState WaxedWeatheredCutCopperSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 24694;
				else return 24695;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 24696;
				else return 24697;
			else
				if (Waterlogged) return 24698;
				else return 24699;
		}
		BlockState WaxedWeatheredCutCopperSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedWeatheredCutCopperStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState WaxedWeatheredCutCopperStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24448;
						else return 24449;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24450;
						else return 24451;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24452;
						else return 24453;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24454;
						else return 24455;
					else
						if (Waterlogged) return 24456;
						else return 24457;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24458;
						else return 24459;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24460;
						else return 24461;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24462;
						else return 24463;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24464;
						else return 24465;
					else
						if (Waterlogged) return 24466;
						else return 24467;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24468;
						else return 24469;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24470;
						else return 24471;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24472;
						else return 24473;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24474;
						else return 24475;
					else
						if (Waterlogged) return 24476;
						else return 24477;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24478;
						else return 24479;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24480;
						else return 24481;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24482;
						else return 24483;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24484;
						else return 24485;
					else
						if (Waterlogged) return 24486;
						else return 24487;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24488;
						else return 24489;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24490;
						else return 24491;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24492;
						else return 24493;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24494;
						else return 24495;
					else
						if (Waterlogged) return 24496;
						else return 24497;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24498;
						else return 24499;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24500;
						else return 24501;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24502;
						else return 24503;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24504;
						else return 24505;
					else
						if (Waterlogged) return 24506;
						else return 24507;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24508;
						else return 24509;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24510;
						else return 24511;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24512;
						else return 24513;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24514;
						else return 24515;
					else
						if (Waterlogged) return 24516;
						else return 24517;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24518;
						else return 24519;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24520;
						else return 24521;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24522;
						else return 24523;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24524;
						else return 24525;
					else
						if (Waterlogged) return 24526;
						else return 24527;
		}
		BlockState WaxedWeatheredCutCopperStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WeatheredChiseledCopper
	{
		constexpr BlockState WeatheredChiseledCopper()
		{
			return 24009;
		}
	}
	namespace WeatheredCopper
	{
		constexpr BlockState WeatheredCopper()
		{
			return 24000;
		}
	}
	namespace WeatheredCopperBulb
	{
		constexpr BlockState WeatheredCopperBulb(const bool Lit, const bool Powered)
		{
			if (Lit)
				if (Powered) return 25760;
				else return 25761;
			else
				if (Powered) return 25762;
				else return 25763;
		}
		BlockState WeatheredCopperBulb();
		bool Lit(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WeatheredCopperDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState WeatheredCopperDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24904;
							else return 24905;
						else
							if (Powered) return 24906;
							else return 24907;
					else
						if (Open)
							if (Powered) return 24908;
							else return 24909;
						else
							if (Powered) return 24910;
							else return 24911;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24912;
							else return 24913;
						else
							if (Powered) return 24914;
							else return 24915;
					else
						if (Open)
							if (Powered) return 24916;
							else return 24917;
						else
							if (Powered) return 24918;
							else return 24919;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24920;
							else return 24921;
						else
							if (Powered) return 24922;
							else return 24923;
					else
						if (Open)
							if (Powered) return 24924;
							else return 24925;
						else
							if (Powered) return 24926;
							else return 24927;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24928;
							else return 24929;
						else
							if (Powered) return 24930;
							else return 24931;
					else
						if (Open)
							if (Powered) return 24932;
							else return 24933;
						else
							if (Powered) return 24934;
							else return 24935;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24936;
							else return 24937;
						else
							if (Powered) return 24938;
							else return 24939;
					else
						if (Open)
							if (Powered) return 24940;
							else return 24941;
						else
							if (Powered) return 24942;
							else return 24943;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24944;
							else return 24945;
						else
							if (Powered) return 24946;
							else return 24947;
					else
						if (Open)
							if (Powered) return 24948;
							else return 24949;
						else
							if (Powered) return 24950;
							else return 24951;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24952;
							else return 24953;
						else
							if (Powered) return 24954;
							else return 24955;
					else
						if (Open)
							if (Powered) return 24956;
							else return 24957;
						else
							if (Powered) return 24958;
							else return 24959;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24960;
							else return 24961;
						else
							if (Powered) return 24962;
							else return 24963;
					else
						if (Open)
							if (Powered) return 24964;
							else return 24965;
						else
							if (Powered) return 24966;
							else return 24967;
		}
		BlockState WeatheredCopperDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WeatheredCopperGrate
	{
		constexpr BlockState WeatheredCopperGrate(const bool Waterlogged)
		{
			if (Waterlogged) return 25740;
			else return 25741;
		}
		BlockState WeatheredCopperGrate();
		bool Waterlogged(BlockState Block);
	}
	namespace WeatheredCopperTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState WeatheredCopperTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25416;
							else return 25417;
						else
							if (Waterlogged) return 25418;
							else return 25419;
					else
						if (Powered)
							if (Waterlogged) return 25420;
							else return 25421;
						else
							if (Waterlogged) return 25422;
							else return 25423;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25424;
							else return 25425;
						else
							if (Waterlogged) return 25426;
							else return 25427;
					else
						if (Powered)
							if (Waterlogged) return 25428;
							else return 25429;
						else
							if (Waterlogged) return 25430;
							else return 25431;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25432;
							else return 25433;
						else
							if (Waterlogged) return 25434;
							else return 25435;
					else
						if (Powered)
							if (Waterlogged) return 25436;
							else return 25437;
						else
							if (Waterlogged) return 25438;
							else return 25439;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25440;
							else return 25441;
						else
							if (Waterlogged) return 25442;
							else return 25443;
					else
						if (Powered)
							if (Waterlogged) return 25444;
							else return 25445;
						else
							if (Waterlogged) return 25446;
							else return 25447;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25448;
							else return 25449;
						else
							if (Waterlogged) return 25450;
							else return 25451;
					else
						if (Powered)
							if (Waterlogged) return 25452;
							else return 25453;
						else
							if (Waterlogged) return 25454;
							else return 25455;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25456;
							else return 25457;
						else
							if (Waterlogged) return 25458;
							else return 25459;
					else
						if (Powered)
							if (Waterlogged) return 25460;
							else return 25461;
						else
							if (Waterlogged) return 25462;
							else return 25463;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 25464;
							else return 25465;
						else
							if (Waterlogged) return 25466;
							else return 25467;
					else
						if (Powered)
							if (Waterlogged) return 25468;
							else return 25469;
						else
							if (Waterlogged) return 25470;
							else return 25471;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 25472;
							else return 25473;
						else
							if (Waterlogged) return 25474;
							else return 25475;
					else
						if (Powered)
							if (Waterlogged) return 25476;
							else return 25477;
						else
							if (Waterlogged) return 25478;
							else return 25479;
		}
		BlockState WeatheredCopperTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WeatheredCutCopper
	{
		constexpr BlockState WeatheredCutCopper()
		{
			return 24005;
		}
	}
	namespace WeatheredCutCopperSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState WeatheredCutCopperSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 24342;
				else return 24343;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 24344;
				else return 24345;
			else
				if (Waterlogged) return 24346;
				else return 24347;
		}
		BlockState WeatheredCutCopperSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WeatheredCutCopperStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState WeatheredCutCopperStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24096;
						else return 24097;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24098;
						else return 24099;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24100;
						else return 24101;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24102;
						else return 24103;
					else
						if (Waterlogged) return 24104;
						else return 24105;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24106;
						else return 24107;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24108;
						else return 24109;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24110;
						else return 24111;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24112;
						else return 24113;
					else
						if (Waterlogged) return 24114;
						else return 24115;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24116;
						else return 24117;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24118;
						else return 24119;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24120;
						else return 24121;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24122;
						else return 24123;
					else
						if (Waterlogged) return 24124;
						else return 24125;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24126;
						else return 24127;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24128;
						else return 24129;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24130;
						else return 24131;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24132;
						else return 24133;
					else
						if (Waterlogged) return 24134;
						else return 24135;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24136;
						else return 24137;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24138;
						else return 24139;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24140;
						else return 24141;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24142;
						else return 24143;
					else
						if (Waterlogged) return 24144;
						else return 24145;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24146;
						else return 24147;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24148;
						else return 24149;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24150;
						else return 24151;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24152;
						else return 24153;
					else
						if (Waterlogged) return 24154;
						else return 24155;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24156;
						else return 24157;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24158;
						else return 24159;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24160;
						else return 24161;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24162;
						else return 24163;
					else
						if (Waterlogged) return 24164;
						else return 24165;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24166;
						else return 24167;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24168;
						else return 24169;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24170;
						else return 24171;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24172;
						else return 24173;
					else
						if (Waterlogged) return 24174;
						else return 24175;
		}
		BlockState WeatheredCutCopperStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WeepingVines
	{
		constexpr BlockState WeepingVines(const unsigned char Age)
		{
			if (Age == 0) return 19666;
			else if (Age == 1) return 19667;
			else if (Age == 2) return 19668;
			else if (Age == 3) return 19669;
			else if (Age == 4) return 19670;
			else if (Age == 5) return 19671;
			else if (Age == 6) return 19672;
			else if (Age == 7) return 19673;
			else if (Age == 8) return 19674;
			else if (Age == 9) return 19675;
			else if (Age == 10) return 19676;
			else if (Age == 11) return 19677;
			else if (Age == 12) return 19678;
			else if (Age == 13) return 19679;
			else if (Age == 14) return 19680;
			else if (Age == 15) return 19681;
			else if (Age == 16) return 19682;
			else if (Age == 17) return 19683;
			else if (Age == 18) return 19684;
			else if (Age == 19) return 19685;
			else if (Age == 20) return 19686;
			else if (Age == 21) return 19687;
			else if (Age == 22) return 19688;
			else if (Age == 23) return 19689;
			else if (Age == 24) return 19690;
			else return 19691;
		}
		BlockState WeepingVines();
		unsigned char Age(BlockState Block);
	}
	namespace WeepingVinesPlant
	{
		constexpr BlockState WeepingVinesPlant()
		{
			return 19692;
		}
	}
	namespace WetSponge
	{
		constexpr BlockState WetSponge()
		{
			return 561;
		}
	}
	namespace Wheat
	{
		constexpr BlockState Wheat(const unsigned char Age)
		{
			if (Age == 0) return 4342;
			else if (Age == 1) return 4343;
			else if (Age == 2) return 4344;
			else if (Age == 3) return 4345;
			else if (Age == 4) return 4346;
			else if (Age == 5) return 4347;
			else if (Age == 6) return 4348;
			else return 4349;
		}
		BlockState Wheat();
		unsigned char Age(BlockState Block);
	}
	namespace WhiteBanner
	{
		constexpr BlockState WhiteBanner(const unsigned char Rotation)
		{
			if (Rotation == 0) return 11648;
			else if (Rotation == 1) return 11649;
			else if (Rotation == 2) return 11650;
			else if (Rotation == 3) return 11651;
			else if (Rotation == 4) return 11652;
			else if (Rotation == 5) return 11653;
			else if (Rotation == 6) return 11654;
			else if (Rotation == 7) return 11655;
			else if (Rotation == 8) return 11656;
			else if (Rotation == 9) return 11657;
			else if (Rotation == 10) return 11658;
			else if (Rotation == 11) return 11659;
			else if (Rotation == 12) return 11660;
			else if (Rotation == 13) return 11661;
			else if (Rotation == 14) return 11662;
			else return 11663;
		}
		BlockState WhiteBanner();
		unsigned char Rotation(BlockState Block);
	}
	namespace WhiteBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState WhiteBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1731;
					else return 1732;
				else
					if (Part == Part::Head) return 1733;
					else return 1734;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1735;
					else return 1736;
				else
					if (Part == Part::Head) return 1737;
					else return 1738;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1739;
					else return 1740;
				else
					if (Part == Part::Head) return 1741;
					else return 1742;
			else
				if (Occupied)
					if (Part == Part::Head) return 1743;
					else return 1744;
				else
					if (Part == Part::Head) return 1745;
					else return 1746;
		}
		BlockState WhiteBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace WhiteCandle
	{
		constexpr BlockState WhiteCandle(const unsigned char Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 21801;
					else return 21802;
				else
					if (Waterlogged) return 21803;
					else return 21804;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 21805;
					else return 21806;
				else
					if (Waterlogged) return 21807;
					else return 21808;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 21809;
					else return 21810;
				else
					if (Waterlogged) return 21811;
					else return 21812;
			else
				if (Lit)
					if (Waterlogged) return 21813;
					else return 21814;
				else
					if (Waterlogged) return 21815;
					else return 21816;
		}
		BlockState WhiteCandle();
		unsigned char Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WhiteCandleCake
	{
		constexpr BlockState WhiteCandleCake(const bool Lit)
		{
			if (Lit) return 22059;
			else return 22060;
		}
		BlockState WhiteCandleCake();
		bool Lit(BlockState Block);
	}
	namespace WhiteCarpet
	{
		constexpr BlockState WhiteCarpet()
		{
			return 11617;
		}
	}
	namespace WhiteConcrete
	{
		constexpr BlockState WhiteConcrete()
		{
			return 13751;
		}
	}
	namespace WhiteConcretePowder
	{
		constexpr BlockState WhiteConcretePowder()
		{
			return 13767;
		}
	}
	namespace WhiteGlazedTerracotta
	{
		constexpr BlockState WhiteGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13687;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13688;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13689;
			else return 13690;
		}
		BlockState WhiteGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace WhiteShulkerBox
	{
		constexpr BlockState WhiteShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13591;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 13592;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13593;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13594;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 13595;
			else return 13596;
		}
		BlockState WhiteShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace WhiteStainedGlass
	{
		constexpr BlockState WhiteStainedGlass()
		{
			return 6124;
		}
	}
	namespace WhiteStainedGlassPane
	{
		constexpr BlockState WhiteStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10181;
							else return 10182;
						else
							if (West) return 10183;
							else return 10184;
					else
						if (Waterlogged)
							if (West) return 10185;
							else return 10186;
						else
							if (West) return 10187;
							else return 10188;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10189;
							else return 10190;
						else
							if (West) return 10191;
							else return 10192;
					else
						if (Waterlogged)
							if (West) return 10193;
							else return 10194;
						else
							if (West) return 10195;
							else return 10196;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10197;
							else return 10198;
						else
							if (West) return 10199;
							else return 10200;
					else
						if (Waterlogged)
							if (West) return 10201;
							else return 10202;
						else
							if (West) return 10203;
							else return 10204;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10205;
							else return 10206;
						else
							if (West) return 10207;
							else return 10208;
					else
						if (Waterlogged)
							if (West) return 10209;
							else return 10210;
						else
							if (West) return 10211;
							else return 10212;
		}
		BlockState WhiteStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace WhiteTerracotta
	{
		constexpr BlockState WhiteTerracotta()
		{
			return 10165;
		}
	}
	namespace WhiteTulip
	{
		constexpr BlockState WhiteTulip()
		{
			return 2129;
		}
	}
	namespace WhiteWallBanner
	{
		constexpr BlockState WhiteWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11904;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11905;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11906;
			else return 11907;
		}
		BlockState WhiteWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace WhiteWool
	{
		constexpr BlockState WhiteWool()
		{
			return 2093;
		}
	}
	namespace Wildflowers
	{
		constexpr BlockState Wildflowers(const eBlockFace Facing, const unsigned char FlowerAmount)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (FlowerAmount == 1) return 25903;
				else if (FlowerAmount == 2) return 25904;
				else if (FlowerAmount == 3) return 25905;
				else return 25906;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (FlowerAmount == 1) return 25907;
				else if (FlowerAmount == 2) return 25908;
				else if (FlowerAmount == 3) return 25909;
				else return 25910;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (FlowerAmount == 1) return 25911;
				else if (FlowerAmount == 2) return 25912;
				else if (FlowerAmount == 3) return 25913;
				else return 25914;
			else
				if (FlowerAmount == 1) return 25915;
				else if (FlowerAmount == 2) return 25916;
				else if (FlowerAmount == 3) return 25917;
				else return 25918;
		}
		BlockState Wildflowers();
		eBlockFace Facing(BlockState Block);
		unsigned char FlowerAmount(BlockState Block);
	}
	namespace WitherRose
	{
		constexpr BlockState WitherRose()
		{
			return 2133;
		}
	}
	namespace WitherSkeletonSkull
	{
		constexpr BlockState WitherSkeletonSkull(const bool Powered, const unsigned char Rotation)
		{
			if (Powered)
				if (Rotation == 0) return 9676;
				else if (Rotation == 1) return 9677;
				else if (Rotation == 2) return 9678;
				else if (Rotation == 3) return 9679;
				else if (Rotation == 4) return 9680;
				else if (Rotation == 5) return 9681;
				else if (Rotation == 6) return 9682;
				else if (Rotation == 7) return 9683;
				else if (Rotation == 8) return 9684;
				else if (Rotation == 9) return 9685;
				else if (Rotation == 10) return 9686;
				else if (Rotation == 11) return 9687;
				else if (Rotation == 12) return 9688;
				else if (Rotation == 13) return 9689;
				else if (Rotation == 14) return 9690;
				else return 9691;
			else
				if (Rotation == 0) return 9692;
				else if (Rotation == 1) return 9693;
				else if (Rotation == 2) return 9694;
				else if (Rotation == 3) return 9695;
				else if (Rotation == 4) return 9696;
				else if (Rotation == 5) return 9697;
				else if (Rotation == 6) return 9698;
				else if (Rotation == 7) return 9699;
				else if (Rotation == 8) return 9700;
				else if (Rotation == 9) return 9701;
				else if (Rotation == 10) return 9702;
				else if (Rotation == 11) return 9703;
				else if (Rotation == 12) return 9704;
				else if (Rotation == 13) return 9705;
				else if (Rotation == 14) return 9706;
				else return 9707;
		}
		BlockState WitherSkeletonSkull();
		bool Powered(BlockState Block);
		unsigned char Rotation(BlockState Block);
	}
	namespace WitherSkeletonWallSkull
	{
		constexpr BlockState WitherSkeletonWallSkull(const eBlockFace Facing, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Powered) return 9708;
				else return 9709;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Powered) return 9710;
				else return 9711;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Powered) return 9712;
				else return 9713;
			else
				if (Powered) return 9714;
				else return 9715;
		}
		BlockState WitherSkeletonWallSkull();
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace YellowBanner
	{
		constexpr BlockState YellowBanner(const unsigned char Rotation)
		{
			if (Rotation == 0) return 11712;
			else if (Rotation == 1) return 11713;
			else if (Rotation == 2) return 11714;
			else if (Rotation == 3) return 11715;
			else if (Rotation == 4) return 11716;
			else if (Rotation == 5) return 11717;
			else if (Rotation == 6) return 11718;
			else if (Rotation == 7) return 11719;
			else if (Rotation == 8) return 11720;
			else if (Rotation == 9) return 11721;
			else if (Rotation == 10) return 11722;
			else if (Rotation == 11) return 11723;
			else if (Rotation == 12) return 11724;
			else if (Rotation == 13) return 11725;
			else if (Rotation == 14) return 11726;
			else return 11727;
		}
		BlockState YellowBanner();
		unsigned char Rotation(BlockState Block);
	}
	namespace YellowBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState YellowBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1795;
					else return 1796;
				else
					if (Part == Part::Head) return 1797;
					else return 1798;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1799;
					else return 1800;
				else
					if (Part == Part::Head) return 1801;
					else return 1802;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1803;
					else return 1804;
				else
					if (Part == Part::Head) return 1805;
					else return 1806;
			else
				if (Occupied)
					if (Part == Part::Head) return 1807;
					else return 1808;
				else
					if (Part == Part::Head) return 1809;
					else return 1810;
		}
		BlockState YellowBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace YellowCandle
	{
		constexpr BlockState YellowCandle(const unsigned char Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 21865;
					else return 21866;
				else
					if (Waterlogged) return 21867;
					else return 21868;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 21869;
					else return 21870;
				else
					if (Waterlogged) return 21871;
					else return 21872;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 21873;
					else return 21874;
				else
					if (Waterlogged) return 21875;
					else return 21876;
			else
				if (Lit)
					if (Waterlogged) return 21877;
					else return 21878;
				else
					if (Waterlogged) return 21879;
					else return 21880;
		}
		BlockState YellowCandle();
		unsigned char Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace YellowCandleCake
	{
		constexpr BlockState YellowCandleCake(const bool Lit)
		{
			if (Lit) return 22067;
			else return 22068;
		}
		BlockState YellowCandleCake();
		bool Lit(BlockState Block);
	}
	namespace YellowCarpet
	{
		constexpr BlockState YellowCarpet()
		{
			return 11621;
		}
	}
	namespace YellowConcrete
	{
		constexpr BlockState YellowConcrete()
		{
			return 13755;
		}
	}
	namespace YellowConcretePowder
	{
		constexpr BlockState YellowConcretePowder()
		{
			return 13771;
		}
	}
	namespace YellowGlazedTerracotta
	{
		constexpr BlockState YellowGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13703;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13704;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13705;
			else return 13706;
		}
		BlockState YellowGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace YellowShulkerBox
	{
		constexpr BlockState YellowShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 13615;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 13616;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 13617;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 13618;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 13619;
			else return 13620;
		}
		BlockState YellowShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace YellowStainedGlass
	{
		constexpr BlockState YellowStainedGlass()
		{
			return 6128;
		}
	}
	namespace YellowStainedGlassPane
	{
		constexpr BlockState YellowStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10309;
							else return 10310;
						else
							if (West) return 10311;
							else return 10312;
					else
						if (Waterlogged)
							if (West) return 10313;
							else return 10314;
						else
							if (West) return 10315;
							else return 10316;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10317;
							else return 10318;
						else
							if (West) return 10319;
							else return 10320;
					else
						if (Waterlogged)
							if (West) return 10321;
							else return 10322;
						else
							if (West) return 10323;
							else return 10324;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 10325;
							else return 10326;
						else
							if (West) return 10327;
							else return 10328;
					else
						if (Waterlogged)
							if (West) return 10329;
							else return 10330;
						else
							if (West) return 10331;
							else return 10332;
				else
					if (South)
						if (Waterlogged)
							if (West) return 10333;
							else return 10334;
						else
							if (West) return 10335;
							else return 10336;
					else
						if (Waterlogged)
							if (West) return 10337;
							else return 10338;
						else
							if (West) return 10339;
							else return 10340;
		}
		BlockState YellowStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace YellowTerracotta
	{
		constexpr BlockState YellowTerracotta()
		{
			return 10169;
		}
	}
	namespace YellowWallBanner
	{
		constexpr BlockState YellowWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11920;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11921;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11922;
			else return 11923;
		}
		BlockState YellowWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace YellowWool
	{
		constexpr BlockState YellowWool()
		{
			return 2097;
		}
	}
	namespace ZombieHead
	{
		constexpr BlockState ZombieHead(const bool Powered, const unsigned char Rotation)
		{
			if (Powered)
				if (Rotation == 0) return 9716;
				else if (Rotation == 1) return 9717;
				else if (Rotation == 2) return 9718;
				else if (Rotation == 3) return 9719;
				else if (Rotation == 4) return 9720;
				else if (Rotation == 5) return 9721;
				else if (Rotation == 6) return 9722;
				else if (Rotation == 7) return 9723;
				else if (Rotation == 8) return 9724;
				else if (Rotation == 9) return 9725;
				else if (Rotation == 10) return 9726;
				else if (Rotation == 11) return 9727;
				else if (Rotation == 12) return 9728;
				else if (Rotation == 13) return 9729;
				else if (Rotation == 14) return 9730;
				else return 9731;
			else
				if (Rotation == 0) return 9732;
				else if (Rotation == 1) return 9733;
				else if (Rotation == 2) return 9734;
				else if (Rotation == 3) return 9735;
				else if (Rotation == 4) return 9736;
				else if (Rotation == 5) return 9737;
				else if (Rotation == 6) return 9738;
				else if (Rotation == 7) return 9739;
				else if (Rotation == 8) return 9740;
				else if (Rotation == 9) return 9741;
				else if (Rotation == 10) return 9742;
				else if (Rotation == 11) return 9743;
				else if (Rotation == 12) return 9744;
				else if (Rotation == 13) return 9745;
				else if (Rotation == 14) return 9746;
				else return 9747;
		}
		BlockState ZombieHead();
		bool Powered(BlockState Block);
		unsigned char Rotation(BlockState Block);
	}
	namespace ZombieWallHead
	{
		constexpr BlockState ZombieWallHead(const eBlockFace Facing, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Powered) return 9748;
				else return 9749;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Powered) return 9750;
				else return 9751;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Powered) return 9752;
				else return 9753;
			else
				if (Powered) return 9754;
				else return 9755;
		}
		BlockState ZombieWallHead();
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
}
